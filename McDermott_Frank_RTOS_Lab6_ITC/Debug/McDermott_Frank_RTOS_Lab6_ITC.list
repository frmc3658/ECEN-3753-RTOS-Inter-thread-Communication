
McDermott_Frank_RTOS_Lab6_ITC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000924c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800963c  0800963c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009644  08009644  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009644  08009644  00019644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009648  08009648  00019648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800964c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00005690  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200056f0  200056f0  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bf24  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d38  00000000  00000000  0003bff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017d8  00000000  00000000  0003fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001243  00000000  00000000  00041508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002722e  00000000  00000000  0004274b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a924  00000000  00000000  00069979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eeb0c  00000000  00000000  0008429d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006764  00000000  00000000  00172dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000da  00000000  00000000  00179510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080093e4 	.word	0x080093e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080093e4 	.word	0x080093e4

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20004b34 	.word	0x20004b34

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b970 	b.w	800057c <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9e08      	ldr	r6, [sp, #32]
 80002ba:	460d      	mov	r5, r1
 80002bc:	4604      	mov	r4, r0
 80002be:	460f      	mov	r7, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14a      	bne.n	800035a <__udivmoddi4+0xa6>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4694      	mov	ip, r2
 80002c8:	d965      	bls.n	8000396 <__udivmoddi4+0xe2>
 80002ca:	fab2 f382 	clz	r3, r2
 80002ce:	b143      	cbz	r3, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d4:	f1c3 0220 	rsb	r2, r3, #32
 80002d8:	409f      	lsls	r7, r3
 80002da:	fa20 f202 	lsr.w	r2, r0, r2
 80002de:	4317      	orrs	r7, r2
 80002e0:	409c      	lsls	r4, r3
 80002e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e6:	fa1f f58c 	uxth.w	r5, ip
 80002ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ee:	0c22      	lsrs	r2, r4, #16
 80002f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	fb01 f005 	mul.w	r0, r1, r5
 80002fc:	4290      	cmp	r0, r2
 80002fe:	d90a      	bls.n	8000316 <__udivmoddi4+0x62>
 8000300:	eb1c 0202 	adds.w	r2, ip, r2
 8000304:	f101 37ff 	add.w	r7, r1, #4294967295
 8000308:	f080 811c 	bcs.w	8000544 <__udivmoddi4+0x290>
 800030c:	4290      	cmp	r0, r2
 800030e:	f240 8119 	bls.w	8000544 <__udivmoddi4+0x290>
 8000312:	3902      	subs	r1, #2
 8000314:	4462      	add	r2, ip
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	fbb2 f0fe 	udiv	r0, r2, lr
 800031e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000322:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	42a5      	cmp	r5, r4
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x90>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	f080 8107 	bcs.w	8000548 <__udivmoddi4+0x294>
 800033a:	42a5      	cmp	r5, r4
 800033c:	f240 8104 	bls.w	8000548 <__udivmoddi4+0x294>
 8000340:	4464      	add	r4, ip
 8000342:	3802      	subs	r0, #2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0xa2>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xbc>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80ed 	beq.w	800053e <__udivmoddi4+0x28a>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d149      	bne.n	800040c <__udivmoddi4+0x158>
 8000378:	42ab      	cmp	r3, r5
 800037a:	d302      	bcc.n	8000382 <__udivmoddi4+0xce>
 800037c:	4282      	cmp	r2, r0
 800037e:	f200 80f8 	bhi.w	8000572 <__udivmoddi4+0x2be>
 8000382:	1a84      	subs	r4, r0, r2
 8000384:	eb65 0203 	sbc.w	r2, r5, r3
 8000388:	2001      	movs	r0, #1
 800038a:	4617      	mov	r7, r2
 800038c:	2e00      	cmp	r6, #0
 800038e:	d0e2      	beq.n	8000356 <__udivmoddi4+0xa2>
 8000390:	e9c6 4700 	strd	r4, r7, [r6]
 8000394:	e7df      	b.n	8000356 <__udivmoddi4+0xa2>
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xe6>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f382 	clz	r3, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x210>
 80003a4:	1a8a      	subs	r2, r1, r2
 80003a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	2101      	movs	r1, #1
 80003b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b4:	fb07 2015 	mls	r0, r7, r5, r2
 80003b8:	0c22      	lsrs	r2, r4, #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb0e f005 	mul.w	r0, lr, r5
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003c6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x122>
 80003d0:	4290      	cmp	r0, r2
 80003d2:	f200 80cb 	bhi.w	800056c <__udivmoddi4+0x2b8>
 80003d6:	4645      	mov	r5, r8
 80003d8:	1a12      	subs	r2, r2, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e0:	fb07 2210 	mls	r2, r7, r0, r2
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	fb0e fe00 	mul.w	lr, lr, r0
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x14e>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f8:	d202      	bcs.n	8000400 <__udivmoddi4+0x14c>
 80003fa:	45a6      	cmp	lr, r4
 80003fc:	f200 80bb 	bhi.w	8000576 <__udivmoddi4+0x2c2>
 8000400:	4610      	mov	r0, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040a:	e79f      	b.n	800034c <__udivmoddi4+0x98>
 800040c:	f1c1 0720 	rsb	r7, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 fc07 	lsr.w	ip, r2, r7
 8000416:	ea4c 0c03 	orr.w	ip, ip, r3
 800041a:	fa05 f401 	lsl.w	r4, r5, r1
 800041e:	fa20 f307 	lsr.w	r3, r0, r7
 8000422:	40fd      	lsrs	r5, r7
 8000424:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fbb5 f8f9 	udiv	r8, r5, r9
 800042e:	fa1f fe8c 	uxth.w	lr, ip
 8000432:	fb09 5518 	mls	r5, r9, r8, r5
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb08 f50e 	mul.w	r5, r8, lr
 8000440:	42a5      	cmp	r5, r4
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	fa00 f001 	lsl.w	r0, r0, r1
 800044a:	d90b      	bls.n	8000464 <__udivmoddi4+0x1b0>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f108 3aff 	add.w	sl, r8, #4294967295
 8000454:	f080 8088 	bcs.w	8000568 <__udivmoddi4+0x2b4>
 8000458:	42a5      	cmp	r5, r4
 800045a:	f240 8085 	bls.w	8000568 <__udivmoddi4+0x2b4>
 800045e:	f1a8 0802 	sub.w	r8, r8, #2
 8000462:	4464      	add	r4, ip
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	b29d      	uxth	r5, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000474:	fb03 fe0e 	mul.w	lr, r3, lr
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1da>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f103 35ff 	add.w	r5, r3, #4294967295
 8000484:	d26c      	bcs.n	8000560 <__udivmoddi4+0x2ac>
 8000486:	45a6      	cmp	lr, r4
 8000488:	d96a      	bls.n	8000560 <__udivmoddi4+0x2ac>
 800048a:	3b02      	subs	r3, #2
 800048c:	4464      	add	r4, ip
 800048e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000492:	fba3 9502 	umull	r9, r5, r3, r2
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	42ac      	cmp	r4, r5
 800049c:	46c8      	mov	r8, r9
 800049e:	46ae      	mov	lr, r5
 80004a0:	d356      	bcc.n	8000550 <__udivmoddi4+0x29c>
 80004a2:	d053      	beq.n	800054c <__udivmoddi4+0x298>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x208>
 80004a6:	ebb0 0208 	subs.w	r2, r0, r8
 80004aa:	eb64 040e 	sbc.w	r4, r4, lr
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40ca      	lsrs	r2, r1
 80004b4:	40cc      	lsrs	r4, r1
 80004b6:	4317      	orrs	r7, r2
 80004b8:	e9c6 7400 	strd	r7, r4, [r6]
 80004bc:	4618      	mov	r0, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c4:	f1c3 0120 	rsb	r1, r3, #32
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	fa20 f201 	lsr.w	r2, r0, r1
 80004d0:	fa25 f101 	lsr.w	r1, r5, r1
 80004d4:	409d      	lsls	r5, r3
 80004d6:	432a      	orrs	r2, r5
 80004d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004dc:	fa1f fe8c 	uxth.w	lr, ip
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1510 	mls	r5, r7, r0, r1
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ee:	fb00 f50e 	mul.w	r5, r0, lr
 80004f2:	428d      	cmp	r5, r1
 80004f4:	fa04 f403 	lsl.w	r4, r4, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x258>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	d22f      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000504:	428d      	cmp	r5, r1
 8000506:	d92d      	bls.n	8000564 <__udivmoddi4+0x2b0>
 8000508:	3802      	subs	r0, #2
 800050a:	4461      	add	r1, ip
 800050c:	1b49      	subs	r1, r1, r5
 800050e:	b292      	uxth	r2, r2
 8000510:	fbb1 f5f7 	udiv	r5, r1, r7
 8000514:	fb07 1115 	mls	r1, r7, r5, r1
 8000518:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800051c:	fb05 f10e 	mul.w	r1, r5, lr
 8000520:	4291      	cmp	r1, r2
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x282>
 8000524:	eb1c 0202 	adds.w	r2, ip, r2
 8000528:	f105 38ff 	add.w	r8, r5, #4294967295
 800052c:	d216      	bcs.n	800055c <__udivmoddi4+0x2a8>
 800052e:	4291      	cmp	r1, r2
 8000530:	d914      	bls.n	800055c <__udivmoddi4+0x2a8>
 8000532:	3d02      	subs	r5, #2
 8000534:	4462      	add	r2, ip
 8000536:	1a52      	subs	r2, r2, r1
 8000538:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800053c:	e738      	b.n	80003b0 <__udivmoddi4+0xfc>
 800053e:	4631      	mov	r1, r6
 8000540:	4630      	mov	r0, r6
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xa2>
 8000544:	4639      	mov	r1, r7
 8000546:	e6e6      	b.n	8000316 <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e6fb      	b.n	8000344 <__udivmoddi4+0x90>
 800054c:	4548      	cmp	r0, r9
 800054e:	d2a9      	bcs.n	80004a4 <__udivmoddi4+0x1f0>
 8000550:	ebb9 0802 	subs.w	r8, r9, r2
 8000554:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000558:	3b01      	subs	r3, #1
 800055a:	e7a3      	b.n	80004a4 <__udivmoddi4+0x1f0>
 800055c:	4645      	mov	r5, r8
 800055e:	e7ea      	b.n	8000536 <__udivmoddi4+0x282>
 8000560:	462b      	mov	r3, r5
 8000562:	e794      	b.n	800048e <__udivmoddi4+0x1da>
 8000564:	4640      	mov	r0, r8
 8000566:	e7d1      	b.n	800050c <__udivmoddi4+0x258>
 8000568:	46d0      	mov	r8, sl
 800056a:	e77b      	b.n	8000464 <__udivmoddi4+0x1b0>
 800056c:	3d02      	subs	r5, #2
 800056e:	4462      	add	r2, ip
 8000570:	e732      	b.n	80003d8 <__udivmoddi4+0x124>
 8000572:	4608      	mov	r0, r1
 8000574:	e70a      	b.n	800038c <__udivmoddi4+0xd8>
 8000576:	4464      	add	r4, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e742      	b.n	8000402 <__udivmoddi4+0x14e>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Gyro_Init>:
/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 8000584:	f000 f80a 	bl	800059c <Gyro_Power_On>
	HAL_Delay(100);
 8000588:	2064      	movs	r0, #100	; 0x64
 800058a:	f001 f825 	bl	80015d8 <HAL_Delay>
	Gyro_Config_Regs();
 800058e:	f000 f8b7 	bl	8000700 <Gyro_Config_Regs>
	Gyro_Reboot();
 8000592:	f000 f847 	bl	8000624 <Gyro_Reboot>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */
void Gyro_Power_On()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 80005a2:	23a0      	movs	r3, #160	; 0xa0
 80005a4:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 80005aa:	f000 f921 	bl	80007f0 <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80005ae:	bf00      	nop
 80005b0:	2102      	movs	r1, #2
 80005b2:	481a      	ldr	r0, [pc, #104]	; (800061c <Gyro_Power_On+0x80>)
 80005b4:	f001 fb24 	bl	8001c00 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1f8      	bne.n	80005b0 <Gyro_Power_On+0x14>

	Gyro_Transmit_Data(&cmd);
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f947 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 80005c6:	1dbb      	adds	r3, r7, #6
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f929 	bl	8000820 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 80005ce:	f000 f91b 	bl	8000808 <Gyro_Slave_Disable>

	cmd = (GYRO_WRITE | CTRL_REG1);
 80005d2:	2320      	movs	r3, #32
 80005d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	717b      	strb	r3, [r7, #5]

	Gyro_Slave_Enable();
 80005e0:	f000 f906 	bl	80007f0 <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80005e4:	bf00      	nop
 80005e6:	2102      	movs	r1, #2
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <Gyro_Power_On+0x80>)
 80005ea:	f001 fb09 	bl	8001c00 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1f8      	bne.n	80005e6 <Gyro_Power_On+0x4a>

	Gyro_Transmit_Data(&cmd);
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f92c 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 80005fc:	1d7b      	adds	r3, r7, #5
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f928 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000604:	f000 f900 	bl	8000808 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <Gyro_Power_On+0x84>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d000      	beq.n	8000612 <Gyro_Power_On+0x76>
	{
		while(1);
 8000610:	e7fe      	b.n	8000610 <Gyro_Power_On+0x74>
	}
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020800 	.word	0x40020800
 8000620:	2000007c 	.word	0x2000007c

08000624 <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */
void Gyro_Reboot()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 800062a:	23a4      	movs	r3, #164	; 0xa4
 800062c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 8000632:	f000 f8dd 	bl	80007f0 <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000636:	bf00      	nop
 8000638:	2102      	movs	r1, #2
 800063a:	4817      	ldr	r0, [pc, #92]	; (8000698 <Gyro_Reboot+0x74>)
 800063c:	f001 fae0 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1f8      	bne.n	8000638 <Gyro_Reboot+0x14>

	Gyro_Transmit_Data(&cmd);
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f903 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 800064e:	1dbb      	adds	r3, r7, #6
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f8e5 	bl	8000820 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8000656:	f000 f8d7 	bl	8000808 <Gyro_Slave_Disable>

	cmd = (GYRO_WRITE | CTRL_REG5);
 800065a:	2324      	movs	r3, #36	; 0x24
 800065c:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000664:	b2db      	uxtb	r3, r3
 8000666:	717b      	strb	r3, [r7, #5]

	Gyro_Slave_Enable();
 8000668:	f000 f8c2 	bl	80007f0 <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800066c:	bf00      	nop
 800066e:	2102      	movs	r1, #2
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <Gyro_Reboot+0x74>)
 8000672:	f001 fac5 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1f8      	bne.n	800066e <Gyro_Reboot+0x4a>

	Gyro_Transmit_Data(&cmd);
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f8e8 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8000684:	1d7b      	adds	r3, r7, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f8e4 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800068c:	f000 f8bc 	bl	8000808 <Gyro_Slave_Disable>

}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40020800 	.word	0x40020800

0800069c <Gyro_Get_Velocity>:
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Velocity()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 80006a6:	23ea      	movs	r3, #234	; 0xea
 80006a8:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 80006b2:	f000 f89d 	bl	80007f0 <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80006b6:	bf00      	nop
 80006b8:	2102      	movs	r1, #2
 80006ba:	4810      	ldr	r0, [pc, #64]	; (80006fc <Gyro_Get_Velocity+0x60>)
 80006bc:	f001 faa0 	bl	8001c00 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1f8      	bne.n	80006b8 <Gyro_Get_Velocity+0x1c>

	Gyro_Transmit_Data(&cmd);
 80006c6:	1d7b      	adds	r3, r7, #5
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f8c3 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f8a5 	bl	8000820 <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 80006d6:	1cfb      	adds	r3, r7, #3
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f8a1 	bl	8000820 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 80006de:	f000 f893 	bl	8000808 <Gyro_Slave_Disable>

	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	793b      	ldrb	r3, [r7, #4]
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	80fb      	strh	r3, [r7, #6]

	return yval;
 80006f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020800 	.word	0x40020800

08000700 <Gyro_Config_Regs>:
/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 8000706:	2320      	movs	r3, #32
 8000708:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1A; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 800070a:	231a      	movs	r3, #26
 800070c:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 800070e:	f000 f86f 	bl	80007f0 <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000712:	bf00      	nop
 8000714:	2102      	movs	r1, #2
 8000716:	482e      	ldr	r0, [pc, #184]	; (80007d0 <Gyro_Config_Regs+0xd0>)
 8000718:	f001 fa72 	bl	8001c00 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f8      	bne.n	8000714 <Gyro_Config_Regs+0x14>

	Gyro_Transmit_Data(&addr_cmd);
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f895 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 800072a:	1dbb      	adds	r3, r7, #6
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f891 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000732:	f000 f869 	bl	8000808 <Gyro_Slave_Disable>

	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 8000736:	2323      	movs	r3, #35	; 0x23
 8000738:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 800073a:	2310      	movs	r3, #16
 800073c:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 800073e:	f000 f857 	bl	80007f0 <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000742:	bf00      	nop
 8000744:	2102      	movs	r1, #2
 8000746:	4822      	ldr	r0, [pc, #136]	; (80007d0 <Gyro_Config_Regs+0xd0>)
 8000748:	f001 fa5a 	bl	8001c00 <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f8      	bne.n	8000744 <Gyro_Config_Regs+0x44>

	Gyro_Transmit_Data(&addr_cmd);
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f87d 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 800075a:	1dbb      	adds	r3, r7, #6
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f879 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000762:	f000 f851 	bl	8000808 <Gyro_Slave_Disable>

	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 8000766:	2324      	movs	r3, #36	; 0x24
 8000768:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 800076a:	23c0      	movs	r3, #192	; 0xc0
 800076c:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 800076e:	f000 f83f 	bl	80007f0 <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000772:	bf00      	nop
 8000774:	2102      	movs	r1, #2
 8000776:	4816      	ldr	r0, [pc, #88]	; (80007d0 <Gyro_Config_Regs+0xd0>)
 8000778:	f001 fa42 	bl	8001c00 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f8      	bne.n	8000774 <Gyro_Config_Regs+0x74>

	Gyro_Transmit_Data(&addr_cmd);
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f865 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 800078a:	1dbb      	adds	r3, r7, #6
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f861 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000792:	f000 f839 	bl	8000808 <Gyro_Slave_Disable>

	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 8000796:	232e      	movs	r3, #46	; 0x2e
 8000798:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 800079a:	2300      	movs	r3, #0
 800079c:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 800079e:	f000 f827 	bl	80007f0 <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80007a2:	bf00      	nop
 80007a4:	2102      	movs	r1, #2
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <Gyro_Config_Regs+0xd0>)
 80007a8:	f001 fa2a 	bl	8001c00 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f8      	bne.n	80007a4 <Gyro_Config_Regs+0xa4>

	Gyro_Transmit_Data(&addr_cmd);
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f84d 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80007ba:	1dbb      	adds	r3, r7, #6
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f849 	bl	8000854 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80007c2:	f000 f821 	bl	8000808 <Gyro_Slave_Disable>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020800 	.word	0x40020800

080007d4 <Gyro_HAL_Check>:
/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check()
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK)
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <Gyro_HAL_Check+0x18>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d000      	beq.n	80007e2 <Gyro_HAL_Check+0xe>
	{
		while(1);
 80007e0:	e7fe      	b.n	80007e0 <Gyro_HAL_Check+0xc>
	}
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	2000007c 	.word	0x2000007c

080007f0 <Gyro_Slave_Enable>:
/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable()
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2102      	movs	r1, #2
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <Gyro_Slave_Enable+0x14>)
 80007fa:	f001 fa19 	bl	8001c30 <HAL_GPIO_WritePin>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40020800 	.word	0x40020800

08000808 <Gyro_Slave_Disable>:
/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2102      	movs	r1, #2
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <Gyro_Slave_Disable+0x14>)
 8000812:	f001 fa0d 	bl	8001c30 <HAL_GPIO_WritePin>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40020800 	.word	0x40020800

08000820 <Gyro_Receive_Data>:
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t* rx_buff)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 8000828:	f644 6320 	movw	r3, #20000	; 0x4e20
 800082c:	2201      	movs	r2, #1
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	4806      	ldr	r0, [pc, #24]	; (800084c <Gyro_Receive_Data+0x2c>)
 8000832:	f002 f840 	bl	80028b6 <HAL_SPI_Receive>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <Gyro_Receive_Data+0x30>)
 800083c:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 800083e:	f7ff ffc9 	bl	80007d4 <Gyro_HAL_Check>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000a4 	.word	0x200000a4
 8000850:	2000007c 	.word	0x2000007c

08000854 <Gyro_Transmit_Data>:
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t* tx_buff)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 800085c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000860:	2201      	movs	r2, #1
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <Gyro_Transmit_Data+0x2c>)
 8000866:	f001 feea 	bl	800263e <HAL_SPI_Transmit>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <Gyro_Transmit_Data+0x30>)
 8000870:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 8000872:	f7ff ffaf 	bl	80007d4 <Gyro_HAL_Check>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000a4 	.word	0x200000a4
 8000884:	2000007c 	.word	0x2000007c

08000888 <appTimerCallback>:
 * 		Function Definitions		*
 ************************************/


static void appTimerCallback(void* arg)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	// Avoids compiler warning for unsed parameter
	(void) &arg;

	// On timer tick, release the semaphore
	osStatus_t semaphoreStatus = osSemaphoreRelease(gyroInputSemaphorID);
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <appTimerCallback+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f003 f891 	bl	80039bc <osSemaphoreRelease>
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3304      	adds	r3, #4

	// Verify that status of the release
	switch(semaphoreStatus)
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d800      	bhi.n	80008a6 <appTimerCallback+0x1e>
	{
		case osErrorResource:
		case osErrorParameter:
			// Spin forever on error
			while(1){}
 80008a4:	e7fe      	b.n	80008a4 <appTimerCallback+0x1c>
			break;
		default: /* osOK */
			// Token has been released and count incremented
			break;
 80008a6:	bf00      	nop
	}
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000008c 	.word	0x2000008c

080008b4 <gyroInput>:
/****************************************
 * 		Function Definitions: Tasks		*
 ****************************************/

static void gyroInput(void* arg)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	osStatus_t gyroMessagePutStatus;

	while(1)
	{
		// Pend on the gyroInputSemaphore
		osStatus_t semaphoreStatus = osSemaphoreAcquire(gyroInputSemaphorID, osWaitForever);
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <gyroInput+0x50>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 f827 	bl	8003918 <osSemaphoreAcquire>
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3304      	adds	r3, #4

		switch(semaphoreStatus)
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d800      	bhi.n	80008d6 <gyroInput+0x22>
			// Possible error codes
			case osErrorTimeout:
			case osErrorResource:
			case osErrorParameter:
				// Spin on error
				while(1){}
 80008d4:	e7fe      	b.n	80008d4 <gyroInput+0x20>
				break;
			default: /* osOK */
				// The token has been obtained and token count decremented
				break;
 80008d6:	bf00      	nop
		}

		appMessage.rotation = getGyroRateOfRotation();
 80008d8:	f000 f902 	bl	8000ae0 <getGyroRateOfRotation>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <gyroInput+0x54>)
 80008e2:	805a      	strh	r2, [r3, #2]

		gyroMessagePutStatus = osMessageQueuePut(ledInfoMsgQueueID, &appMessage,
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <gyroInput+0x58>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2200      	movs	r2, #0
 80008ee:	4906      	ldr	r1, [pc, #24]	; (8000908 <gyroInput+0x54>)
 80008f0:	f003 f91c 	bl	8003b2c <osMessageQueuePut>
 80008f4:	60b8      	str	r0, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	3304      	adds	r3, #4
						  	  	  	  	  	  	 DEFAULT_MSG_PRIORITY, osWaitForever);

		switch(gyroMessagePutStatus)
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d800      	bhi.n	8000900 <gyroInput+0x4c>
			// Possible error codes
			case osErrorTimeout:
			case osErrorResource:
			case osErrorParameter:
				// Spin on error
				while(1){}
 80008fe:	e7fe      	b.n	80008fe <gyroInput+0x4a>
				break;
			default: /* osOK */
				// The token has been obtained and token count decremented
				break;
 8000900:	bf00      	nop
	{
 8000902:	e7db      	b.n	80008bc <gyroInput+0x8>
 8000904:	2000008c 	.word	0x2000008c
 8000908:	20000080 	.word	0x20000080
 800090c:	20000094 	.word	0x20000094

08000910 <buttonInput>:
	}
}


static void buttonInput(void* arg)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]


	while(1)
	{
		// Wait for the button event flag to be set
		uint32_t flags = osEventFlagsWait(buttonEventFlagID, BUTTON_EVENT_FLAG,
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <buttonInput+0x4c>)
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	2201      	movs	r2, #1
 8000922:	2101      	movs	r1, #1
 8000924:	f002 ff08 	bl	8003738 <osEventFlagsWait>
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	3304      	adds	r3, #4
										  osFlagsWaitAll, osWaitForever);

		// Verify that the flags set aren't errors
		switch(flags)
 800092e:	2b03      	cmp	r3, #3
 8000930:	d800      	bhi.n	8000934 <buttonInput+0x24>
			case osFlagsErrorUnknown:
			case osFlagsErrorTimeout:
			case osFlagsErrorResource:
			case osFlagsErrorParameter:
				// Spin on error
				while(1){}
 8000932:	e7fe      	b.n	8000932 <buttonInput+0x22>
				break;
			default: /* Event flag set: 0x01 */
				break;
 8000934:	bf00      	nop
		}


		// Sample the user button
		// NOTE: Updates the message queue with the button state
		sampleUserButton();
 8000936:	f000 f8c3 	bl	8000ac0 <sampleUserButton>

		// Put the message into the queue
		buttonMessagePutStatus = osMessageQueuePut(ledInfoMsgQueueID, &appMessage, DEFAULT_MSG_PRIORITY, osWaitForever);
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <buttonInput+0x50>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	2200      	movs	r2, #0
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <buttonInput+0x54>)
 8000946:	f003 f8f1 	bl	8003b2c <osMessageQueuePut>
 800094a:	60b8      	str	r0, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	3304      	adds	r3, #4

		switch(buttonMessagePutStatus)
 8000950:	2b02      	cmp	r3, #2
 8000952:	d800      	bhi.n	8000956 <buttonInput+0x46>
			// Possible error codes
			case osErrorTimeout:
			case osErrorResource:
			case osErrorParameter:
				// Spin on error
				while(1){}
 8000954:	e7fe      	b.n	8000954 <buttonInput+0x44>
				break;
			default: /* osOK */
				// The token has been obtained and token count decremented
				break;
 8000956:	bf00      	nop
	{
 8000958:	e7de      	b.n	8000918 <buttonInput+0x8>
 800095a:	bf00      	nop
 800095c:	20000090 	.word	0x20000090
 8000960:	20000094 	.word	0x20000094
 8000964:	20000080 	.word	0x20000080

08000968 <ledOutput>:
	}
}


static void ledOutput(void* arg)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	//

	while(1)
	{
		// Get the next message from the message queue
		messageStatus = osMessageQueueGet(ledInfoMsgQueueID, &ledOutputMessage,
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <ledOutput+0x30>)
 8000972:	6818      	ldr	r0, [r3, #0]
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	2200      	movs	r2, #0
 800097e:	f003 f935 	bl	8003bec <osMessageQueueGet>
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3304      	adds	r3, #4
						  NULL, osWaitForever);

		// Verify that the message was retrieved sucessfully
		switch(messageStatus)
 8000988:	2b02      	cmp	r3, #2
 800098a:	d800      	bhi.n	800098e <ledOutput+0x26>
		{
			case osErrorTimeout:
			case osErrorResource:
			case osErrorParameter:
				// Spin on error
				while(1){}
 800098c:	e7fe      	b.n	800098c <ledOutput+0x24>
				break;
			default: /* osOK */
				driveLEDs(ledOutputMessage);
 800098e:	68b8      	ldr	r0, [r7, #8]
 8000990:	f000 f8dc 	bl	8000b4c <driveLEDs>
				break;
 8000994:	bf00      	nop
		messageStatus = osMessageQueueGet(ledInfoMsgQueueID, &ledOutputMessage,
 8000996:	e7eb      	b.n	8000970 <ledOutput+0x8>
 8000998:	20000094 	.word	0x20000094

0800099c <appInit>:
/*
 *
 *
 */
void appInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	// Create a nw timer
	appTimerID = osTimerNew(appTimerCallback, osTimerPeriodic, NULL, &appTimerAttr);
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <appInit+0xd8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	2101      	movs	r1, #1
 80009a6:	4834      	ldr	r0, [pc, #208]	; (8000a78 <appInit+0xdc>)
 80009a8:	f002 fd98 	bl	80034dc <osTimerNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <appInit+0xe0>)
 80009b0:	6013      	str	r3, [r2, #0]


	// Verify that the timer was created properly
	if(appTimerID == NULL)
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <appInit+0xe0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d100      	bne.n	80009bc <appInit+0x20>
	{
		while(1){}
 80009ba:	e7fe      	b.n	80009ba <appInit+0x1e>
	}

	// Start the OS Timer
	appTimerStatus = osTimerStart(appTimerID, APP_TIMER_TICKS_100MS);
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <appInit+0xe0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2164      	movs	r1, #100	; 0x64
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 fe06 	bl	80035d4 <osTimerStart>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <appInit+0xe4>)
 80009cc:	6013      	str	r3, [r2, #0]

	if(appTimerStatus != osOK)
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <appInit+0xe4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d000      	beq.n	80009d8 <appInit+0x3c>
	{
		while(1){}
 80009d6:	e7fe      	b.n	80009d6 <appInit+0x3a>
	}

	// Create a new semaphore
	gyroInputSemaphorID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ONE_INIT_TOKEN, &gyroInputSemaphorAttr);
 80009d8:	4a2a      	ldr	r2, [pc, #168]	; (8000a84 <appInit+0xe8>)
 80009da:	2101      	movs	r1, #1
 80009dc:	2001      	movs	r0, #1
 80009de:	f002 ff11 	bl	8003804 <osSemaphoreNew>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a28      	ldr	r2, [pc, #160]	; (8000a88 <appInit+0xec>)
 80009e6:	6013      	str	r3, [r2, #0]

	// Verify that the semaphore was created properly
	if(gyroInputSemaphorID == NULL)
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <appInit+0xec>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d100      	bne.n	80009f2 <appInit+0x56>
	{
		while(1){}
 80009f0:	e7fe      	b.n	80009f0 <appInit+0x54>
	}

	buttonEventFlagID = osEventFlagsNew(&buttonEventFlagAttr);
 80009f2:	4826      	ldr	r0, [pc, #152]	; (8000a8c <appInit+0xf0>)
 80009f4:	f002 fe1c 	bl	8003630 <osEventFlagsNew>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <appInit+0xf4>)
 80009fc:	6013      	str	r3, [r2, #0]

	if(buttonEventFlagID == NULL)
 80009fe:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <appInit+0xf4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d100      	bne.n	8000a08 <appInit+0x6c>
	{
		while(1){}
 8000a06:	e7fe      	b.n	8000a06 <appInit+0x6a>
	}

	ledInfoMsgQueueID = osMessageQueueNew(MAX_MSG_COUNT, MAX_MSG_SIZE_BYTE, &ledInfoMsgQueueAttr);
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <appInit+0xf8>)
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	2008      	movs	r0, #8
 8000a0e:	f003 f819 	bl	8003a44 <osMessageQueueNew>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <appInit+0xfc>)
 8000a16:	6013      	str	r3, [r2, #0]

	if(ledInfoMsgQueueID == NULL)
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <appInit+0xfc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d100      	bne.n	8000a22 <appInit+0x86>
	{
		while(1){}
 8000a20:	e7fe      	b.n	8000a20 <appInit+0x84>
	}

	gyroInputTask = osThreadNew(gyroInput, NULL, &gyroInputTaskAttr);
 8000a22:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <appInit+0x100>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	481e      	ldr	r0, [pc, #120]	; (8000aa0 <appInit+0x104>)
 8000a28:	f002 fc96 	bl	8003358 <osThreadNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <appInit+0x108>)
 8000a30:	6013      	str	r3, [r2, #0]

	if(gyroInputTask == NULL)
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <appInit+0x108>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d100      	bne.n	8000a3c <appInit+0xa0>
	{
		while(1){}
 8000a3a:	e7fe      	b.n	8000a3a <appInit+0x9e>
	}

	buttonInputTask = osThreadNew(buttonInput, NULL, &buttonInputTaskAttr);
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <appInit+0x10c>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	481a      	ldr	r0, [pc, #104]	; (8000aac <appInit+0x110>)
 8000a42:	f002 fc89 	bl	8003358 <osThreadNew>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <appInit+0x114>)
 8000a4a:	6013      	str	r3, [r2, #0]


	if(buttonInputTask == NULL)
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <appInit+0x114>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d100      	bne.n	8000a56 <appInit+0xba>
	{
		while(1){}
 8000a54:	e7fe      	b.n	8000a54 <appInit+0xb8>
	}


	ledOutputTask = osThreadNew(ledOutput, NULL, &ledOutputTaskAttr);
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <appInit+0x118>)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4817      	ldr	r0, [pc, #92]	; (8000ab8 <appInit+0x11c>)
 8000a5c:	f002 fc7c 	bl	8003358 <osThreadNew>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a16      	ldr	r2, [pc, #88]	; (8000abc <appInit+0x120>)
 8000a64:	6013      	str	r3, [r2, #0]

	if(ledOutputTask == NULL)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <appInit+0x120>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d100      	bne.n	8000a70 <appInit+0xd4>
	{
		while(1){}
 8000a6e:	e7fe      	b.n	8000a6e <appInit+0xd2>
	}
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08009540 	.word	0x08009540
 8000a78:	08000889 	.word	0x08000889
 8000a7c:	20000084 	.word	0x20000084
 8000a80:	20000088 	.word	0x20000088
 8000a84:	08009550 	.word	0x08009550
 8000a88:	2000008c 	.word	0x2000008c
 8000a8c:	08009560 	.word	0x08009560
 8000a90:	20000090 	.word	0x20000090
 8000a94:	08009570 	.word	0x08009570
 8000a98:	20000094 	.word	0x20000094
 8000a9c:	08009588 	.word	0x08009588
 8000aa0:	080008b5 	.word	0x080008b5
 8000aa4:	20000098 	.word	0x20000098
 8000aa8:	080095ac 	.word	0x080095ac
 8000aac:	08000911 	.word	0x08000911
 8000ab0:	2000009c 	.word	0x2000009c
 8000ab4:	080095d0 	.word	0x080095d0
 8000ab8:	08000969 	.word	0x08000969
 8000abc:	200000a0 	.word	0x200000a0

08000ac0 <sampleUserButton>:
/*
 *  @brief Sample User Button
 *  @retval none
 */
void sampleUserButton(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	// Sample current button state
	appMessage.buttonState = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <sampleUserButton+0x18>)
 8000ac8:	f001 f89a 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <sampleUserButton+0x1c>)
 8000ad2:	701a      	strb	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	20000080 	.word	0x20000080

08000ae0 <getGyroRateOfRotation>:
/*
 *  @brief Get Gyro Rate of Rotation
 *  @retval gyroRate
 * */
static gyroRotationRate getGyroRateOfRotation(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	// Variable to store and return the gyro rotation rate
	gyroRotationRate gyroRate;

	// Get the gyro velocity
	int16_t rawVelocity = Gyro_Get_Velocity();
 8000ae6:	f7ff fdd9 	bl	800069c <Gyro_Get_Velocity>
 8000aea:	4603      	mov	r3, r0
 8000aec:	80bb      	strh	r3, [r7, #4]
	// 		velocity <= -15000 			= counterClockwiseFast
	//		-15000 < velocity <= -2000 	= counterClockwiseSlow
	//		-2000 < velocity < 2000		= nearlyZero (treated as clockwise)
	//		150 <= velocity < 15000		= clockwiseSlow
	//		velocity >= 15000			= clockwiseFast
	if(rawVelocity <= counterClockwiseFast)
 8000aee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <getGyroRateOfRotation+0x68>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	da03      	bge.n	8000b00 <getGyroRateOfRotation+0x20>
	{
		gyroRate = counterClockwiseFast;
 8000af8:	f24c 5368 	movw	r3, #50536	; 0xc568
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	e01d      	b.n	8000b3c <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity <= counterClockwiseSlow)
 8000b00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b04:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8000b08:	dc03      	bgt.n	8000b12 <getGyroRateOfRotation+0x32>
	{
		gyroRate = counterClockwiseSlow;
 8000b0a:	f64f 0330 	movw	r3, #63536	; 0xf830
 8000b0e:	80fb      	strh	r3, [r7, #6]
 8000b10:	e014      	b.n	8000b3c <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity < clockwiseSlow)
 8000b12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b16:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b1a:	da02      	bge.n	8000b22 <getGyroRateOfRotation+0x42>
	{
		gyroRate = nearlyZero;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	80fb      	strh	r3, [r7, #6]
 8000b20:	e00c      	b.n	8000b3c <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity < clockwiseFast)
 8000b22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b26:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	dc03      	bgt.n	8000b36 <getGyroRateOfRotation+0x56>
	{
		gyroRate = clockwiseSlow;
 8000b2e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	e002      	b.n	8000b3c <getGyroRateOfRotation+0x5c>
	}
	else // rawVelocity > clockwiseFast
	{
		gyroRate = clockwiseFast;
 8000b36:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000b3a:	80fb      	strh	r3, [r7, #6]
	}

	return gyroRate;
 8000b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	ffffc569 	.word	0xffffc569

08000b4c <driveLEDs>:
/*
 * @brief	Drive the User LEDs based on button and gyro inputs
 * @retval	None
 */
void driveLEDs(struct Message_t msg)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	// Drive green LED if button is pressed or gyro is rotating counter-clockwise
	if((msg.buttonState == GPIO_PIN_SET) || (msg.rotation <= counterClockwiseSlow))
 8000b54:	793b      	ldrb	r3, [r7, #4]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d004      	beq.n	8000b64 <driveLEDs+0x18>
 8000b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b5e:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8000b62:	dc06      	bgt.n	8000b72 <driveLEDs+0x26>
	{
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <driveLEDs+0x68>)
 8000b6c:	f001 f860 	bl	8001c30 <HAL_GPIO_WritePin>
 8000b70:	e005      	b.n	8000b7e <driveLEDs+0x32>
	}
	// ... Otherwise turn off green LED
	else
	{
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b78:	480e      	ldr	r0, [pc, #56]	; (8000bb4 <driveLEDs+0x68>)
 8000b7a:	f001 f859 	bl	8001c30 <HAL_GPIO_WritePin>
	}

	// Drive red LED if button is pressed and gyro is rotating clockwise
	if((msg.buttonState == GPIO_PIN_SET) && (msg.rotation > counterClockwiseSlow))
 8000b7e:	793b      	ldrb	r3, [r7, #4]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d10b      	bne.n	8000b9c <driveLEDs+0x50>
 8000b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b88:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8000b8c:	dd06      	ble.n	8000b9c <driveLEDs+0x50>
	{
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <driveLEDs+0x68>)
 8000b96:	f001 f84b 	bl	8001c30 <HAL_GPIO_WritePin>
 8000b9a:	e006      	b.n	8000baa <driveLEDs+0x5e>
	}
	// ... Otherwise turn off red LED
	else
	{
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <driveLEDs+0x68>)
 8000ba4:	f001 f844 	bl	8001c30 <HAL_GPIO_WritePin>
	}
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021800 	.word	0x40021800

08000bb8 <EXTI0_IRQHandler>:
/*
 * @brief User Button (GPIO) ISR which samples and set the buttonState variable
 * @retval none
 */
void EXTI0_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	// Disable interrupts
	HAL_NVIC_DisableIRQ(BUTTON_IRQn);
 8000bbc:	2006      	movs	r0, #6
 8000bbe:	f000 fe58 	bl	8001872 <HAL_NVIC_DisableIRQ>

	// Set the button event flag
	osEventFlagsSet(buttonEventFlagID, BUTTON_EVENT_FLAG);
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <EXTI0_IRQHandler+0x28>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 fd71 	bl	80036b0 <osEventFlagsSet>

	// Clear interuppt flag
	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_PIN);
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <EXTI0_IRQHandler+0x2c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	615a      	str	r2, [r3, #20]

	// Re-enable interrupts
	HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	f000 fe3e 	bl	8001856 <HAL_NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000090 	.word	0x20000090
 8000be4:	40013c00 	.word	0x40013c00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c40:	f000 fc58 	bl	80014f4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000c44:	f000 f826 	bl	8000c94 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c48:	f000 f8e8 	bl	8000e1c <MX_GPIO_Init>
	MX_SPI5_Init();
 8000c4c:	f000 f88e 	bl	8000d6c <MX_SPI5_Init>
	MX_TIM11_Init();
 8000c50:	f000 f8c2 	bl	8000dd8 <MX_TIM11_Init>

	/* Initialize the gyro */
	Gyro_Init();
 8000c54:	f7ff fc94 	bl	8000580 <Gyro_Init>

	// Enable interrupts for the USER button
	HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 8000c58:	2006      	movs	r0, #6
 8000c5a:	f000 fdfc 	bl	8001856 <HAL_NVIC_EnableIRQ>
	NVIC_SetPriority(BUTTON_IRQn, 13);
 8000c5e:	210d      	movs	r1, #13
 8000c60:	2006      	movs	r0, #6
 8000c62:	f7ff ffc1 	bl	8000be8 <__NVIC_SetPriority>

	/* Init scheduler */
	osKernelInitialize();
 8000c66:	f002 fb2d 	bl	80032c4 <osKernelInitialize>

	/* Initialize the application */
	appInit();
 8000c6a:	f7ff fe97 	bl	800099c <appInit>

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c6e:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <main+0x4c>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <main+0x50>)
 8000c74:	f002 fb70 	bl	8003358 <osThreadNew>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <main+0x54>)
 8000c7c:	6013      	str	r3, [r2, #0]

	traceSTART();
 8000c7e:	f008 f973 	bl	8008f68 <SEGGER_SYSVIEW_Conf>

	/* Start scheduler */
	osKernelStart();
 8000c82:	f002 fb43 	bl	800330c <osKernelStart>


	while(1)
 8000c86:	e7fe      	b.n	8000c86 <main+0x4a>
 8000c88:	080095f4 	.word	0x080095f4
 8000c8c:	080012ed 	.word	0x080012ed
 8000c90:	20000144 	.word	0x20000144

08000c94 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	; 0x50
 8000c98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2230      	movs	r2, #48	; 0x30
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f008 fab3 	bl	800920e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <SystemClock_Config+0xd0>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <SystemClock_Config+0xd0>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <SystemClock_Config+0xd0>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <SystemClock_Config+0xd4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <SystemClock_Config+0xd4>)
 8000ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <SystemClock_Config+0xd4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d00:	2302      	movs	r3, #2
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000d0c:	2332      	movs	r3, #50	; 0x32
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d10:	2304      	movs	r3, #4
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d14:	2307      	movs	r3, #7
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 ffa1 	bl	8001c64 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000d28:	f000 fae8 	bl	80012fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000d38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d3c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000d3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d42:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fa02 	bl	8002154 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000d56:	f000 fad1 	bl	80012fc <Error_Handler>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	3750      	adds	r7, #80	; 0x50
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40007000 	.word	0x40007000

08000d6c <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <MX_SPI5_Init+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d7c:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9c:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 10;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000db8:	220a      	movs	r2, #10
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_SPI5_Init+0x64>)
 8000dbe:	f001 fbb5 	bl	800252c <HAL_SPI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_SPI5_Init+0x60>
	{
		Error_Handler();
 8000dc8:	f000 fa98 	bl	80012fc <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000a4 	.word	0x200000a4
 8000dd4:	40015000 	.word	0x40015000

08000dd8 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MX_TIM11_Init+0x3c>)
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <MX_TIM11_Init+0x40>)
 8000de0:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_TIM11_Init+0x3c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <MX_TIM11_Init+0x3c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 124;
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_TIM11_Init+0x3c>)
 8000df0:	227c      	movs	r2, #124	; 0x7c
 8000df2:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <MX_TIM11_Init+0x3c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_TIM11_Init+0x3c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_TIM11_Init+0x3c>)
 8000e02:	f002 f93b 	bl	800307c <HAL_TIM_Base_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM11_Init+0x38>
	{
		Error_Handler();
 8000e0c:	f000 fa76 	bl	80012fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000fc 	.word	0x200000fc
 8000e18:	40014800 	.word	0x40014800

08000e1c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
 8000e36:	4bb2      	ldr	r3, [pc, #712]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4ab1      	ldr	r2, [pc, #708]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4baf      	ldr	r3, [pc, #700]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	623b      	str	r3, [r7, #32]
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	4bab      	ldr	r3, [pc, #684]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4aaa      	ldr	r2, [pc, #680]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4ba8      	ldr	r3, [pc, #672]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0320 	and.w	r3, r3, #32
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	4ba4      	ldr	r3, [pc, #656]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4aa3      	ldr	r2, [pc, #652]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4ba1      	ldr	r3, [pc, #644]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	4b9d      	ldr	r3, [pc, #628]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a9c      	ldr	r2, [pc, #624]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b9a      	ldr	r3, [pc, #616]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b96      	ldr	r3, [pc, #600]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a95      	ldr	r2, [pc, #596]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b93      	ldr	r3, [pc, #588]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b8f      	ldr	r3, [pc, #572]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a8e      	ldr	r2, [pc, #568]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b8c      	ldr	r3, [pc, #560]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b88      	ldr	r3, [pc, #544]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a87      	ldr	r2, [pc, #540]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000ee4:	f043 0310 	orr.w	r3, r3, #16
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b85      	ldr	r3, [pc, #532]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0310 	and.w	r3, r3, #16
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b81      	ldr	r3, [pc, #516]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a80      	ldr	r2, [pc, #512]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b7e      	ldr	r3, [pc, #504]	; (8001100 <MX_GPIO_Init+0x2e4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2116      	movs	r1, #22
 8000f16:	487b      	ldr	r0, [pc, #492]	; (8001104 <MX_GPIO_Init+0x2e8>)
 8000f18:	f000 fe8a 	bl	8001c30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	4879      	ldr	r0, [pc, #484]	; (8001108 <MX_GPIO_Init+0x2ec>)
 8000f22:	f000 fe85 	bl	8001c30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f2c:	4877      	ldr	r0, [pc, #476]	; (800110c <MX_GPIO_Init+0x2f0>)
 8000f2e:	f000 fe7f 	bl	8001c30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f38:	4875      	ldr	r0, [pc, #468]	; (8001110 <MX_GPIO_Init+0x2f4>)
 8000f3a:	f000 fe79 	bl	8001c30 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000f3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
			|A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
			|A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f50:	230c      	movs	r3, #12
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	486e      	ldr	r0, [pc, #440]	; (8001114 <MX_GPIO_Init+0x2f8>)
 8000f5c:	f000 fca4 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f72:	230e      	movs	r3, #14
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4865      	ldr	r0, [pc, #404]	; (8001114 <MX_GPIO_Init+0x2f8>)
 8000f7e:	f000 fc93 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8000f82:	2301      	movs	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f92:	230c      	movs	r3, #12
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4859      	ldr	r0, [pc, #356]	; (8001104 <MX_GPIO_Init+0x2e8>)
 8000f9e:	f000 fc83 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000fa2:	2316      	movs	r3, #22
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4852      	ldr	r0, [pc, #328]	; (8001104 <MX_GPIO_Init+0x2e8>)
 8000fba:	f000 fc75 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fc2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	484d      	ldr	r0, [pc, #308]	; (8001108 <MX_GPIO_Init+0x2ec>)
 8000fd4:	f000 fc68 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000fd8:	f248 0306 	movw	r3, #32774	; 0x8006
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fde:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	4846      	ldr	r0, [pc, #280]	; (8001108 <MX_GPIO_Init+0x2ec>)
 8000ff0:	f000 fc5a 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
	GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000ff4:	f641 0358 	movw	r3, #6232	; 0x1858
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
			|R5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001006:	230e      	movs	r3, #14
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	483d      	ldr	r0, [pc, #244]	; (8001108 <MX_GPIO_Init+0x2ec>)
 8001012:	f000 fc49 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4836      	ldr	r0, [pc, #216]	; (8001108 <MX_GPIO_Init+0x2ec>)
 800102e:	f000 fc3b 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001032:	2320      	movs	r3, #32
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001036:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	482f      	ldr	r0, [pc, #188]	; (8001104 <MX_GPIO_Init+0x2e8>)
 8001048:	f000 fc2e 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : R3_Pin R6_Pin */
	GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800104c:	2303      	movs	r3, #3
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800105c:	2309      	movs	r3, #9
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	482c      	ldr	r0, [pc, #176]	; (8001118 <MX_GPIO_Init+0x2fc>)
 8001068:	f000 fc1e 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 800106c:	2304      	movs	r3, #4
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4826      	ldr	r0, [pc, #152]	; (8001118 <MX_GPIO_Init+0x2fc>)
 8001080:	f000 fc12 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001084:	f248 1333 	movw	r3, #33075	; 0x8133
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
			|SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001096:	230c      	movs	r3, #12
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	481b      	ldr	r0, [pc, #108]	; (8001110 <MX_GPIO_Init+0x2f4>)
 80010a2:	f000 fc01 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010a6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
			|D8_Pin|D9_Pin|D10_Pin|D11_Pin
			|D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010b8:	230c      	movs	r3, #12
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4816      	ldr	r0, [pc, #88]	; (800111c <MX_GPIO_Init+0x300>)
 80010c4:	f000 fbf0 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
	GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010da:	230e      	movs	r3, #14
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_GPIO_Init+0x2fc>)
 80010e6:	f000 fbdf 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80010ea:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
 80010fc:	e010      	b.n	8001120 <MX_GPIO_Init+0x304>
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40020800 	.word	0x40020800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40021800 	.word	0x40021800
 8001114:	40021400 	.word	0x40021400
 8001118:	40020400 	.word	0x40020400
 800111c:	40021000 	.word	0x40021000
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001120:	230c      	movs	r3, #12
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	486b      	ldr	r0, [pc, #428]	; (80012d8 <MX_GPIO_Init+0x4bc>)
 800112c:	f000 fbbc 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	4864      	ldr	r0, [pc, #400]	; (80012d8 <MX_GPIO_Init+0x4bc>)
 8001146:	f000 fbaf 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800114a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
			|D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800115c:	230c      	movs	r3, #12
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	485d      	ldr	r0, [pc, #372]	; (80012dc <MX_GPIO_Init+0x4c0>)
 8001168:	f000 fb9e 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 800116c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	4856      	ldr	r0, [pc, #344]	; (80012dc <MX_GPIO_Init+0x4c0>)
 8001182:	f000 fb91 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001186:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	484f      	ldr	r0, [pc, #316]	; (80012dc <MX_GPIO_Init+0x4c0>)
 80011a0:	f000 fb82 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
	GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011a4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b6:	230e      	movs	r3, #14
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4847      	ldr	r0, [pc, #284]	; (80012e0 <MX_GPIO_Init+0x4c4>)
 80011c2:	f000 fb71 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
	GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80011c6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d8:	230e      	movs	r3, #14
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	4840      	ldr	r0, [pc, #256]	; (80012e4 <MX_GPIO_Init+0x4c8>)
 80011e4:	f000 fb60 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SDA_Pin */
	GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80011e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ee:	2312      	movs	r3, #18
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011fa:	2304      	movs	r3, #4
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	4837      	ldr	r0, [pc, #220]	; (80012e4 <MX_GPIO_Init+0x4c8>)
 8001206:	f000 fb4f 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SCL_Pin */
	GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800120a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800121c:	2304      	movs	r3, #4
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	4830      	ldr	r0, [pc, #192]	; (80012e8 <MX_GPIO_Init+0x4cc>)
 8001228:	f000 fb3e 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800122c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800123e:	2307      	movs	r3, #7
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	4827      	ldr	r0, [pc, #156]	; (80012e8 <MX_GPIO_Init+0x4cc>)
 800124a:	f000 fb2d 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : G7_Pin B2_Pin */
	GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800124e:	2348      	movs	r3, #72	; 0x48
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800125e:	230e      	movs	r3, #14
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	481c      	ldr	r0, [pc, #112]	; (80012dc <MX_GPIO_Init+0x4c0>)
 800126a:	f000 fb1d 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : G3_Pin B4_Pin */
	GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800126e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001280:	2309      	movs	r3, #9
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	4815      	ldr	r0, [pc, #84]	; (80012e0 <MX_GPIO_Init+0x4c4>)
 800128c:	f000 fb0c 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001290:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	4619      	mov	r1, r3
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_GPIO_Init+0x4c4>)
 80012aa:	f000 fafd 	bl	80018a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80012ae:	2360      	movs	r3, #96	; 0x60
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012be:	230c      	movs	r3, #12
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <MX_GPIO_Init+0x4bc>)
 80012ca:	f000 faed 	bl	80018a8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80012ce:	bf00      	nop
 80012d0:	3738      	adds	r7, #56	; 0x38
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020000 	.word	0x40020000

080012ec <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f002 f8c1 	bl	800347c <osDelay>
 80012fa:	e7fb      	b.n	80012f4 <StartDefaultTask+0x8>

080012fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001304:	e7fe      	b.n	8001304 <Error_Handler+0x8>
	...

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_MspInit+0x54>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <HAL_MspInit+0x54>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_MspInit+0x54>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_MspInit+0x54>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_MspInit+0x54>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_MspInit+0x54>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	210f      	movs	r1, #15
 800134a:	f06f 0001 	mvn.w	r0, #1
 800134e:	f000 fa66 	bl	800181e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_SPI_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12c      	bne.n	80013dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_SPI_MspInit+0x88>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_SPI_MspInit+0x88>)
 800138c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_SPI_MspInit+0x88>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_SPI_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_SPI_MspInit+0x88>)
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_SPI_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80013ba:	f44f 7360 	mov.w	r3, #896	; 0x380
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013cc:	2305      	movs	r3, #5
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_SPI_MspInit+0x8c>)
 80013d8:	f000 fa66 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40015000 	.word	0x40015000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40021400 	.word	0x40021400

080013f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_TIM_Base_MspInit+0x3c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d10d      	bne.n	800141e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_TIM_Base_MspInit+0x40>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_TIM_Base_MspInit+0x40>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <HAL_TIM_Base_MspInit+0x40>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40014800 	.word	0x40014800
 8001430:	40023800 	.word	0x40023800

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <NMI_Handler+0x4>

0800143a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <MemManage_Handler+0x4>

08001446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <UsageFault_Handler+0x4>

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 f898 	bl	8001598 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001468:	f004 ff70 	bl	800634c <xTaskGetSchedulerState>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	d001      	beq.n	8001476 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001472:	f005 ff61 	bl	8007338 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ca:	f7ff ffd7 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f007 fefd 	bl	80092cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fbb3 	bl	8000c3c <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014e4:	0800964c 	.word	0x0800964c
  ldr r2, =_sbss
 80014e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014ec:	200056f0 	.word	0x200056f0

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_Init+0x40>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_Init+0x40>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x40>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f973 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	200f      	movs	r0, #15
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff feee 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f999 	bl	800188e <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f953 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000000 	.word	0x20000000
 8001590:	20000008 	.word	0x20000008
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000148 	.word	0x20000148

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000148 	.word	0x20000148

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <__NVIC_SetPriorityGrouping>:
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_DisableIRQ>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db12      	blt.n	80016f8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	490a      	ldr	r1, [pc, #40]	; (8001704 <__NVIC_DisableIRQ+0x44>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	3320      	adds	r3, #32
 80016e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016ec:	f3bf 8f4f 	dsb	sy
}
 80016f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016f2:	f3bf 8f6f 	isb	sy
}
 80016f6:	bf00      	nop
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff05 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff1a 	bl	8001668 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff0d 	bl	8001684 <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff1d 	bl	80016c0 <__NVIC_DisableIRQ>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ff94 	bl	80017c4 <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	e177      	b.n	8001bb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f040 8166 	bne.w	8001bae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d005      	beq.n	80018fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d130      	bne.n	800195c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2203      	movs	r2, #3
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 0201 	and.w	r2, r3, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b03      	cmp	r3, #3
 8001966:	d017      	beq.n	8001998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d123      	bne.n	80019ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	69b9      	ldr	r1, [r7, #24]
 80019e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0203 	and.w	r2, r3, #3
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80c0 	beq.w	8001bae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <HAL_GPIO_Init+0x324>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_GPIO_Init+0x324>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_GPIO_Init+0x324>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4a:	4a61      	ldr	r2, [pc, #388]	; (8001bd0 <HAL_GPIO_Init+0x328>)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <HAL_GPIO_Init+0x32c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d037      	beq.n	8001ae6 <HAL_GPIO_Init+0x23e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_GPIO_Init+0x330>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d031      	beq.n	8001ae2 <HAL_GPIO_Init+0x23a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a56      	ldr	r2, [pc, #344]	; (8001bdc <HAL_GPIO_Init+0x334>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x236>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a55      	ldr	r2, [pc, #340]	; (8001be0 <HAL_GPIO_Init+0x338>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d025      	beq.n	8001ada <HAL_GPIO_Init+0x232>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a54      	ldr	r2, [pc, #336]	; (8001be4 <HAL_GPIO_Init+0x33c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01f      	beq.n	8001ad6 <HAL_GPIO_Init+0x22e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a53      	ldr	r2, [pc, #332]	; (8001be8 <HAL_GPIO_Init+0x340>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x22a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_GPIO_Init+0x344>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x226>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <HAL_GPIO_Init+0x348>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x222>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a50      	ldr	r2, [pc, #320]	; (8001bf4 <HAL_GPIO_Init+0x34c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x21e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x21a>
 8001abe:	2309      	movs	r3, #9
 8001ac0:	e012      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	e010      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	e00e      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e00c      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ace:	2306      	movs	r3, #6
 8001ad0:	e00a      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af8:	4935      	ldr	r1, [pc, #212]	; (8001bd0 <HAL_GPIO_Init+0x328>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2a:	4a34      	ldr	r2, [pc, #208]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f ae84 	bls.w	80018c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40021400 	.word	0x40021400
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40021c00 	.word	0x40021c00
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40022400 	.word	0x40022400
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e267      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d075      	beq.n	8001d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c82:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8e:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d112      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9a:	4b82      	ldr	r3, [pc, #520]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	4b7e      	ldr	r3, [pc, #504]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d05b      	beq.n	8001d6c <HAL_RCC_OscConfig+0x108>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d157      	bne.n	8001d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e242      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x74>
 8001cca:	4b76      	ldr	r3, [pc, #472]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a75      	ldr	r2, [pc, #468]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x98>
 8001ce2:	4b70      	ldr	r3, [pc, #448]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6f      	ldr	r2, [pc, #444]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b6d      	ldr	r3, [pc, #436]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6c      	ldr	r2, [pc, #432]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cfc:	4b69      	ldr	r3, [pc, #420]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a68      	ldr	r2, [pc, #416]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b66      	ldr	r3, [pc, #408]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fc50 	bl	80015c0 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fc4c 	bl	80015c0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e207      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b5b      	ldr	r3, [pc, #364]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xc0>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fc3c 	bl	80015c0 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fc38 	bl	80015c0 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1f3      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0xe8>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d063      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d11c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d92:	4b44      	ldr	r3, [pc, #272]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x152>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e1c7      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4937      	ldr	r1, [pc, #220]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	e03a      	b.n	8001e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd4:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <HAL_RCC_OscConfig+0x244>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff fbf1 	bl	80015c0 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fbed 	bl	80015c0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1a8      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4925      	ldr	r1, [pc, #148]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_OscConfig+0x244>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fbd0 	bl	80015c0 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fbcc 	bl	80015c0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e187      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d036      	beq.n	8001ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d016      	beq.n	8001e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_RCC_OscConfig+0x248>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fbb0 	bl	80015c0 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fbac 	bl	80015c0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e167      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_OscConfig+0x240>)
 8001e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x200>
 8001e82:	e01b      	b.n	8001ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_OscConfig+0x248>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fb99 	bl	80015c0 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	e00e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff fb95 	bl	80015c0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d907      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e150      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	42470000 	.word	0x42470000
 8001eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1ea      	bne.n	8001e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 8097 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10f      	bne.n	8001efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	4b7d      	ldr	r3, [pc, #500]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a7c      	ldr	r2, [pc, #496]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b7a      	ldr	r3, [pc, #488]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b77      	ldr	r3, [pc, #476]	; (80020d8 <HAL_RCC_OscConfig+0x474>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f06:	4b74      	ldr	r3, [pc, #464]	; (80020d8 <HAL_RCC_OscConfig+0x474>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a73      	ldr	r2, [pc, #460]	; (80020d8 <HAL_RCC_OscConfig+0x474>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fb55 	bl	80015c0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7ff fb51 	bl	80015c0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e10c      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <HAL_RCC_OscConfig+0x474>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x2ea>
 8001f40:	4b64      	ldr	r3, [pc, #400]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a63      	ldr	r2, [pc, #396]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	e01c      	b.n	8001f88 <HAL_RCC_OscConfig+0x324>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x30c>
 8001f56:	4b5f      	ldr	r3, [pc, #380]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5a:	4a5e      	ldr	r2, [pc, #376]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6713      	str	r3, [r2, #112]	; 0x70
 8001f62:	4b5c      	ldr	r3, [pc, #368]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f66:	4a5b      	ldr	r2, [pc, #364]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0x324>
 8001f70:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	4a57      	ldr	r2, [pc, #348]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7c:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	4a54      	ldr	r2, [pc, #336]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001f82:	f023 0304 	bic.w	r3, r3, #4
 8001f86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff fb16 	bl	80015c0 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f98:	f7ff fb12 	bl	80015c0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e0cb      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fae:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0ee      	beq.n	8001f98 <HAL_RCC_OscConfig+0x334>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbc:	f7ff fb00 	bl	80015c0 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fafc 	bl	80015c0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e0b5      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fda:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1ee      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fec:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a38      	ldr	r2, [pc, #224]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a1 	beq.w	8002144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b08      	cmp	r3, #8
 800200c:	d05c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d141      	bne.n	800209a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002016:	4b31      	ldr	r3, [pc, #196]	; (80020dc <HAL_RCC_OscConfig+0x478>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fad0 	bl	80015c0 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff facc 	bl	80015c0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e087      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	019b      	lsls	r3, r3, #6
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	085b      	lsrs	r3, r3, #1
 800205a:	3b01      	subs	r3, #1
 800205c:	041b      	lsls	r3, r3, #16
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	491b      	ldr	r1, [pc, #108]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x478>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff faa5 	bl	80015c0 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff faa1 	bl	80015c0 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e05c      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x416>
 8002098:	e054      	b.n	8002144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_RCC_OscConfig+0x478>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fa8e 	bl	80015c0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff fa8a 	bl	80015c0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e045      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_OscConfig+0x470>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x444>
 80020c6:	e03d      	b.n	8002144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e038      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40007000 	.word	0x40007000
 80020dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <HAL_RCC_OscConfig+0x4ec>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d028      	beq.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d121      	bne.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d11a      	bne.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002118:	4293      	cmp	r3, r2
 800211a:	d111      	bne.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	085b      	lsrs	r3, r3, #1
 8002128:	3b01      	subs	r3, #1
 800212a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d107      	bne.n	8002140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800

08002154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0cc      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d90c      	bls.n	8002190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b65      	ldr	r3, [pc, #404]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b63      	ldr	r3, [pc, #396]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0b8      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a8:	4b59      	ldr	r3, [pc, #356]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c0:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	494d      	ldr	r1, [pc, #308]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d044      	beq.n	8002274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d119      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e07f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d003      	beq.n	8002212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220e:	2b03      	cmp	r3, #3
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002222:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e067      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f023 0203 	bic.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4934      	ldr	r1, [pc, #208]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002244:	f7ff f9bc 	bl	80015c0 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	e00a      	b.n	8002262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224c:	f7ff f9b8 	bl	80015c0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e04f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 020c 	and.w	r2, r3, #12
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	429a      	cmp	r2, r3
 8002272:	d1eb      	bne.n	800224c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d20c      	bcs.n	800229c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e032      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4916      	ldr	r1, [pc, #88]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	490e      	ldr	r1, [pc, #56]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022da:	f000 f821 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	490a      	ldr	r1, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f91c 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00
 8002310:	40023800 	.word	0x40023800
 8002314:	08009618 	.word	0x08009618
 8002318:	20000000 	.word	0x20000000
 800231c:	20000004 	.word	0x20000004

08002320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002324:	b094      	sub	sp, #80	; 0x50
 8002326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	647b      	str	r3, [r7, #68]	; 0x44
 800232c:	2300      	movs	r3, #0
 800232e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002330:	2300      	movs	r3, #0
 8002332:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002338:	4b79      	ldr	r3, [pc, #484]	; (8002520 <HAL_RCC_GetSysClockFreq+0x200>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d00d      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x40>
 8002344:	2b08      	cmp	r3, #8
 8002346:	f200 80e1 	bhi.w	800250c <HAL_RCC_GetSysClockFreq+0x1ec>
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x34>
 800234e:	2b04      	cmp	r3, #4
 8002350:	d003      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0x3a>
 8002352:	e0db      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002354:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_RCC_GetSysClockFreq+0x204>)
 8002356:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002358:	e0db      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800235a:	4b73      	ldr	r3, [pc, #460]	; (8002528 <HAL_RCC_GetSysClockFreq+0x208>)
 800235c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800235e:	e0d8      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002360:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_GetSysClockFreq+0x200>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002368:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800236a:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCC_GetSysClockFreq+0x200>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d063      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002376:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_GetSysClockFreq+0x200>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	2200      	movs	r2, #0
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002380:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
 800238e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002392:	4622      	mov	r2, r4
 8002394:	462b      	mov	r3, r5
 8002396:	f04f 0000 	mov.w	r0, #0
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	0159      	lsls	r1, r3, #5
 80023a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a4:	0150      	lsls	r0, r2, #5
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4621      	mov	r1, r4
 80023ac:	1a51      	subs	r1, r2, r1
 80023ae:	6139      	str	r1, [r7, #16]
 80023b0:	4629      	mov	r1, r5
 80023b2:	eb63 0301 	sbc.w	r3, r3, r1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023c4:	4659      	mov	r1, fp
 80023c6:	018b      	lsls	r3, r1, #6
 80023c8:	4651      	mov	r1, sl
 80023ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ce:	4651      	mov	r1, sl
 80023d0:	018a      	lsls	r2, r1, #6
 80023d2:	4651      	mov	r1, sl
 80023d4:	ebb2 0801 	subs.w	r8, r2, r1
 80023d8:	4659      	mov	r1, fp
 80023da:	eb63 0901 	sbc.w	r9, r3, r1
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023f2:	4690      	mov	r8, r2
 80023f4:	4699      	mov	r9, r3
 80023f6:	4623      	mov	r3, r4
 80023f8:	eb18 0303 	adds.w	r3, r8, r3
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	462b      	mov	r3, r5
 8002400:	eb49 0303 	adc.w	r3, r9, r3
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002412:	4629      	mov	r1, r5
 8002414:	024b      	lsls	r3, r1, #9
 8002416:	4621      	mov	r1, r4
 8002418:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800241c:	4621      	mov	r1, r4
 800241e:	024a      	lsls	r2, r1, #9
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002426:	2200      	movs	r2, #0
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
 800242a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800242c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002430:	f7fd ff28 	bl	8000284 <__aeabi_uldivmod>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4613      	mov	r3, r2
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800243c:	e058      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243e:	4b38      	ldr	r3, [pc, #224]	; (8002520 <HAL_RCC_GetSysClockFreq+0x200>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	2200      	movs	r2, #0
 8002446:	4618      	mov	r0, r3
 8002448:	4611      	mov	r1, r2
 800244a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	2300      	movs	r3, #0
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002458:	4642      	mov	r2, r8
 800245a:	464b      	mov	r3, r9
 800245c:	f04f 0000 	mov.w	r0, #0
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	0159      	lsls	r1, r3, #5
 8002466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800246a:	0150      	lsls	r0, r2, #5
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4641      	mov	r1, r8
 8002472:	ebb2 0a01 	subs.w	sl, r2, r1
 8002476:	4649      	mov	r1, r9
 8002478:	eb63 0b01 	sbc.w	fp, r3, r1
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800248c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002490:	ebb2 040a 	subs.w	r4, r2, sl
 8002494:	eb63 050b 	sbc.w	r5, r3, fp
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	00eb      	lsls	r3, r5, #3
 80024a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a6:	00e2      	lsls	r2, r4, #3
 80024a8:	4614      	mov	r4, r2
 80024aa:	461d      	mov	r5, r3
 80024ac:	4643      	mov	r3, r8
 80024ae:	18e3      	adds	r3, r4, r3
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	464b      	mov	r3, r9
 80024b4:	eb45 0303 	adc.w	r3, r5, r3
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024c6:	4629      	mov	r1, r5
 80024c8:	028b      	lsls	r3, r1, #10
 80024ca:	4621      	mov	r1, r4
 80024cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024d0:	4621      	mov	r1, r4
 80024d2:	028a      	lsls	r2, r1, #10
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024da:	2200      	movs	r2, #0
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	61fa      	str	r2, [r7, #28]
 80024e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e4:	f7fd fece 	bl	8000284 <__aeabi_uldivmod>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4613      	mov	r3, r2
 80024ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	3301      	adds	r3, #1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800250a:	e002      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetSysClockFreq+0x204>)
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002514:	4618      	mov	r0, r3
 8002516:	3750      	adds	r7, #80	; 0x50
 8002518:	46bd      	mov	sp, r7
 800251a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	00f42400 	.word	0x00f42400
 8002528:	007a1200 	.word	0x007a1200

0800252c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07b      	b.n	8002636 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800254e:	d009      	beq.n	8002564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
 8002556:	e005      	b.n	8002564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe feee 	bl	8001360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800259a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e8:	ea42 0103 	orr.w	r1, r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	f003 0104 	and.w	r1, r3, #4
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f003 0210 	and.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002624:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b088      	sub	sp, #32
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_SPI_Transmit+0x22>
 800265c:	2302      	movs	r3, #2
 800265e:	e126      	b.n	80028ae <HAL_SPI_Transmit+0x270>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002668:	f7fe ffaa 	bl	80015c0 <HAL_GetTick>
 800266c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d002      	beq.n	8002684 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800267e:	2302      	movs	r3, #2
 8002680:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002682:	e10b      	b.n	800289c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_SPI_Transmit+0x52>
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002694:	e102      	b.n	800289c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2203      	movs	r2, #3
 800269a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	88fa      	ldrh	r2, [r7, #6]
 80026ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026dc:	d10f      	bne.n	80026fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002708:	2b40      	cmp	r3, #64	; 0x40
 800270a:	d007      	beq.n	800271c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002724:	d14b      	bne.n	80027be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_SPI_Transmit+0xf6>
 800272e:	8afb      	ldrh	r3, [r7, #22]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d13e      	bne.n	80027b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	881a      	ldrh	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	1c9a      	adds	r2, r3, #2
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002758:	e02b      	b.n	80027b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d112      	bne.n	800278e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	881a      	ldrh	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	1c9a      	adds	r2, r3, #2
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	86da      	strh	r2, [r3, #54]	; 0x36
 800278c:	e011      	b.n	80027b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800278e:	f7fe ff17 	bl	80015c0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d803      	bhi.n	80027a6 <HAL_SPI_Transmit+0x168>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d102      	bne.n	80027ac <HAL_SPI_Transmit+0x16e>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027b0:	e074      	b.n	800289c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ce      	bne.n	800275a <HAL_SPI_Transmit+0x11c>
 80027bc:	e04c      	b.n	8002858 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_SPI_Transmit+0x18e>
 80027c6:	8afb      	ldrh	r3, [r7, #22]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d140      	bne.n	800284e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	330c      	adds	r3, #12
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027f2:	e02c      	b.n	800284e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d113      	bne.n	800282a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	7812      	ldrb	r2, [r2, #0]
 800280e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	86da      	strh	r2, [r3, #54]	; 0x36
 8002828:	e011      	b.n	800284e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800282a:	f7fe fec9 	bl	80015c0 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d803      	bhi.n	8002842 <HAL_SPI_Transmit+0x204>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d102      	bne.n	8002848 <HAL_SPI_Transmit+0x20a>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800284c:	e026      	b.n	800289c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1cd      	bne.n	80027f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	6839      	ldr	r1, [r7, #0]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fbcb 	bl	8002ff8 <SPI_EndRxTxTransaction>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	77fb      	strb	r3, [r7, #31]
 8002898:	e000      	b.n	800289c <HAL_SPI_Transmit+0x25e>
  }

error:
 800289a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b088      	sub	sp, #32
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028d2:	d112      	bne.n	80028fa <HAL_SPI_Receive+0x44>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10e      	bne.n	80028fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2204      	movs	r2, #4
 80028e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	4613      	mov	r3, r2
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f8f1 	bl	8002ad8 <HAL_SPI_TransmitReceive>
 80028f6:	4603      	mov	r3, r0
 80028f8:	e0ea      	b.n	8002ad0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_SPI_Receive+0x52>
 8002904:	2302      	movs	r3, #2
 8002906:	e0e3      	b.n	8002ad0 <HAL_SPI_Receive+0x21a>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002910:	f7fe fe56 	bl	80015c0 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d002      	beq.n	8002928 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002922:	2302      	movs	r3, #2
 8002924:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002926:	e0ca      	b.n	8002abe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_SPI_Receive+0x7e>
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002938:	e0c1      	b.n	8002abe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2204      	movs	r2, #4
 800293e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	88fa      	ldrh	r2, [r7, #6]
 8002952:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	88fa      	ldrh	r2, [r7, #6]
 8002958:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002980:	d10f      	bne.n	80029a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002990:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d007      	beq.n	80029c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d162      	bne.n	8002a8e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80029c8:	e02e      	b.n	8002a28 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d115      	bne.n	8002a04 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f103 020c 	add.w	r2, r3, #12
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	7812      	ldrb	r2, [r2, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a02:	e011      	b.n	8002a28 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a04:	f7fe fddc 	bl	80015c0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d803      	bhi.n	8002a1c <HAL_SPI_Receive+0x166>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1a:	d102      	bne.n	8002a22 <HAL_SPI_Receive+0x16c>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a26:	e04a      	b.n	8002abe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1cb      	bne.n	80029ca <HAL_SPI_Receive+0x114>
 8002a32:	e031      	b.n	8002a98 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d113      	bne.n	8002a6a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	1c9a      	adds	r2, r3, #2
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a68:	e011      	b.n	8002a8e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a6a:	f7fe fda9 	bl	80015c0 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d803      	bhi.n	8002a82 <HAL_SPI_Receive+0x1cc>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d102      	bne.n	8002a88 <HAL_SPI_Receive+0x1d2>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a8c:	e017      	b.n	8002abe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1cd      	bne.n	8002a34 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fa45 	bl	8002f2c <SPI_EndRxTransaction>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
 8002aba:	e000      	b.n	8002abe <HAL_SPI_Receive+0x208>
  }

error :
 8002abc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08c      	sub	sp, #48	; 0x30
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x26>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e18a      	b.n	8002e14 <HAL_SPI_TransmitReceive+0x33c>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b06:	f7fe fd5b 	bl	80015c0 <HAL_GetTick>
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d00f      	beq.n	8002b48 <HAL_SPI_TransmitReceive+0x70>
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2e:	d107      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d103      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x68>
 8002b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d003      	beq.n	8002b48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002b40:	2302      	movs	r3, #2
 8002b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b46:	e15b      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_SPI_TransmitReceive+0x82>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_SPI_TransmitReceive+0x82>
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d103      	bne.n	8002b62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b60:	e14e      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d003      	beq.n	8002b76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2205      	movs	r2, #5
 8002b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	887a      	ldrh	r2, [r7, #2]
 8002b86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d007      	beq.n	8002bca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd2:	d178      	bne.n	8002cc6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_SPI_TransmitReceive+0x10a>
 8002bdc:	8b7b      	ldrh	r3, [r7, #26]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d166      	bne.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	1c9a      	adds	r2, r3, #2
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c06:	e053      	b.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d11b      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x176>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0x176>
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d113      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d119      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x1b8>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d014      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	b292      	uxth	r2, r2
 8002c72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	1c9a      	adds	r2, r3, #2
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c90:	f7fe fc96 	bl	80015c0 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d807      	bhi.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d8>
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca6:	d003      	beq.n	8002cb0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cae:	e0a7      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1a6      	bne.n	8002c08 <HAL_SPI_TransmitReceive+0x130>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1a1      	bne.n	8002c08 <HAL_SPI_TransmitReceive+0x130>
 8002cc4:	e07c      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x1fc>
 8002cce:	8b7b      	ldrh	r3, [r7, #26]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d16b      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cfa:	e057      	b.n	8002dac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d11c      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x26c>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d017      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x26c>
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d114      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d119      	bne.n	8002d86 <HAL_SPI_TransmitReceive+0x2ae>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d014      	beq.n	8002d86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d82:	2301      	movs	r3, #1
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d86:	f7fe fc1b 	bl	80015c0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d803      	bhi.n	8002d9e <HAL_SPI_TransmitReceive+0x2c6>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d102      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x2cc>
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002daa:	e029      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1a2      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x224>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d19d      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f917 	bl	8002ff8 <SPI_EndRxTxTransaction>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d006      	beq.n	8002dde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ddc:	e010      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10b      	bne.n	8002dfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	e000      	b.n	8002e00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002dfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3730      	adds	r7, #48	; 0x30
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e2c:	f7fe fbc8 	bl	80015c0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	4413      	add	r3, r2
 8002e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e3c:	f7fe fbc0 	bl	80015c0 <HAL_GetTick>
 8002e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e42:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	015b      	lsls	r3, r3, #5
 8002e48:	0d1b      	lsrs	r3, r3, #20
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e52:	e054      	b.n	8002efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d050      	beq.n	8002efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e5c:	f7fe fbb0 	bl	80015c0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d902      	bls.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d13d      	bne.n	8002eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e8a:	d111      	bne.n	8002eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e94:	d004      	beq.n	8002ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d107      	bne.n	8002eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb8:	d10f      	bne.n	8002eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e017      	b.n	8002f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4013      	ands	r3, r2
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	bf0c      	ite	eq
 8002f0e:	2301      	moveq	r3, #1
 8002f10:	2300      	movne	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d19b      	bne.n	8002e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000

08002f2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f40:	d111      	bne.n	8002f66 <SPI_EndRxTransaction+0x3a>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4a:	d004      	beq.n	8002f56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f54:	d107      	bne.n	8002f66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f6e:	d12a      	bne.n	8002fc6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f78:	d012      	beq.n	8002fa0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff ff49 	bl	8002e1c <SPI_WaitFlagStateUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d02d      	beq.n	8002fec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e026      	b.n	8002fee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2101      	movs	r1, #1
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f7ff ff36 	bl	8002e1c <SPI_WaitFlagStateUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01a      	beq.n	8002fec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e013      	b.n	8002fee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2101      	movs	r1, #1
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff ff23 	bl	8002e1c <SPI_WaitFlagStateUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e000      	b.n	8002fee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <SPI_EndRxTxTransaction+0x7c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <SPI_EndRxTxTransaction+0x80>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0d5b      	lsrs	r3, r3, #21
 8003010:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003022:	d112      	bne.n	800304a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff fef4 	bl	8002e1c <SPI_WaitFlagStateUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d016      	beq.n	8003068 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	f043 0220 	orr.w	r2, r3, #32
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e00f      	b.n	800306a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	3b01      	subs	r3, #1
 8003054:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003060:	2b80      	cmp	r3, #128	; 0x80
 8003062:	d0f2      	beq.n	800304a <SPI_EndRxTxTransaction+0x52>
 8003064:	e000      	b.n	8003068 <SPI_EndRxTxTransaction+0x70>
        break;
 8003066:	bf00      	nop
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000000 	.word	0x20000000
 8003078:	165e9f81 	.word	0x165e9f81

0800307c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e041      	b.n	8003112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe f9a4 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f000 f82e 	bl	800311c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <TIM_Base_SetConfig+0x114>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313a:	d00f      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3d      	ldr	r2, [pc, #244]	; (8003234 <TIM_Base_SetConfig+0x118>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00b      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <TIM_Base_SetConfig+0x11c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d007      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3b      	ldr	r2, [pc, #236]	; (800323c <TIM_Base_SetConfig+0x120>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <TIM_Base_SetConfig+0x124>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a2f      	ldr	r2, [pc, #188]	; (8003230 <TIM_Base_SetConfig+0x114>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02b      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d027      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <TIM_Base_SetConfig+0x118>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d023      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2b      	ldr	r2, [pc, #172]	; (8003238 <TIM_Base_SetConfig+0x11c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01f      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2a      	ldr	r2, [pc, #168]	; (800323c <TIM_Base_SetConfig+0x120>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01b      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a29      	ldr	r2, [pc, #164]	; (8003240 <TIM_Base_SetConfig+0x124>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d017      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a28      	ldr	r2, [pc, #160]	; (8003244 <TIM_Base_SetConfig+0x128>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <TIM_Base_SetConfig+0x12c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00f      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a26      	ldr	r2, [pc, #152]	; (800324c <TIM_Base_SetConfig+0x130>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00b      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a25      	ldr	r2, [pc, #148]	; (8003250 <TIM_Base_SetConfig+0x134>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d007      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a24      	ldr	r2, [pc, #144]	; (8003254 <TIM_Base_SetConfig+0x138>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a23      	ldr	r2, [pc, #140]	; (8003258 <TIM_Base_SetConfig+0x13c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d108      	bne.n	80031e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <TIM_Base_SetConfig+0x114>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_Base_SetConfig+0xf8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <TIM_Base_SetConfig+0x124>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	615a      	str	r2, [r3, #20]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40010000 	.word	0x40010000
 8003234:	40000400 	.word	0x40000400
 8003238:	40000800 	.word	0x40000800
 800323c:	40000c00 	.word	0x40000c00
 8003240:	40010400 	.word	0x40010400
 8003244:	40014000 	.word	0x40014000
 8003248:	40014400 	.word	0x40014400
 800324c:	40014800 	.word	0x40014800
 8003250:	40001800 	.word	0x40001800
 8003254:	40001c00 	.word	0x40001c00
 8003258:	40002000 	.word	0x40002000

0800325c <__NVIC_SetPriority>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	2b00      	cmp	r3, #0
 800326e:	db0a      	blt.n	8003286 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	490c      	ldr	r1, [pc, #48]	; (80032a8 <__NVIC_SetPriority+0x4c>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	0112      	lsls	r2, r2, #4
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	440b      	add	r3, r1
 8003280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003284:	e00a      	b.n	800329c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4908      	ldr	r1, [pc, #32]	; (80032ac <__NVIC_SetPriority+0x50>)
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	3b04      	subs	r3, #4
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	440b      	add	r3, r1
 800329a:	761a      	strb	r2, [r3, #24]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000e100 	.word	0xe000e100
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80032b4:	2100      	movs	r1, #0
 80032b6:	f06f 0004 	mvn.w	r0, #4
 80032ba:	f7ff ffcf 	bl	800325c <__NVIC_SetPriority>
#endif
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032ca:	f3ef 8305 	mrs	r3, IPSR
 80032ce:	603b      	str	r3, [r7, #0]
  return(result);
 80032d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80032d6:	f06f 0305 	mvn.w	r3, #5
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	e00c      	b.n	80032f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <osKernelInitialize+0x44>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <osKernelInitialize+0x44>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	e002      	b.n	80032f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032f8:	687b      	ldr	r3, [r7, #4]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	2000014c 	.word	0x2000014c

0800330c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003312:	f3ef 8305 	mrs	r3, IPSR
 8003316:	603b      	str	r3, [r7, #0]
  return(result);
 8003318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <osKernelStart+0x1a>
    stat = osErrorISR;
 800331e:	f06f 0305 	mvn.w	r3, #5
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	e010      	b.n	8003348 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <osKernelStart+0x48>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d109      	bne.n	8003342 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800332e:	f7ff ffbf 	bl	80032b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <osKernelStart+0x48>)
 8003334:	2202      	movs	r2, #2
 8003336:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003338:	f002 fa8c 	bl	8005854 <vTaskStartScheduler>
      stat = osOK;
 800333c:	2300      	movs	r3, #0
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	e002      	b.n	8003348 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003348:	687b      	ldr	r3, [r7, #4]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2000014c 	.word	0x2000014c

08003358 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b08e      	sub	sp, #56	; 0x38
 800335c:	af04      	add	r7, sp, #16
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003368:	f3ef 8305 	mrs	r3, IPSR
 800336c:	617b      	str	r3, [r7, #20]
  return(result);
 800336e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003370:	2b00      	cmp	r3, #0
 8003372:	d17e      	bne.n	8003472 <osThreadNew+0x11a>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d07b      	beq.n	8003472 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800337e:	2318      	movs	r3, #24
 8003380:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d045      	beq.n	800341e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <osThreadNew+0x48>
        name = attr->name;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <osThreadNew+0x6e>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b38      	cmp	r3, #56	; 0x38
 80033b8:	d805      	bhi.n	80033c6 <osThreadNew+0x6e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <osThreadNew+0x72>
        return (NULL);
 80033c6:	2300      	movs	r3, #0
 80033c8:	e054      	b.n	8003474 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00e      	beq.n	8003400 <osThreadNew+0xa8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2ba7      	cmp	r3, #167	; 0xa7
 80033e8:	d90a      	bls.n	8003400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <osThreadNew+0xa8>
        mem = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	e010      	b.n	8003422 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10c      	bne.n	8003422 <osThreadNew+0xca>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <osThreadNew+0xca>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <osThreadNew+0xca>
          mem = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	e001      	b.n	8003422 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d110      	bne.n	800344a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003430:	9202      	str	r2, [sp, #8]
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	6a3a      	ldr	r2, [r7, #32]
 800343c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f001 fffa 	bl	8005438 <xTaskCreateStatic>
 8003444:	4603      	mov	r3, r0
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	e013      	b.n	8003472 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d110      	bne.n	8003472 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	b29a      	uxth	r2, r3
 8003454:	f107 0310 	add.w	r3, r7, #16
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f002 f845 	bl	80054f2 <xTaskCreate>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <osThreadNew+0x11a>
            hTask = NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003472:	693b      	ldr	r3, [r7, #16]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003484:	f3ef 8305 	mrs	r3, IPSR
 8003488:	60bb      	str	r3, [r7, #8]
  return(result);
 800348a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <osDelay+0x1c>
    stat = osErrorISR;
 8003490:	f06f 0305 	mvn.w	r3, #5
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e007      	b.n	80034a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f002 f99e 	bl	80057e4 <vTaskDelay>
    }
  }

  return (stat);
 80034a8:	68fb      	ldr	r3, [r7, #12]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f003 fd3e 	bl	8006f3c <pvTimerGetTimerID>
 80034c0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <TimerCallback+0x22>
    callb->func (callb->arg);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	6852      	ldr	r2, [r2, #4]
 80034d0:	4610      	mov	r0, r2
 80034d2:	4798      	blx	r3
  }
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08c      	sub	sp, #48	; 0x30
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	460b      	mov	r3, r1
 80034ea:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034f0:	f3ef 8305 	mrs	r3, IPSR
 80034f4:	613b      	str	r3, [r7, #16]
  return(result);
 80034f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d163      	bne.n	80035c4 <osTimerNew+0xe8>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d060      	beq.n	80035c4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003502:	2008      	movs	r0, #8
 8003504:	f003 ffa8 	bl	8007458 <pvPortMalloc>
 8003508:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d059      	beq.n	80035c4 <osTimerNew+0xe8>
      callb->func = func;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800351c:	7afb      	ldrb	r3, [r7, #11]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <osTimerNew+0x4c>
        reload = pdFALSE;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	e001      	b.n	800352c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8003528:	2301      	movs	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800352c:	f04f 33ff 	mov.w	r3, #4294967295
 8003530:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01c      	beq.n	8003576 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <osTimerNew+0x6e>
          name = attr->name;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <osTimerNew+0x84>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b2b      	cmp	r3, #43	; 0x2b
 8003558:	d902      	bls.n	8003560 <osTimerNew+0x84>
          mem = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e00c      	b.n	800357a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d108      	bne.n	800357a <osTimerNew+0x9e>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <osTimerNew+0x9e>
            mem = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	e001      	b.n	800357a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10c      	bne.n	800359a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <osTimerNew+0xf4>)
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	2101      	movs	r1, #1
 8003590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003592:	f003 f954 	bl	800683e <xTimerCreateStatic>
 8003596:	6238      	str	r0, [r7, #32]
 8003598:	e00b      	b.n	80035b2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d108      	bne.n	80035b2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <osTimerNew+0xf4>)
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	2101      	movs	r1, #1
 80035aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035ac:	f003 f926 	bl	80067fc <xTimerCreate>
 80035b0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <osTimerNew+0xe8>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <osTimerNew+0xe8>
        vPortFree (callb);
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f004 f816 	bl	80075f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80035c4:	6a3b      	ldr	r3, [r7, #32]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3728      	adds	r7, #40	; 0x28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	080034b3 	.word	0x080034b3

080035d4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af02      	add	r7, sp, #8
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035e2:	f3ef 8305 	mrs	r3, IPSR
 80035e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80035e8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <osTimerStart+0x22>
    stat = osErrorISR;
 80035ee:	f06f 0305 	mvn.w	r3, #5
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e017      	b.n	8003626 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d103      	bne.n	8003604 <osTimerStart+0x30>
    stat = osErrorParameter;
 80035fc:	f06f 0303 	mvn.w	r3, #3
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e010      	b.n	8003626 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8003604:	2300      	movs	r3, #0
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2300      	movs	r3, #0
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	2104      	movs	r1, #4
 800360e:	6938      	ldr	r0, [r7, #16]
 8003610:	f003 f98e 	bl	8006930 <xTimerGenericCommand>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <osTimerStart+0x4c>
      stat = osOK;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e002      	b.n	8003626 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8003620:	f06f 0302 	mvn.w	r3, #2
 8003624:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003626:	697b      	ldr	r3, [r7, #20]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800363c:	f3ef 8305 	mrs	r3, IPSR
 8003640:	60fb      	str	r3, [r7, #12]
  return(result);
 8003642:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003644:	2b00      	cmp	r3, #0
 8003646:	d12d      	bne.n	80036a4 <osEventFlagsNew+0x74>
    mem = -1;
 8003648:	f04f 33ff 	mov.w	r3, #4294967295
 800364c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d015      	beq.n	8003680 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <osEventFlagsNew+0x3a>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b1f      	cmp	r3, #31
 8003662:	d902      	bls.n	800366a <osEventFlagsNew+0x3a>
        mem = 1;
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e00c      	b.n	8003684 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <osEventFlagsNew+0x54>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <osEventFlagsNew+0x54>
          mem = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	e001      	b.n	8003684 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d106      	bne.n	8003698 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fb3e 	bl	8003d10 <xEventGroupCreateStatic>
 8003694:	6178      	str	r0, [r7, #20]
 8003696:	e005      	b.n	80036a4 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800369e:	f000 fb6e 	bl	8003d7e <xEventGroupCreate>
 80036a2:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80036a4:	697b      	ldr	r3, [r7, #20]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <osEventFlagsSet+0x1e>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80036ce:	f06f 0303 	mvn.w	r3, #3
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e028      	b.n	8003728 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036d6:	f3ef 8305 	mrs	r3, IPSR
 80036da:	60fb      	str	r3, [r7, #12]
  return(result);
 80036dc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01d      	beq.n	800371e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80036e6:	f107 0308 	add.w	r3, r7, #8
 80036ea:	461a      	mov	r2, r3
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	6938      	ldr	r0, [r7, #16]
 80036f0:	f000 fce8 	bl	80040c4 <xEventGroupSetBitsFromISR>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80036fa:	f06f 0302 	mvn.w	r3, #2
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e012      	b.n	8003728 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <osEventFlagsSet+0x78>
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <osEventFlagsSet+0x84>)
 800370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	e004      	b.n	8003728 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800371e:	6839      	ldr	r1, [r7, #0]
 8003720:	6938      	ldr	r0, [r7, #16]
 8003722:	f000 fc15 	bl	8003f50 <xEventGroupSetBits>
 8003726:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8003728:	697b      	ldr	r3, [r7, #20]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <osEventFlagsWait+0x22>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800375a:	f06f 0303 	mvn.w	r3, #3
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e04b      	b.n	80037fa <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003762:	f3ef 8305 	mrs	r3, IPSR
 8003766:	617b      	str	r3, [r7, #20]
  return(result);
 8003768:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800376e:	f06f 0305 	mvn.w	r3, #5
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	e041      	b.n	80037fa <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8003780:	2301      	movs	r3, #1
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	e001      	b.n	800378a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8003794:	2300      	movs	r3, #0
 8003796:	623b      	str	r3, [r7, #32]
 8003798:	e001      	b.n	800379e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800379a:	2301      	movs	r3, #1
 800379c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	6a3a      	ldr	r2, [r7, #32]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	69b8      	ldr	r0, [r7, #24]
 80037aa:	f000 fb03 	bl	8003db4 <xEventGroupWaitBits>
 80037ae:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d010      	beq.n	80037dc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4013      	ands	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d019      	beq.n	80037fa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80037cc:	f06f 0301 	mvn.w	r3, #1
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	e012      	b.n	80037fa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80037d4:	f06f 0302 	mvn.w	r3, #2
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e00e      	b.n	80037fa <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80037ec:	f06f 0301 	mvn.w	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	e002      	b.n	80037fa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80037f4:	f06f 0302 	mvn.w	r3, #2
 80037f8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80037fa:	69fb      	ldr	r3, [r7, #28]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3728      	adds	r7, #40	; 0x28
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003814:	f3ef 8305 	mrs	r3, IPSR
 8003818:	613b      	str	r3, [r7, #16]
  return(result);
 800381a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800381c:	2b00      	cmp	r3, #0
 800381e:	d175      	bne.n	800390c <osSemaphoreNew+0x108>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d072      	beq.n	800390c <osSemaphoreNew+0x108>
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	429a      	cmp	r2, r3
 800382c:	d86e      	bhi.n	800390c <osSemaphoreNew+0x108>
    mem = -1;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d015      	beq.n	8003866 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <osSemaphoreNew+0x4c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b4f      	cmp	r3, #79	; 0x4f
 8003848:	d902      	bls.n	8003850 <osSemaphoreNew+0x4c>
        mem = 1;
 800384a:	2301      	movs	r3, #1
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e00c      	b.n	800386a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d108      	bne.n	800386a <osSemaphoreNew+0x66>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <osSemaphoreNew+0x66>
          mem = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
 8003864:	e001      	b.n	800386a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d04c      	beq.n	800390c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d128      	bne.n	80038ca <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d10a      	bne.n	8003894 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2203      	movs	r2, #3
 8003884:	9200      	str	r2, [sp, #0]
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	2001      	movs	r0, #1
 800388c:	f000 fd4a 	bl	8004324 <xQueueGenericCreateStatic>
 8003890:	61f8      	str	r0, [r7, #28]
 8003892:	e005      	b.n	80038a0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003894:	2203      	movs	r2, #3
 8003896:	2100      	movs	r1, #0
 8003898:	2001      	movs	r0, #1
 800389a:	f000 fdbb 	bl	8004414 <xQueueGenericCreate>
 800389e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d022      	beq.n	80038ec <osSemaphoreNew+0xe8>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01f      	beq.n	80038ec <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80038ac:	2300      	movs	r3, #0
 80038ae:	2200      	movs	r2, #0
 80038b0:	2100      	movs	r1, #0
 80038b2:	69f8      	ldr	r0, [r7, #28]
 80038b4:	f000 fe7c 	bl	80045b0 <xQueueGenericSend>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d016      	beq.n	80038ec <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80038be:	69f8      	ldr	r0, [r7, #28]
 80038c0:	f001 fbd6 	bl	8005070 <vQueueDelete>
            hSemaphore = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	e010      	b.n	80038ec <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d108      	bne.n	80038e2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	461a      	mov	r2, r3
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fdfe 	bl	80044da <xQueueCreateCountingSemaphoreStatic>
 80038de:	61f8      	str	r0, [r7, #28]
 80038e0:	e004      	b.n	80038ec <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fe2f 	bl	8004548 <xQueueCreateCountingSemaphore>
 80038ea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <osSemaphoreNew+0xfc>
          name = attr->name;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e001      	b.n	8003904 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003904:	6979      	ldr	r1, [r7, #20]
 8003906:	69f8      	ldr	r0, [r7, #28]
 8003908:	f001 fd06 	bl	8005318 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800390c:	69fb      	ldr	r3, [r7, #28]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d103      	bne.n	8003938 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003930:	f06f 0303 	mvn.w	r3, #3
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e039      	b.n	80039ac <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003938:	f3ef 8305 	mrs	r3, IPSR
 800393c:	60fb      	str	r3, [r7, #12]
  return(result);
 800393e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003940:	2b00      	cmp	r3, #0
 8003942:	d022      	beq.n	800398a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800394a:	f06f 0303 	mvn.w	r3, #3
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e02c      	b.n	80039ac <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	461a      	mov	r2, r3
 800395c:	2100      	movs	r1, #0
 800395e:	6938      	ldr	r0, [r7, #16]
 8003960:	f001 fae8 	bl	8004f34 <xQueueReceiveFromISR>
 8003964:	4603      	mov	r3, r0
 8003966:	2b01      	cmp	r3, #1
 8003968:	d003      	beq.n	8003972 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800396a:	f06f 0302 	mvn.w	r3, #2
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e01c      	b.n	80039ac <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d019      	beq.n	80039ac <osSemaphoreAcquire+0x94>
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <osSemaphoreAcquire+0xa0>)
 800397a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	e010      	b.n	80039ac <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800398a:	6839      	ldr	r1, [r7, #0]
 800398c:	6938      	ldr	r0, [r7, #16]
 800398e:	f001 f995 	bl	8004cbc <xQueueSemaphoreTake>
 8003992:	4603      	mov	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d009      	beq.n	80039ac <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800399e:	f06f 0301 	mvn.w	r3, #1
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e002      	b.n	80039ac <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80039a6:	f06f 0302 	mvn.w	r3, #2
 80039aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80039ac:	697b      	ldr	r3, [r7, #20]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80039d2:	f06f 0303 	mvn.w	r3, #3
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e02c      	b.n	8003a34 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039da:	f3ef 8305 	mrs	r3, IPSR
 80039de:	60fb      	str	r3, [r7, #12]
  return(result);
 80039e0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01a      	beq.n	8003a1c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80039ea:	f107 0308 	add.w	r3, r7, #8
 80039ee:	4619      	mov	r1, r3
 80039f0:	6938      	ldr	r0, [r7, #16]
 80039f2:	f000 ffb2 	bl	800495a <xQueueGiveFromISR>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d003      	beq.n	8003a04 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80039fc:	f06f 0302 	mvn.w	r3, #2
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e017      	b.n	8003a34 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d014      	beq.n	8003a34 <osSemaphoreRelease+0x78>
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <osSemaphoreRelease+0x84>)
 8003a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	e00b      	b.n	8003a34 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	6938      	ldr	r0, [r7, #16]
 8003a24:	f000 fdc4 	bl	80045b0 <xQueueGenericSend>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d002      	beq.n	8003a34 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003a2e:	f06f 0302 	mvn.w	r3, #2
 8003a32:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003a34:	697b      	ldr	r3, [r7, #20]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	e000ed04 	.word	0xe000ed04

08003a44 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a54:	f3ef 8305 	mrs	r3, IPSR
 8003a58:	613b      	str	r3, [r7, #16]
  return(result);
 8003a5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d15f      	bne.n	8003b20 <osMessageQueueNew+0xdc>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d05c      	beq.n	8003b20 <osMessageQueueNew+0xdc>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d059      	beq.n	8003b20 <osMessageQueueNew+0xdc>
    mem = -1;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d029      	beq.n	8003acc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d012      	beq.n	8003aa6 <osMessageQueueNew+0x62>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b4f      	cmp	r3, #79	; 0x4f
 8003a86:	d90e      	bls.n	8003aa6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d302      	bcc.n	8003aa6 <osMessageQueueNew+0x62>
        mem = 1;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e014      	b.n	8003ad0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d110      	bne.n	8003ad0 <osMessageQueueNew+0x8c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10c      	bne.n	8003ad0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d104      	bne.n	8003ad0 <osMessageQueueNew+0x8c>
          mem = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e001      	b.n	8003ad0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d10b      	bne.n	8003aee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	9100      	str	r1, [sp, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fc1d 	bl	8004324 <xQueueGenericCreateStatic>
 8003aea:	61f8      	str	r0, [r7, #28]
 8003aec:	e008      	b.n	8003b00 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003af4:	2200      	movs	r2, #0
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fc8b 	bl	8004414 <xQueueGenericCreate>
 8003afe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e001      	b.n	8003b18 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b18:	6979      	ldr	r1, [r7, #20]
 8003b1a:	69f8      	ldr	r0, [r7, #28]
 8003b1c:	f001 fbfc 	bl	8005318 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003b20:	69fb      	ldr	r3, [r7, #28]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b44:	f3ef 8305 	mrs	r3, IPSR
 8003b48:	617b      	str	r3, [r7, #20]
  return(result);
 8003b4a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d028      	beq.n	8003ba2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <osMessageQueuePut+0x36>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <osMessageQueuePut+0x36>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003b62:	f06f 0303 	mvn.w	r3, #3
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e038      	b.n	8003bdc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003b6e:	f107 0210 	add.w	r2, r7, #16
 8003b72:	2300      	movs	r3, #0
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	69b8      	ldr	r0, [r7, #24]
 8003b78:	f000 fe40 	bl	80047fc <xQueueGenericSendFromISR>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d003      	beq.n	8003b8a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003b82:	f06f 0302 	mvn.w	r3, #2
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	e028      	b.n	8003bdc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d025      	beq.n	8003bdc <osMessageQueuePut+0xb0>
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <osMessageQueuePut+0xbc>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	e01c      	b.n	8003bdc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <osMessageQueuePut+0x82>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003bae:	f06f 0303 	mvn.w	r3, #3
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e012      	b.n	8003bdc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	69b8      	ldr	r0, [r7, #24]
 8003bbe:	f000 fcf7 	bl	80045b0 <xQueueGenericSend>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d009      	beq.n	8003bdc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003bce:	f06f 0301 	mvn.w	r3, #1
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e002      	b.n	8003bdc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003bd6:	f06f 0302 	mvn.w	r3, #2
 8003bda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c02:	f3ef 8305 	mrs	r3, IPSR
 8003c06:	617b      	str	r3, [r7, #20]
  return(result);
 8003c08:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d028      	beq.n	8003c60 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <osMessageQueueGet+0x34>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <osMessageQueueGet+0x34>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003c20:	f06f 0303 	mvn.w	r3, #3
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	e037      	b.n	8003c98 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003c2c:	f107 0310 	add.w	r3, r7, #16
 8003c30:	461a      	mov	r2, r3
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	69b8      	ldr	r0, [r7, #24]
 8003c36:	f001 f97d 	bl	8004f34 <xQueueReceiveFromISR>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d003      	beq.n	8003c48 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003c40:	f06f 0302 	mvn.w	r3, #2
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	e027      	b.n	8003c98 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d024      	beq.n	8003c98 <osMessageQueueGet+0xac>
 8003c4e:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <osMessageQueueGet+0xb8>)
 8003c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	e01b      	b.n	8003c98 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <osMessageQueueGet+0x80>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003c6c:	f06f 0303 	mvn.w	r3, #3
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e011      	b.n	8003c98 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	69b8      	ldr	r0, [r7, #24]
 8003c7a:	f000 ff0f 	bl	8004a9c <xQueueReceive>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d009      	beq.n	8003c98 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003c8a:	f06f 0301 	mvn.w	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e002      	b.n	8003c98 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003c92:	f06f 0302 	mvn.w	r3, #2
 8003c96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003c98:	69fb      	ldr	r3, [r7, #28]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4a06      	ldr	r2, [pc, #24]	; (8003cd8 <vApplicationGetIdleTaskMemory+0x30>)
 8003cbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	601a      	str	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000150 	.word	0x20000150
 8003cd8:	200001f8 	.word	0x200001f8

08003cdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a07      	ldr	r2, [pc, #28]	; (8003d08 <vApplicationGetTimerTaskMemory+0x2c>)
 8003cec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4a06      	ldr	r2, [pc, #24]	; (8003d0c <vApplicationGetTimerTaskMemory+0x30>)
 8003cf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	200003f8 	.word	0x200003f8
 8003d0c:	200004a0 	.word	0x200004a0

08003d10 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003d34:	2320      	movs	r3, #32
 8003d36:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d00a      	beq.n	8003d54 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	60fb      	str	r3, [r7, #12]
}
 8003d50:	bf00      	nop
 8003d52:	e7fe      	b.n	8003d52 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f9bf 	bl	80040ec <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2201      	movs	r2, #1
 8003d72:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003d74:	697b      	ldr	r3, [r7, #20]
	}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003d84:	2020      	movs	r0, #32
 8003d86:	f003 fb67 	bl	8007458 <pvPortMalloc>
 8003d8a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f9a5 	bl	80040ec <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003da8:	687b      	ldr	r3, [r7, #4]
	}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b090      	sub	sp, #64	; 0x40
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <xEventGroupWaitBits+0x36>
	__asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	623b      	str	r3, [r7, #32]
}
 8003de6:	bf00      	nop
 8003de8:	e7fe      	b.n	8003de8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <xEventGroupWaitBits+0x56>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	61fb      	str	r3, [r7, #28]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xEventGroupWaitBits+0x72>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61bb      	str	r3, [r7, #24]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e26:	f002 fa91 	bl	800634c <xTaskGetSchedulerState>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <xEventGroupWaitBits+0x82>
 8003e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <xEventGroupWaitBits+0x86>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xEventGroupWaitBits+0x88>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	617b      	str	r3, [r7, #20]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003e56:	f001 fd7f 	bl	8005958 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e66:	f000 f90b 	bl	8004080 <prvTestWaitCondition>
 8003e6a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00e      	beq.n	8003e90 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d028      	beq.n	8003ed2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	401a      	ands	r2, r3
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e020      	b.n	8003ed2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e9e:	e018      	b.n	8003ed2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eac:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebe:	1d18      	adds	r0, r3, #4
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ec8:	4619      	mov	r1, r3
 8003eca:	f001 ff71 	bl	8005db0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003ed2:	f001 fd4f 	bl	8005974 <xTaskResumeAll>
 8003ed6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d031      	beq.n	8003f42 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d107      	bne.n	8003ef4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <xEventGroupWaitBits+0x198>)
 8003ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003ef4:	f002 fbba 	bl	800666c <uxTaskResetEventItemValue>
 8003ef8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11a      	bne.n	8003f3a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003f04:	f003 f986 	bl	8007214 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f14:	f000 f8b4 	bl	8004080 <prvTestWaitCondition>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f30:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003f32:	2301      	movs	r3, #1
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003f36:	f003 f99d 	bl	8007274 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f40:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3740      	adds	r7, #64	; 0x40
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08e      	sub	sp, #56	; 0x38
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <xEventGroupSetBits+0x32>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	613b      	str	r3, [r7, #16]
}
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <xEventGroupSetBits+0x52>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60fb      	str	r3, [r7, #12]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	3308      	adds	r3, #8
 8003fac:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003fae:	f001 fcd3 	bl	8005958 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003fc4:	e03c      	b.n	8004040 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003fdc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fe4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d108      	bne.n	8004002 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004000:	e008      	b.n	8004014 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	429a      	cmp	r2, r3
 800400e:	d101      	bne.n	8004014 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d010      	beq.n	800403c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004034:	4619      	mov	r1, r3
 8004036:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004038:	f001 ff8c 	bl	8005f54 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	429a      	cmp	r2, r3
 8004046:	d1be      	bne.n	8003fc6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	43db      	mvns	r3, r3
 8004050:	401a      	ands	r2, r3
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004056:	f001 fc8d 	bl	8005974 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	681b      	ldr	r3, [r3, #0]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3738      	adds	r7, #56	; 0x38
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ff6c 	bl	8003f50 <xEventGroupSetBits>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	e007      	b.n	80040b6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d101      	bne.n	80040b6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80040b2:	2301      	movs	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80040b6:	697b      	ldr	r3, [r7, #20]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	68f9      	ldr	r1, [r7, #12]
 80040d6:	4804      	ldr	r0, [pc, #16]	; (80040e8 <xEventGroupSetBitsFromISR+0x24>)
 80040d8:	f002 ff50 	bl	8006f7c <xTimerPendFunctionCallFromISR>
 80040dc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80040de:	697b      	ldr	r3, [r7, #20]
	}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	08004067 	.word	0x08004067

080040ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f103 0208 	add.w	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f04f 32ff 	mov.w	r2, #4294967295
 8004104:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f103 0208 	add.w	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f103 0208 	add.w	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
}
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d103      	bne.n	80041ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e00c      	b.n	80041c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3308      	adds	r3, #8
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e002      	b.n	80041bc <vListInsert+0x2e>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d2f6      	bcs.n	80041b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	601a      	str	r2, [r3, #0]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6892      	ldr	r2, [r2, #8]
 8004216:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6852      	ldr	r2, [r2, #4]
 8004220:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	d103      	bne.n	8004234 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	1e5a      	subs	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueGenericReset+0x2a>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	60bb      	str	r3, [r7, #8]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800427e:	f002 ffc9 	bl	8007214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	441a      	add	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	3b01      	subs	r3, #1
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	441a      	add	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	22ff      	movs	r2, #255	; 0xff
 80042c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	22ff      	movs	r2, #255	; 0xff
 80042ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d114      	bne.n	80042fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01a      	beq.n	8004312 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3310      	adds	r3, #16
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 fdcf 	bl	8005e84 <xTaskRemoveFromEventList>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d012      	beq.n	8004312 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <xQueueGenericReset+0xcc>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	e009      	b.n	8004312 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3310      	adds	r3, #16
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fef2 	bl	80040ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3324      	adds	r3, #36	; 0x24
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff feed 	bl	80040ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004312:	f002 ffaf 	bl	8007274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004316:	2301      	movs	r3, #1
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	e000ed04 	.word	0xe000ed04

08004324 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08e      	sub	sp, #56	; 0x38
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <xQueueGenericCreateStatic+0x52>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <xQueueGenericCreateStatic+0x56>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <xQueueGenericCreateStatic+0x58>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	623b      	str	r3, [r7, #32]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <xQueueGenericCreateStatic+0x7e>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <xQueueGenericCreateStatic+0x82>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <xQueueGenericCreateStatic+0x84>
 80043a6:	2300      	movs	r3, #0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	61fb      	str	r3, [r7, #28]
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043c2:	2350      	movs	r3, #80	; 0x50
 80043c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b50      	cmp	r3, #80	; 0x50
 80043ca:	d00a      	beq.n	80043e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	61bb      	str	r3, [r7, #24]
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f83f 	bl	8004488 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800440c:	4618      	mov	r0, r3
 800440e:	3730      	adds	r7, #48	; 0x30
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	613b      	str	r3, [r7, #16]
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3350      	adds	r3, #80	; 0x50
 800444c:	4618      	mov	r0, r3
 800444e:	f003 f803 	bl	8007458 <pvPortMalloc>
 8004452:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d011      	beq.n	800447e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	3350      	adds	r3, #80	; 0x50
 8004462:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800446c:	79fa      	ldrb	r2, [r7, #7]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f805 	bl	8004488 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800447e:	69bb      	ldr	r3, [r7, #24]
	}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e002      	b.n	80044aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044b6:	2101      	movs	r1, #1
 80044b8:	69b8      	ldr	r0, [r7, #24]
 80044ba:	f7ff fecb 	bl	8004254 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	2073      	movs	r0, #115	; 0x73
 80044ce:	f003 fe87 	bl	80081e0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	61bb      	str	r3, [r7, #24]
}
 80044fe:	bf00      	nop
 8004500:	e7fe      	b.n	8004500 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	429a      	cmp	r2, r3
 8004508:	d90a      	bls.n	8004520 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	617b      	str	r3, [r7, #20]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004520:	2302      	movs	r3, #2
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	2100      	movs	r1, #0
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff fefa 	bl	8004324 <xQueueGenericCreateStatic>
 8004530:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800453e:	69fb      	ldr	r3, [r7, #28]
	}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	613b      	str	r3, [r7, #16]
}
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	d90a      	bls.n	800458c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	60fb      	str	r3, [r7, #12]
}
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800458c:	2202      	movs	r2, #2
 800458e:	2100      	movs	r1, #0
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff3f 	bl	8004414 <xQueueGenericCreate>
 8004596:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80045a4:	697b      	ldr	r3, [r7, #20]
	}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b090      	sub	sp, #64	; 0x40
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045be:	2300      	movs	r3, #0
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueGenericSend+0x32>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <xQueueGenericSend+0x40>
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <xQueueGenericSend+0x44>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <xQueueGenericSend+0x46>
 80045f4:	2300      	movs	r3, #0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <xQueueGenericSend+0x60>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d103      	bne.n	800461e <xQueueGenericSend+0x6e>
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <xQueueGenericSend+0x72>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <xQueueGenericSend+0x74>
 8004622:	2300      	movs	r3, #0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xQueueGenericSend+0x8e>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	623b      	str	r3, [r7, #32]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800463e:	f001 fe85 	bl	800634c <xTaskGetSchedulerState>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <xQueueGenericSend+0x9e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <xQueueGenericSend+0xa2>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <xQueueGenericSend+0xa4>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <xQueueGenericSend+0xbe>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	61fb      	str	r3, [r7, #28]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800466e:	f002 fdd1 	bl	8007214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <xQueueGenericSend+0xd4>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d136      	bne.n	80046f2 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	4618      	mov	r0, r3
 8004688:	f004 fa5c 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	460b      	mov	r3, r1
 8004696:	4601      	mov	r1, r0
 8004698:	205a      	movs	r0, #90	; 0x5a
 800469a:	f003 fe17 	bl	80082cc <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a4:	f000 fd28 	bl	80050f8 <prvCopyDataToQueue>
 80046a8:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d010      	beq.n	80046d4 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	3324      	adds	r3, #36	; 0x24
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 fbe4 	bl	8005e84 <xTaskRemoveFromEventList>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046c2:	4b4d      	ldr	r3, [pc, #308]	; (80047f8 <xQueueGenericSend+0x248>)
 80046c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	e00a      	b.n	80046ea <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046da:	4b47      	ldr	r3, [pc, #284]	; (80047f8 <xQueueGenericSend+0x248>)
 80046dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046ea:	f002 fdc3 	bl	8007274 <vPortExitCritical>
				return pdPASS;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e07d      	b.n	80047ee <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d110      	bne.n	800471a <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046f8:	f002 fdbc 	bl	8007274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 fa20 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	460b      	mov	r3, r1
 800470e:	4601      	mov	r1, r0
 8004710:	205a      	movs	r0, #90	; 0x5a
 8004712:	f003 fddb 	bl	80082cc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8004716:	2300      	movs	r3, #0
 8004718:	e069      	b.n	80047ee <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004720:	f107 0314 	add.w	r3, r7, #20
 8004724:	4618      	mov	r0, r3
 8004726:	f001 fc7b 	bl	8006020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800472a:	2301      	movs	r3, #1
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800472e:	f002 fda1 	bl	8007274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004732:	f001 f911 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004736:	f002 fd6d 	bl	8007214 <vPortEnterCritical>
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004740:	b25b      	sxtb	r3, r3
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d103      	bne.n	8004750 <xQueueGenericSend+0x1a0>
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004756:	b25b      	sxtb	r3, r3
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d103      	bne.n	8004766 <xQueueGenericSend+0x1b6>
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004766:	f002 fd85 	bl	8007274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800476a:	1d3a      	adds	r2, r7, #4
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f001 fc6a 	bl	800604c <xTaskCheckForTimeOut>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d124      	bne.n	80047c8 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800477e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004780:	f000 fdb2 	bl	80052e8 <prvIsQueueFull>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d018      	beq.n	80047bc <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	3310      	adds	r3, #16
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f001 fae8 	bl	8005d68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800479a:	f000 fd3d 	bl	8005218 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800479e:	f001 f8e9 	bl	8005974 <xTaskResumeAll>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f47f af62 	bne.w	800466e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <xQueueGenericSend+0x248>)
 80047ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	e758      	b.n	800466e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047be:	f000 fd2b 	bl	8005218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047c2:	f001 f8d7 	bl	8005974 <xTaskResumeAll>
 80047c6:	e752      	b.n	800466e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ca:	f000 fd25 	bl	8005218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ce:	f001 f8d1 	bl	8005974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	4618      	mov	r0, r3
 80047d6:	f004 f9b5 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	460b      	mov	r3, r1
 80047e4:	4601      	mov	r1, r0
 80047e6:	205a      	movs	r0, #90	; 0x5a
 80047e8:	f003 fd70 	bl	80082cc <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80047ec:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3738      	adds	r7, #56	; 0x38
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b090      	sub	sp, #64	; 0x40
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <xQueueGenericSendFromISR+0x3c>
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <xQueueGenericSendFromISR+0x40>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <xQueueGenericSendFromISR+0x42>
 800483c:	2300      	movs	r3, #0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d103      	bne.n	8004866 <xQueueGenericSendFromISR+0x6a>
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <xQueueGenericSendFromISR+0x6e>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xQueueGenericSendFromISR+0x70>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	623b      	str	r3, [r7, #32]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004886:	f002 fda7 	bl	80073d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800488a:	f3ef 8211 	mrs	r2, BASEPRI
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	61fa      	str	r2, [r7, #28]
 80048a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d302      	bcc.n	80048b8 <xQueueGenericSendFromISR+0xbc>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d139      	bne.n	800492c <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	4618      	mov	r0, r3
 80048cc:	f004 f93a 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 80048d0:	4601      	mov	r1, r0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	461a      	mov	r2, r3
 80048d6:	2060      	movs	r0, #96	; 0x60
 80048d8:	f003 fc28 	bl	800812c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048e2:	f000 fc09 	bl	80050f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d112      	bne.n	8004916 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d016      	beq.n	8004926 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	3324      	adds	r3, #36	; 0x24
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 fac1 	bl	8005e84 <xTaskRemoveFromEventList>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00e      	beq.n	8004926 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e007      	b.n	8004926 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800491a:	3301      	adds	r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	b25a      	sxtb	r2, r3
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004926:	2301      	movs	r3, #1
 8004928:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800492a:	e00b      	b.n	8004944 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	4618      	mov	r0, r3
 8004930:	f004 f908 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004934:	4601      	mov	r1, r0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	461a      	mov	r2, r3
 800493a:	2060      	movs	r0, #96	; 0x60
 800493c:	f003 fbf6 	bl	800812c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8004940:	2300      	movs	r3, #0
 8004942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004946:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800494e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004952:	4618      	mov	r0, r3
 8004954:	3740      	adds	r7, #64	; 0x40
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b08e      	sub	sp, #56	; 0x38
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	623b      	str	r3, [r7, #32]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	61fb      	str	r3, [r7, #28]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d103      	bne.n	80049b2 <xQueueGiveFromISR+0x58>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <xQueueGiveFromISR+0x5c>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <xQueueGiveFromISR+0x5e>
 80049b6:	2300      	movs	r3, #0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	61bb      	str	r3, [r7, #24]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049d2:	f002 fd01 	bl	80073d8 <vPortValidateInterruptPriority>
	__asm volatile
 80049d6:	f3ef 8211 	mrs	r2, BASEPRI
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	617a      	str	r2, [r7, #20]
 80049ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80049ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d235      	bcs.n	8004a6e <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f004 f898 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004a14:	4601      	mov	r1, r0
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2060      	movs	r0, #96	; 0x60
 8004a1c:	f003 fb86 	bl	800812c <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d112      	bne.n	8004a58 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d016      	beq.n	8004a68 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	3324      	adds	r3, #36	; 0x24
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 fa20 	bl	8005e84 <xTaskRemoveFromEventList>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00e      	beq.n	8004a68 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e007      	b.n	8004a68 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	b25a      	sxtb	r2, r3
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6c:	e00b      	b.n	8004a86 <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	4618      	mov	r0, r3
 8004a72:	f004 f867 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004a76:	4601      	mov	r1, r0
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2060      	movs	r0, #96	; 0x60
 8004a7e:	f003 fb55 	bl	800812c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	637b      	str	r3, [r7, #52]	; 0x34
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f383 8811 	msr	BASEPRI, r3
}
 8004a90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3738      	adds	r7, #56	; 0x38
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b08f      	sub	sp, #60	; 0x3c
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <xQueueReceive+0x30>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	623b      	str	r3, [r7, #32]
}
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <xQueueReceive+0x3e>
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <xQueueReceive+0x42>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueReceive+0x44>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xQueueReceive+0x5e>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	61fb      	str	r3, [r7, #28]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004afa:	f001 fc27 	bl	800634c <xTaskGetSchedulerState>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <xQueueReceive+0x6e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <xQueueReceive+0x72>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueReceive+0x74>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <xQueueReceive+0x8e>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	61bb      	str	r3, [r7, #24]
}
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b2a:	f002 fb73 	bl	8007214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02f      	beq.n	8004b9a <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b3e:	f000 fb45 	bl	80051cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	4618      	mov	r0, r3
 8004b46:	f003 fffd 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	f003 fff9 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004b52:	4602      	mov	r2, r0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2101      	movs	r1, #1
 8004b58:	9100      	str	r1, [sp, #0]
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	205c      	movs	r0, #92	; 0x5c
 8004b5e:	f003 fbb5 	bl	80082cc <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	1e5a      	subs	r2, r3, #1
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00f      	beq.n	8004b92 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	3310      	adds	r3, #16
 8004b76:	4618      	mov	r0, r3
 8004b78:	f001 f984 	bl	8005e84 <xTaskRemoveFromEventList>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b82:	4b4d      	ldr	r3, [pc, #308]	; (8004cb8 <xQueueReceive+0x21c>)
 8004b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b92:	f002 fb6f 	bl	8007274 <vPortExitCritical>
				return pdPASS;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e08a      	b.n	8004cb0 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d113      	bne.n	8004bc8 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ba0:	f002 fb68 	bl	8007274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f003 ffcc 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004bac:	4604      	mov	r4, r0
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f003 ffc8 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	9100      	str	r1, [sp, #0]
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	205c      	movs	r0, #92	; 0x5c
 8004bc0:	f003 fb84 	bl	80082cc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e073      	b.n	8004cb0 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bce:	f107 0310 	add.w	r3, r7, #16
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fa24 	bl	8006020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bdc:	f002 fb4a 	bl	8007274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004be0:	f000 feba 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004be4:	f002 fb16 	bl	8007214 <vPortEnterCritical>
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bee:	b25b      	sxtb	r3, r3
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf4:	d103      	bne.n	8004bfe <xQueueReceive+0x162>
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c04:	b25b      	sxtb	r3, r3
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d103      	bne.n	8004c14 <xQueueReceive+0x178>
 8004c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c14:	f002 fb2e 	bl	8007274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c18:	1d3a      	adds	r2, r7, #4
 8004c1a:	f107 0310 	add.w	r3, r7, #16
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 fa13 	bl	800604c <xTaskCheckForTimeOut>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d124      	bne.n	8004c76 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c2e:	f000 fb45 	bl	80052bc <prvIsQueueEmpty>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d018      	beq.n	8004c6a <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	3324      	adds	r3, #36	; 0x24
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 f891 	bl	8005d68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c48:	f000 fae6 	bl	8005218 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c4c:	f000 fe92 	bl	8005974 <xTaskResumeAll>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f47f af69 	bne.w	8004b2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c58:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <xQueueReceive+0x21c>)
 8004c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	e75f      	b.n	8004b2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c6c:	f000 fad4 	bl	8005218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c70:	f000 fe80 	bl	8005974 <xTaskResumeAll>
 8004c74:	e759      	b.n	8004b2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c78:	f000 face 	bl	8005218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c7c:	f000 fe7a 	bl	8005974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c82:	f000 fb1b 	bl	80052bc <prvIsQueueEmpty>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f43f af4e 	beq.w	8004b2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	4618      	mov	r0, r3
 8004c92:	f003 ff57 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004c96:	4604      	mov	r4, r0
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f003 ff53 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	9100      	str	r1, [sp, #0]
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	205c      	movs	r0, #92	; 0x5c
 8004caa:	f003 fb0f 	bl	80082cc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004cae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3734      	adds	r7, #52	; 0x34
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd90      	pop	{r4, r7, pc}
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b091      	sub	sp, #68	; 0x44
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	623b      	str	r3, [r7, #32]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	61fb      	str	r3, [r7, #28]
}
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d0c:	f001 fb1e 	bl	800634c <xTaskGetSchedulerState>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <xQueueSemaphoreTake+0x60>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <xQueueSemaphoreTake+0x64>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <xQueueSemaphoreTake+0x66>
 8004d20:	2300      	movs	r3, #0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	61bb      	str	r3, [r7, #24]
}
 8004d38:	bf00      	nop
 8004d3a:	e7fe      	b.n	8004d3a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d3c:	f002 fa6a 	bl	8007214 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d034      	beq.n	8004db6 <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f003 fef8 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004d54:	4604      	mov	r4, r0
 8004d56:	2000      	movs	r0, #0
 8004d58:	f003 fef4 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2101      	movs	r1, #1
 8004d62:	9100      	str	r1, [sp, #0]
 8004d64:	4621      	mov	r1, r4
 8004d66:	205c      	movs	r0, #92	; 0x5c
 8004d68:	f003 fab0 	bl	80082cc <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	1e5a      	subs	r2, r3, #1
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004d7c:	f001 fc8e 	bl	800669c <pvTaskIncrementMutexHeldCount>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00f      	beq.n	8004dae <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	3310      	adds	r3, #16
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 f876 	bl	8005e84 <xTaskRemoveFromEventList>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d9e:	4b64      	ldr	r3, [pc, #400]	; (8004f30 <xQueueSemaphoreTake+0x274>)
 8004da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dae:	f002 fa61 	bl	8007274 <vPortExitCritical>
				return pdPASS;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e0b7      	b.n	8004f26 <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d121      	bne.n	8004e00 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	617b      	str	r3, [r7, #20]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004dd8:	f002 fa4c 	bl	8007274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dde:	4618      	mov	r0, r3
 8004de0:	f003 feb0 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004de4:	4604      	mov	r4, r0
 8004de6:	2000      	movs	r0, #0
 8004de8:	f003 feac 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004dec:	4602      	mov	r2, r0
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2101      	movs	r1, #1
 8004df2:	9100      	str	r1, [sp, #0]
 8004df4:	4621      	mov	r1, r4
 8004df6:	205c      	movs	r0, #92	; 0x5c
 8004df8:	f003 fa68 	bl	80082cc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e092      	b.n	8004f26 <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e06:	f107 030c 	add.w	r3, r7, #12
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 f908 	bl	8006020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e10:	2301      	movs	r3, #1
 8004e12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e14:	f002 fa2e 	bl	8007274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e18:	f000 fd9e 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e1c:	f002 f9fa 	bl	8007214 <vPortEnterCritical>
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e26:	b25b      	sxtb	r3, r3
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d103      	bne.n	8004e36 <xQueueSemaphoreTake+0x17a>
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3c:	b25b      	sxtb	r3, r3
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d103      	bne.n	8004e4c <xQueueSemaphoreTake+0x190>
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e4c:	f002 fa12 	bl	8007274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e50:	463a      	mov	r2, r7
 8004e52:	f107 030c 	add.w	r3, r7, #12
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 f8f7 	bl	800604c <xTaskCheckForTimeOut>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d132      	bne.n	8004eca <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e66:	f000 fa29 	bl	80052bc <prvIsQueueEmpty>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d026      	beq.n	8004ebe <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8004e78:	f002 f9cc 	bl	8007214 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 fa81 	bl	8006388 <xTaskPriorityInherit>
 8004e86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004e88:	f002 f9f4 	bl	8007274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8e:	3324      	adds	r3, #36	; 0x24
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	4611      	mov	r1, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 ff67 	bl	8005d68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e9c:	f000 f9bc 	bl	8005218 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ea0:	f000 fd68 	bl	8005974 <xTaskResumeAll>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f47f af48 	bne.w	8004d3c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <xQueueSemaphoreTake+0x274>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	e73e      	b.n	8004d3c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ec0:	f000 f9aa 	bl	8005218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ec4:	f000 fd56 	bl	8005974 <xTaskResumeAll>
 8004ec8:	e738      	b.n	8004d3c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ecc:	f000 f9a4 	bl	8005218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ed0:	f000 fd50 	bl	8005974 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ed6:	f000 f9f1 	bl	80052bc <prvIsQueueEmpty>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f43f af2d 	beq.w	8004d3c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00d      	beq.n	8004f04 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 8004ee8:	f002 f994 	bl	8007214 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004eec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eee:	f000 f8eb 	bl	80050c8 <prvGetDisinheritPriorityAfterTimeout>
 8004ef2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 fb2c 	bl	8006558 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f00:	f002 f9b8 	bl	8007274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	4618      	mov	r0, r3
 8004f08:	f003 fe1c 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f003 fe18 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004f14:	4602      	mov	r2, r0
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2101      	movs	r1, #1
 8004f1a:	9100      	str	r1, [sp, #0]
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	205c      	movs	r0, #92	; 0x5c
 8004f20:	f003 f9d4 	bl	80082cc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	373c      	adds	r7, #60	; 0x3c
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd90      	pop	{r4, r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f34:	b590      	push	{r4, r7, lr}
 8004f36:	b08f      	sub	sp, #60	; 0x3c
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	623b      	str	r3, [r7, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d103      	bne.n	8004f6e <xQueueReceiveFromISR+0x3a>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <xQueueReceiveFromISR+0x3e>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <xQueueReceiveFromISR+0x40>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	61fb      	str	r3, [r7, #28]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f8e:	f002 fa23 	bl	80073d8 <vPortValidateInterruptPriority>
	__asm volatile
 8004f92:	f3ef 8211 	mrs	r2, BASEPRI
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	61ba      	str	r2, [r7, #24]
 8004fa8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004faa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d03e      	beq.n	8005038 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f003 fdbc 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004fcc:	4604      	mov	r4, r0
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f003 fdb7 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4621      	mov	r1, r4
 8004fdc:	2062      	movs	r0, #98	; 0x62
 8004fde:	f003 f8ff 	bl	80081e0 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fe6:	f000 f8f1 	bl	80051cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ff2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d112      	bne.n	8005022 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d016      	beq.n	8005032 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	3310      	adds	r3, #16
 8005008:	4618      	mov	r0, r3
 800500a:	f000 ff3b 	bl	8005e84 <xTaskRemoveFromEventList>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00e      	beq.n	8005032 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e007      	b.n	8005032 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005026:	3301      	adds	r3, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	b25a      	sxtb	r2, r3
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005032:	2301      	movs	r3, #1
 8005034:	637b      	str	r3, [r7, #52]	; 0x34
 8005036:	e010      	b.n	800505a <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 8005038:	2300      	movs	r3, #0
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	4618      	mov	r0, r3
 8005040:	f003 fd80 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8005044:	4604      	mov	r4, r0
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4618      	mov	r0, r3
 800504a:	f003 fd7b 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 800504e:	4602      	mov	r2, r0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4621      	mov	r1, r4
 8005054:	2062      	movs	r0, #98	; 0x62
 8005056:	f003 f8c3 	bl	80081e0 <SEGGER_SYSVIEW_RecordU32x3>
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f383 8811 	msr	BASEPRI, r3
}
 8005064:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005068:	4618      	mov	r0, r3
 800506a:	373c      	adds	r7, #60	; 0x3c
 800506c:	46bd      	mov	sp, r7
 800506e:	bd90      	pop	{r4, r7, pc}

08005070 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <vQueueDelete+0x28>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	60bb      	str	r3, [r7, #8]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4618      	mov	r0, r3
 800509c:	f003 fd52 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4619      	mov	r1, r3
 80050a4:	205f      	movs	r0, #95	; 0x5f
 80050a6:	f003 f805 	bl	80080b4 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f966 	bl	800537c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d102      	bne.n	80050c0 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f002 fa98 	bl	80075f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d006      	beq.n	80050e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e001      	b.n	80050ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80050ea:	68fb      	ldr	r3, [r7, #12]
	}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10d      	bne.n	8005132 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d14d      	bne.n	80051ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	4618      	mov	r0, r3
 8005124:	f001 f9a2 	bl	800646c <xTaskPriorityDisinherit>
 8005128:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	e043      	b.n	80051ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d119      	bne.n	800516c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6858      	ldr	r0, [r3, #4]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	461a      	mov	r2, r3
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	f004 f8e8 	bl	8009318 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	441a      	add	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	d32b      	bcc.n	80051ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]
 800516a:	e026      	b.n	80051ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68d8      	ldr	r0, [r3, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	461a      	mov	r2, r3
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	f004 f8ce 	bl	8009318 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	425b      	negs	r3, r3
 8005186:	441a      	add	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d207      	bcs.n	80051a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	425b      	negs	r3, r3
 80051a2:	441a      	add	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d105      	bne.n	80051ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051c2:	697b      	ldr	r3, [r7, #20]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d018      	beq.n	8005210 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	441a      	add	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d303      	bcc.n	8005200 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68d9      	ldr	r1, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	461a      	mov	r2, r3
 800520a:	6838      	ldr	r0, [r7, #0]
 800520c:	f004 f884 	bl	8009318 <memcpy>
	}
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005220:	f001 fff8 	bl	8007214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800522a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800522c:	e011      	b.n	8005252 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d012      	beq.n	800525c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3324      	adds	r3, #36	; 0x24
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fe22 	bl	8005e84 <xTaskRemoveFromEventList>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005246:	f000 ff63 	bl	8006110 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	3b01      	subs	r3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005256:	2b00      	cmp	r3, #0
 8005258:	dce9      	bgt.n	800522e <prvUnlockQueue+0x16>
 800525a:	e000      	b.n	800525e <prvUnlockQueue+0x46>
					break;
 800525c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	22ff      	movs	r2, #255	; 0xff
 8005262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005266:	f002 f805 	bl	8007274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800526a:	f001 ffd3 	bl	8007214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005274:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005276:	e011      	b.n	800529c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d012      	beq.n	80052a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3310      	adds	r3, #16
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fdfd 	bl	8005e84 <xTaskRemoveFromEventList>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005290:	f000 ff3e 	bl	8006110 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005294:	7bbb      	ldrb	r3, [r7, #14]
 8005296:	3b01      	subs	r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800529c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dce9      	bgt.n	8005278 <prvUnlockQueue+0x60>
 80052a4:	e000      	b.n	80052a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	22ff      	movs	r2, #255	; 0xff
 80052ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052b0:	f001 ffe0 	bl	8007274 <vPortExitCritical>
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052c4:	f001 ffa6 	bl	8007214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d102      	bne.n	80052d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e001      	b.n	80052da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052da:	f001 ffcb 	bl	8007274 <vPortExitCritical>

	return xReturn;
 80052de:	68fb      	ldr	r3, [r7, #12]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052f0:	f001 ff90 	bl	8007214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d102      	bne.n	8005306 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005300:	2301      	movs	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e001      	b.n	800530a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800530a:	f001 ffb3 	bl	8007274 <vPortExitCritical>

	return xReturn;
 800530e:	68fb      	ldr	r3, [r7, #12]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e01e      	b.n	8005366 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005328:	4a13      	ldr	r2, [pc, #76]	; (8005378 <vQueueAddToRegistry+0x60>)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d115      	bne.n	8005360 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005334:	4910      	ldr	r1, [pc, #64]	; (8005378 <vQueueAddToRegistry+0x60>)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800533e:	4a0e      	ldr	r2, [pc, #56]	; (8005378 <vQueueAddToRegistry+0x60>)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4618      	mov	r0, r3
 800534e:	f003 fbf9 	bl	8008b44 <SEGGER_SYSVIEW_ShrinkId>
 8005352:	4601      	mov	r1, r0
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	2071      	movs	r0, #113	; 0x71
 800535a:	f002 fee7 	bl	800812c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800535e:	e006      	b.n	800536e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b07      	cmp	r3, #7
 800536a:	d9dd      	bls.n	8005328 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800536c:	bf00      	nop
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	200008a0 	.word	0x200008a0

0800537c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	e016      	b.n	80053b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800538a:	4a10      	ldr	r2, [pc, #64]	; (80053cc <vQueueUnregisterQueue+0x50>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d10b      	bne.n	80053b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800539a:	4a0c      	ldr	r2, [pc, #48]	; (80053cc <vQueueUnregisterQueue+0x50>)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2100      	movs	r1, #0
 80053a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80053a4:	4a09      	ldr	r2, [pc, #36]	; (80053cc <vQueueUnregisterQueue+0x50>)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	2200      	movs	r2, #0
 80053ae:	605a      	str	r2, [r3, #4]
				break;
 80053b0:	e006      	b.n	80053c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3301      	adds	r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b07      	cmp	r3, #7
 80053bc:	d9e5      	bls.n	800538a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	200008a0 	.word	0x200008a0

080053d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053e0:	f001 ff18 	bl	8007214 <vPortEnterCritical>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ea:	b25b      	sxtb	r3, r3
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d103      	bne.n	80053fa <vQueueWaitForMessageRestricted+0x2a>
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005400:	b25b      	sxtb	r3, r3
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d103      	bne.n	8005410 <vQueueWaitForMessageRestricted+0x40>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005410:	f001 ff30 	bl	8007274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	3324      	adds	r3, #36	; 0x24
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fcff 	bl	8005e28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800542a:	6978      	ldr	r0, [r7, #20]
 800542c:	f7ff fef4 	bl	8005218 <prvUnlockQueue>
	}
 8005430:	bf00      	nop
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08e      	sub	sp, #56	; 0x38
 800543c:	af04      	add	r7, sp, #16
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <xTaskCreateStatic+0x2a>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	623b      	str	r3, [r7, #32]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <xTaskCreateStatic+0x46>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	61fb      	str	r3, [r7, #28]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800547e:	23a8      	movs	r3, #168	; 0xa8
 8005480:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2ba8      	cmp	r3, #168	; 0xa8
 8005486:	d00a      	beq.n	800549e <xTaskCreateStatic+0x66>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	61bb      	str	r3, [r7, #24]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800549e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01e      	beq.n	80054e4 <xTaskCreateStatic+0xac>
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	2202      	movs	r2, #2
 80054ba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054be:	2300      	movs	r3, #0
 80054c0:	9303      	str	r3, [sp, #12]
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	9302      	str	r3, [sp, #8]
 80054c6:	f107 0314 	add.w	r3, r7, #20
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f850 	bl	800557c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054de:	f000 f8f3 	bl	80056c8 <prvAddNewTaskToReadyList>
 80054e2:	e001      	b.n	80054e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054e8:	697b      	ldr	r3, [r7, #20]
	}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3728      	adds	r7, #40	; 0x28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b08c      	sub	sp, #48	; 0x30
 80054f6:	af04      	add	r7, sp, #16
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	603b      	str	r3, [r7, #0]
 80054fe:	4613      	mov	r3, r2
 8005500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4618      	mov	r0, r3
 8005508:	f001 ffa6 	bl	8007458 <pvPortMalloc>
 800550c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00e      	beq.n	8005532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005514:	20a8      	movs	r0, #168	; 0xa8
 8005516:	f001 ff9f 	bl	8007458 <pvPortMalloc>
 800551a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
 8005528:	e005      	b.n	8005536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800552a:	6978      	ldr	r0, [r7, #20]
 800552c:	f002 f860 	bl	80075f0 <vPortFree>
 8005530:	e001      	b.n	8005536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d017      	beq.n	800556c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	2300      	movs	r3, #0
 8005548:	9303      	str	r3, [sp, #12]
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	9302      	str	r3, [sp, #8]
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f80e 	bl	800557c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005560:	69f8      	ldr	r0, [r7, #28]
 8005562:	f000 f8b1 	bl	80056c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005566:	2301      	movs	r3, #1
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	e002      	b.n	8005572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005572:	69bb      	ldr	r3, [r7, #24]
	}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	461a      	mov	r2, r3
 8005594:	21a5      	movs	r1, #165	; 0xa5
 8005596:	f003 fe3a 	bl	800920e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055a4:	3b01      	subs	r3, #1
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f023 0307 	bic.w	r3, r3, #7
 80055b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	617b      	str	r3, [r7, #20]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01f      	beq.n	800561a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	e012      	b.n	8005606 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	7819      	ldrb	r1, [r3, #0]
 80055e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	3334      	adds	r3, #52	; 0x34
 80055f0:	460a      	mov	r2, r1
 80055f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d006      	beq.n	800560e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	3301      	adds	r3, #1
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b0f      	cmp	r3, #15
 800560a:	d9e9      	bls.n	80055e0 <prvInitialiseNewTask+0x64>
 800560c:	e000      	b.n	8005610 <prvInitialiseNewTask+0x94>
			{
				break;
 800560e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005618:	e003      	b.n	8005622 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	2b37      	cmp	r3, #55	; 0x37
 8005626:	d901      	bls.n	800562c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005628:	2337      	movs	r3, #55	; 0x37
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005630:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005636:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	2200      	movs	r2, #0
 800563c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	3304      	adds	r3, #4
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fd72 	bl	800412c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	3318      	adds	r3, #24
 800564c:	4618      	mov	r0, r3
 800564e:	f7fe fd6d 	bl	800412c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005656:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	2200      	movs	r2, #0
 8005674:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	3354      	adds	r3, #84	; 0x54
 800567c:	224c      	movs	r2, #76	; 0x4c
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f003 fdc4 	bl	800920e <memset>
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	4a0c      	ldr	r2, [pc, #48]	; (80056bc <prvInitialiseNewTask+0x140>)
 800568a:	659a      	str	r2, [r3, #88]	; 0x58
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	4a0c      	ldr	r2, [pc, #48]	; (80056c0 <prvInitialiseNewTask+0x144>)
 8005690:	65da      	str	r2, [r3, #92]	; 0x5c
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	4a0b      	ldr	r2, [pc, #44]	; (80056c4 <prvInitialiseNewTask+0x148>)
 8005696:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	69b8      	ldr	r0, [r7, #24]
 800569e:	f001 fc8d 	bl	8006fbc <pxPortInitialiseStack>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b4:	bf00      	nop
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	200055b0 	.word	0x200055b0
 80056c0:	20005618 	.word	0x20005618
 80056c4:	20005680 	.word	0x20005680

080056c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056d0:	f001 fda0 	bl	8007214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056d4:	4b3c      	ldr	r3, [pc, #240]	; (80057c8 <prvAddNewTaskToReadyList+0x100>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3301      	adds	r3, #1
 80056da:	4a3b      	ldr	r2, [pc, #236]	; (80057c8 <prvAddNewTaskToReadyList+0x100>)
 80056dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056de:	4b3b      	ldr	r3, [pc, #236]	; (80057cc <prvAddNewTaskToReadyList+0x104>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056e6:	4a39      	ldr	r2, [pc, #228]	; (80057cc <prvAddNewTaskToReadyList+0x104>)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056ec:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <prvAddNewTaskToReadyList+0x100>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d110      	bne.n	8005716 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056f4:	f000 fd30 	bl	8006158 <prvInitialiseTaskLists>
 80056f8:	e00d      	b.n	8005716 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056fa:	4b35      	ldr	r3, [pc, #212]	; (80057d0 <prvAddNewTaskToReadyList+0x108>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005702:	4b32      	ldr	r3, [pc, #200]	; (80057cc <prvAddNewTaskToReadyList+0x104>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	429a      	cmp	r2, r3
 800570e:	d802      	bhi.n	8005716 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005710:	4a2e      	ldr	r2, [pc, #184]	; (80057cc <prvAddNewTaskToReadyList+0x104>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005716:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <prvAddNewTaskToReadyList+0x10c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3301      	adds	r3, #1
 800571c:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <prvAddNewTaskToReadyList+0x10c>)
 800571e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005720:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <prvAddNewTaskToReadyList+0x10c>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d016      	beq.n	800575c <prvAddNewTaskToReadyList+0x94>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4618      	mov	r0, r3
 8005732:	f003 f941 	bl	80089b8 <SEGGER_SYSVIEW_OnTaskCreate>
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	461d      	mov	r5, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	461c      	mov	r4, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	1ae3      	subs	r3, r4, r3
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	462b      	mov	r3, r5
 8005758:	f003 fcc0 	bl	80090dc <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4618      	mov	r0, r3
 8005760:	f003 f9ae 	bl	8008ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <prvAddNewTaskToReadyList+0x110>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d903      	bls.n	8005778 <prvAddNewTaskToReadyList+0xb0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <prvAddNewTaskToReadyList+0x110>)
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4a15      	ldr	r2, [pc, #84]	; (80057dc <prvAddNewTaskToReadyList+0x114>)
 8005786:	441a      	add	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f7fe fcd9 	bl	8004146 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005794:	f001 fd6e 	bl	8007274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005798:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <prvAddNewTaskToReadyList+0x108>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00e      	beq.n	80057be <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <prvAddNewTaskToReadyList+0x104>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d207      	bcs.n	80057be <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057ae:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <prvAddNewTaskToReadyList+0x118>)
 80057b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bdb0      	pop	{r4, r5, r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000db4 	.word	0x20000db4
 80057cc:	200008e0 	.word	0x200008e0
 80057d0:	20000dc0 	.word	0x20000dc0
 80057d4:	20000dd0 	.word	0x20000dd0
 80057d8:	20000dbc 	.word	0x20000dbc
 80057dc:	200008e4 	.word	0x200008e4
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01b      	beq.n	800582e <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057f6:	4b15      	ldr	r3, [pc, #84]	; (800584c <vTaskDelay+0x68>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <vTaskDelay+0x30>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60bb      	str	r3, [r7, #8]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005814:	f000 f8a0 	bl	8005958 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	2023      	movs	r0, #35	; 0x23
 800581c:	f002 fc4a 	bl	80080b4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005820:	2100      	movs	r1, #0
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 ff4e 	bl	80066c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005828:	f000 f8a4 	bl	8005974 <xTaskResumeAll>
 800582c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d107      	bne.n	8005844 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <vTaskDelay+0x6c>)
 8005836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000ddc 	.word	0x20000ddc
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	; 0x28
 8005858:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005862:	463a      	mov	r2, r7
 8005864:	1d39      	adds	r1, r7, #4
 8005866:	f107 0308 	add.w	r3, r7, #8
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe fa1c 	bl	8003ca8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	9202      	str	r2, [sp, #8]
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	2300      	movs	r3, #0
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	2300      	movs	r3, #0
 8005880:	460a      	mov	r2, r1
 8005882:	492d      	ldr	r1, [pc, #180]	; (8005938 <vTaskStartScheduler+0xe4>)
 8005884:	482d      	ldr	r0, [pc, #180]	; (800593c <vTaskStartScheduler+0xe8>)
 8005886:	f7ff fdd7 	bl	8005438 <xTaskCreateStatic>
 800588a:	4603      	mov	r3, r0
 800588c:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <vTaskStartScheduler+0xec>)
 800588e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005890:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <vTaskStartScheduler+0xec>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005898:	2301      	movs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e001      	b.n	80058a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d102      	bne.n	80058ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058a8:	f000 ff60 	bl	800676c <xTimerCreateTimerTask>
 80058ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d12e      	bne.n	8005912 <vTaskStartScheduler+0xbe>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	613b      	str	r3, [r7, #16]
}
 80058c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <vTaskStartScheduler+0xf0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3354      	adds	r3, #84	; 0x54
 80058ce:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <vTaskStartScheduler+0xf4>)
 80058d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d2:	4b1e      	ldr	r3, [pc, #120]	; (800594c <vTaskStartScheduler+0xf8>)
 80058d4:	f04f 32ff 	mov.w	r2, #4294967295
 80058d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058da:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <vTaskStartScheduler+0xfc>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058e0:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <vTaskStartScheduler+0x100>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80058e6:	4b17      	ldr	r3, [pc, #92]	; (8005944 <vTaskStartScheduler+0xf0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3334      	adds	r3, #52	; 0x34
 80058ec:	2205      	movs	r2, #5
 80058ee:	4912      	ldr	r1, [pc, #72]	; (8005938 <vTaskStartScheduler+0xe4>)
 80058f0:	4618      	mov	r0, r3
 80058f2:	f003 fc7c 	bl	80091ee <memcmp>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <vTaskStartScheduler+0xb4>
 80058fc:	4b11      	ldr	r3, [pc, #68]	; (8005944 <vTaskStartScheduler+0xf0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f003 f89b 	bl	8008a3c <SEGGER_SYSVIEW_OnTaskStartExec>
 8005906:	e001      	b.n	800590c <vTaskStartScheduler+0xb8>
 8005908:	f003 f83a 	bl	8008980 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800590c:	f001 fbe0 	bl	80070d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005910:	e00e      	b.n	8005930 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d10a      	bne.n	8005930 <vTaskStartScheduler+0xdc>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	60fb      	str	r3, [r7, #12]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <vTaskStartScheduler+0xda>
}
 8005930:	bf00      	nop
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	0800947c 	.word	0x0800947c
 800593c:	08006129 	.word	0x08006129
 8005940:	20000dd8 	.word	0x20000dd8
 8005944:	200008e0 	.word	0x200008e0
 8005948:	2000005c 	.word	0x2000005c
 800594c:	20000dd4 	.word	0x20000dd4
 8005950:	20000dc0 	.word	0x20000dc0
 8005954:	20000db8 	.word	0x20000db8

08005958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800595c:	4b04      	ldr	r3, [pc, #16]	; (8005970 <vTaskSuspendAll+0x18>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	4a03      	ldr	r2, [pc, #12]	; (8005970 <vTaskSuspendAll+0x18>)
 8005964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005966:	bf00      	nop
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000ddc 	.word	0x20000ddc

08005974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005982:	4b44      	ldr	r3, [pc, #272]	; (8005a94 <xTaskResumeAll+0x120>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059a0:	f001 fc38 	bl	8007214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059a4:	4b3b      	ldr	r3, [pc, #236]	; (8005a94 <xTaskResumeAll+0x120>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	4a3a      	ldr	r2, [pc, #232]	; (8005a94 <xTaskResumeAll+0x120>)
 80059ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ae:	4b39      	ldr	r3, [pc, #228]	; (8005a94 <xTaskResumeAll+0x120>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d166      	bne.n	8005a84 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059b6:	4b38      	ldr	r3, [pc, #224]	; (8005a98 <xTaskResumeAll+0x124>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d062      	beq.n	8005a84 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059be:	e033      	b.n	8005a28 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c0:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <xTaskResumeAll+0x128>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3318      	adds	r3, #24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fc17 	bl	8004200 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fc12 	bl	8004200 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4618      	mov	r0, r3
 80059e0:	f003 f86e 	bl	8008ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e8:	4b2d      	ldr	r3, [pc, #180]	; (8005aa0 <xTaskResumeAll+0x12c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d903      	bls.n	80059f8 <xTaskResumeAll+0x84>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	4a2a      	ldr	r2, [pc, #168]	; (8005aa0 <xTaskResumeAll+0x12c>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <xTaskResumeAll+0x130>)
 8005a06:	441a      	add	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7fe fb99 	bl	8004146 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <xTaskResumeAll+0x134>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8005a22:	4b22      	ldr	r3, [pc, #136]	; (8005aac <xTaskResumeAll+0x138>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <xTaskResumeAll+0x128>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1c7      	bne.n	80059c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a36:	f000 fc69 	bl	800630c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a3a:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <xTaskResumeAll+0x13c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d010      	beq.n	8005a68 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a46:	f000 f859 	bl	8005afc <xTaskIncrementTick>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8005a50:	4b16      	ldr	r3, [pc, #88]	; (8005aac <xTaskResumeAll+0x138>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f1      	bne.n	8005a46 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8005a62:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <xTaskResumeAll+0x13c>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a68:	4b10      	ldr	r3, [pc, #64]	; (8005aac <xTaskResumeAll+0x138>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d009      	beq.n	8005a84 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a70:	2301      	movs	r3, #1
 8005a72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <xTaskResumeAll+0x140>)
 8005a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a84:	f001 fbf6 	bl	8007274 <vPortExitCritical>

	return xAlreadyYielded;
 8005a88:	68bb      	ldr	r3, [r7, #8]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000ddc 	.word	0x20000ddc
 8005a98:	20000db4 	.word	0x20000db4
 8005a9c:	20000d74 	.word	0x20000d74
 8005aa0:	20000dbc 	.word	0x20000dbc
 8005aa4:	200008e4 	.word	0x200008e4
 8005aa8:	200008e0 	.word	0x200008e0
 8005aac:	20000dc8 	.word	0x20000dc8
 8005ab0:	20000dc4 	.word	0x20000dc4
 8005ab4:	e000ed04 	.word	0xe000ed04

08005ab8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005abe:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <xTaskGetTickCount+0x1c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ac4:	687b      	ldr	r3, [r7, #4]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	20000db8 	.word	0x20000db8

08005ad8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ade:	f001 fc7b 	bl	80073d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005ae6:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <xTaskGetTickCountFromISR+0x20>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005aec:	683b      	ldr	r3, [r7, #0]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000db8 	.word	0x20000db8

08005afc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b06:	4b51      	ldr	r3, [pc, #324]	; (8005c4c <xTaskIncrementTick+0x150>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f040 8093 	bne.w	8005c36 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b10:	4b4f      	ldr	r3, [pc, #316]	; (8005c50 <xTaskIncrementTick+0x154>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3301      	adds	r3, #1
 8005b16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b18:	4a4d      	ldr	r2, [pc, #308]	; (8005c50 <xTaskIncrementTick+0x154>)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d120      	bne.n	8005b66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b24:	4b4b      	ldr	r3, [pc, #300]	; (8005c54 <xTaskIncrementTick+0x158>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	603b      	str	r3, [r7, #0]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <xTaskIncrementTick+0x46>
 8005b44:	4b43      	ldr	r3, [pc, #268]	; (8005c54 <xTaskIncrementTick+0x158>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	4b43      	ldr	r3, [pc, #268]	; (8005c58 <xTaskIncrementTick+0x15c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a41      	ldr	r2, [pc, #260]	; (8005c54 <xTaskIncrementTick+0x158>)
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	4a41      	ldr	r2, [pc, #260]	; (8005c58 <xTaskIncrementTick+0x15c>)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	4b40      	ldr	r3, [pc, #256]	; (8005c5c <xTaskIncrementTick+0x160>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	4a3f      	ldr	r2, [pc, #252]	; (8005c5c <xTaskIncrementTick+0x160>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	f000 fbd3 	bl	800630c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b66:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <xTaskIncrementTick+0x164>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d34d      	bcc.n	8005c0c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b70:	4b38      	ldr	r3, [pc, #224]	; (8005c54 <xTaskIncrementTick+0x158>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7a:	4b39      	ldr	r3, [pc, #228]	; (8005c60 <xTaskIncrementTick+0x164>)
 8005b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b80:	601a      	str	r2, [r3, #0]
					break;
 8005b82:	e043      	b.n	8005c0c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b84:	4b33      	ldr	r3, [pc, #204]	; (8005c54 <xTaskIncrementTick+0x158>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d203      	bcs.n	8005ba4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b9c:	4a30      	ldr	r2, [pc, #192]	; (8005c60 <xTaskIncrementTick+0x164>)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ba2:	e033      	b.n	8005c0c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fb29 	bl	8004200 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	3318      	adds	r3, #24
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fb20 	bl	8004200 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f002 ff7c 	bl	8008ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <xTaskIncrementTick+0x168>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d903      	bls.n	8005bdc <xTaskIncrementTick+0xe0>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <xTaskIncrementTick+0x168>)
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <xTaskIncrementTick+0x16c>)
 8005bea:	441a      	add	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f7fe faa7 	bl	8004146 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <xTaskIncrementTick+0x170>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d3b4      	bcc.n	8005b70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005c06:	2301      	movs	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c0a:	e7b1      	b.n	8005b70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c0c:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <xTaskIncrementTick+0x170>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c12:	4915      	ldr	r1, [pc, #84]	; (8005c68 <xTaskIncrementTick+0x16c>)
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d901      	bls.n	8005c28 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005c24:	2301      	movs	r3, #1
 8005c26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005c28:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <xTaskIncrementTick+0x174>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d007      	beq.n	8005c40 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8005c30:	2301      	movs	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e004      	b.n	8005c40 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c36:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <xTaskIncrementTick+0x178>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	; (8005c74 <xTaskIncrementTick+0x178>)
 8005c3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c40:	697b      	ldr	r3, [r7, #20]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000ddc 	.word	0x20000ddc
 8005c50:	20000db8 	.word	0x20000db8
 8005c54:	20000d6c 	.word	0x20000d6c
 8005c58:	20000d70 	.word	0x20000d70
 8005c5c:	20000dcc 	.word	0x20000dcc
 8005c60:	20000dd4 	.word	0x20000dd4
 8005c64:	20000dbc 	.word	0x20000dbc
 8005c68:	200008e4 	.word	0x200008e4
 8005c6c:	200008e0 	.word	0x200008e0
 8005c70:	20000dc8 	.word	0x20000dc8
 8005c74:	20000dc4 	.word	0x20000dc4

08005c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c7e:	4b33      	ldr	r3, [pc, #204]	; (8005d4c <vTaskSwitchContext+0xd4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c86:	4b32      	ldr	r3, [pc, #200]	; (8005d50 <vTaskSwitchContext+0xd8>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c8c:	e059      	b.n	8005d42 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8005c8e:	4b30      	ldr	r3, [pc, #192]	; (8005d50 <vTaskSwitchContext+0xd8>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c94:	4b2f      	ldr	r3, [pc, #188]	; (8005d54 <vTaskSwitchContext+0xdc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e010      	b.n	8005cbe <vTaskSwitchContext+0x46>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	607b      	str	r3, [r7, #4]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <vTaskSwitchContext+0x3e>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	4926      	ldr	r1, [pc, #152]	; (8005d58 <vTaskSwitchContext+0xe0>)
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0e4      	beq.n	8005c9c <vTaskSwitchContext+0x24>
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <vTaskSwitchContext+0xe0>)
 8005cde:	4413      	add	r3, r2
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d104      	bne.n	8005d02 <vTaskSwitchContext+0x8a>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	605a      	str	r2, [r3, #4]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4a14      	ldr	r2, [pc, #80]	; (8005d5c <vTaskSwitchContext+0xe4>)
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	4a11      	ldr	r2, [pc, #68]	; (8005d54 <vTaskSwitchContext+0xdc>)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <vTaskSwitchContext+0xe4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3334      	adds	r3, #52	; 0x34
 8005d18:	2205      	movs	r2, #5
 8005d1a:	4911      	ldr	r1, [pc, #68]	; (8005d60 <vTaskSwitchContext+0xe8>)
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f003 fa66 	bl	80091ee <memcmp>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <vTaskSwitchContext+0xbc>
 8005d28:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <vTaskSwitchContext+0xe4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f002 fe85 	bl	8008a3c <SEGGER_SYSVIEW_OnTaskStartExec>
 8005d32:	e001      	b.n	8005d38 <vTaskSwitchContext+0xc0>
 8005d34:	f002 fe24 	bl	8008980 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <vTaskSwitchContext+0xe4>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3354      	adds	r3, #84	; 0x54
 8005d3e:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <vTaskSwitchContext+0xec>)
 8005d40:	6013      	str	r3, [r2, #0]
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000ddc 	.word	0x20000ddc
 8005d50:	20000dc8 	.word	0x20000dc8
 8005d54:	20000dbc 	.word	0x20000dbc
 8005d58:	200008e4 	.word	0x200008e4
 8005d5c:	200008e0 	.word	0x200008e0
 8005d60:	0800947c 	.word	0x0800947c
 8005d64:	2000005c 	.word	0x2000005c

08005d68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	60fb      	str	r3, [r7, #12]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <vTaskPlaceOnEventList+0x44>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3318      	adds	r3, #24
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fe f9f9 	bl	800418e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	6838      	ldr	r0, [r7, #0]
 8005da0:	f000 fc90 	bl	80066c4 <prvAddCurrentTaskToDelayedList>
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200008e0 	.word	0x200008e0

08005db0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	617b      	str	r3, [r7, #20]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005dd8:	4b11      	ldr	r3, [pc, #68]	; (8005e20 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	613b      	str	r3, [r7, #16]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e00:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3318      	adds	r3, #24
 8005e08:	4619      	mov	r1, r3
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7fe f99b 	bl	8004146 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e10:	2101      	movs	r1, #1
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fc56 	bl	80066c4 <prvAddCurrentTaskToDelayedList>
}
 8005e18:	bf00      	nop
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000ddc 	.word	0x20000ddc
 8005e24:	200008e0 	.word	0x200008e0

08005e28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	617b      	str	r3, [r7, #20]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <vTaskPlaceOnEventListRestricted+0x58>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3318      	adds	r3, #24
 8005e56:	4619      	mov	r1, r3
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7fe f974 	bl	8004146 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295
 8005e68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005e6a:	2024      	movs	r0, #36	; 0x24
 8005e6c:	f002 f904 	bl	8008078 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	68b8      	ldr	r0, [r7, #8]
 8005e74:	f000 fc26 	bl	80066c4 <prvAddCurrentTaskToDelayedList>
	}
 8005e78:	bf00      	nop
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	200008e0 	.word	0x200008e0

08005e84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60fb      	str	r3, [r7, #12]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3318      	adds	r3, #24
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe f9a3 	bl	8004200 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eba:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <xTaskRemoveFromEventList+0xb8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d121      	bne.n	8005f06 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe f99a 	bl	8004200 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f002 fdf6 	bl	8008ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <xTaskRemoveFromEventList+0xbc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d903      	bls.n	8005ee8 <xTaskRemoveFromEventList+0x64>
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <xTaskRemoveFromEventList+0xbc>)
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <xTaskRemoveFromEventList+0xc0>)
 8005ef6:	441a      	add	r2, r3
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7fe f921 	bl	8004146 <vListInsertEnd>
 8005f04:	e005      	b.n	8005f12 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	3318      	adds	r3, #24
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	480e      	ldr	r0, [pc, #56]	; (8005f48 <xTaskRemoveFromEventList+0xc4>)
 8005f0e:	f7fe f91a 	bl	8004146 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f16:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <xTaskRemoveFromEventList+0xc8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d905      	bls.n	8005f2c <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f20:	2301      	movs	r3, #1
 8005f22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f24:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <xTaskRemoveFromEventList+0xcc>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e001      	b.n	8005f30 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f30:	697b      	ldr	r3, [r7, #20]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000ddc 	.word	0x20000ddc
 8005f40:	20000dbc 	.word	0x20000dbc
 8005f44:	200008e4 	.word	0x200008e4
 8005f48:	20000d74 	.word	0x20000d74
 8005f4c:	200008e0 	.word	0x200008e0
 8005f50:	20000dc8 	.word	0x20000dc8

08005f54 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005f5e:	4b2b      	ldr	r3, [pc, #172]	; (800600c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	613b      	str	r3, [r7, #16]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	60fb      	str	r3, [r7, #12]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fe f929 	bl	8004200 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe f924 	bl	8004200 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f002 fd80 	bl	8008ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4b12      	ldr	r3, [pc, #72]	; (8006010 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d903      	bls.n	8005fd4 <vTaskRemoveFromUnorderedEventList+0x80>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005fe2:	441a      	add	r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f7fe f8ab 	bl	8004146 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4b08      	ldr	r3, [pc, #32]	; (8006018 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d902      	bls.n	8006004 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <vTaskRemoveFromUnorderedEventList+0xc8>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]
	}
}
 8006004:	bf00      	nop
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000ddc 	.word	0x20000ddc
 8006010:	20000dbc 	.word	0x20000dbc
 8006014:	200008e4 	.word	0x200008e4
 8006018:	200008e0 	.word	0x200008e0
 800601c:	20000dc8 	.word	0x20000dc8

08006020 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <vTaskInternalSetTimeOutState+0x24>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <vTaskInternalSetTimeOutState+0x28>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	605a      	str	r2, [r3, #4]
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	20000dcc 	.word	0x20000dcc
 8006048:	20000db8 	.word	0x20000db8

0800604c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	613b      	str	r3, [r7, #16]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	60fb      	str	r3, [r7, #12]
}
 800608a:	bf00      	nop
 800608c:	e7fe      	b.n	800608c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800608e:	f001 f8c1 	bl	8007214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006092:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <xTaskCheckForTimeOut+0xbc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d102      	bne.n	80060b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e023      	b.n	80060fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4b15      	ldr	r3, [pc, #84]	; (800610c <xTaskCheckForTimeOut+0xc0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d007      	beq.n	80060ce <xTaskCheckForTimeOut+0x82>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d302      	bcc.n	80060ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e015      	b.n	80060fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d20b      	bcs.n	80060f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff ff9b 	bl	8006020 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	e004      	b.n	80060fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060f6:	2301      	movs	r3, #1
 80060f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060fa:	f001 f8bb 	bl	8007274 <vPortExitCritical>

	return xReturn;
 80060fe:	69fb      	ldr	r3, [r7, #28]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20000db8 	.word	0x20000db8
 800610c:	20000dcc 	.word	0x20000dcc

08006110 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006114:	4b03      	ldr	r3, [pc, #12]	; (8006124 <vTaskMissedYield+0x14>)
 8006116:	2201      	movs	r2, #1
 8006118:	601a      	str	r2, [r3, #0]
}
 800611a:	bf00      	nop
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	20000dc8 	.word	0x20000dc8

08006128 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006130:	f000 f852 	bl	80061d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <prvIdleTask+0x28>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d9f9      	bls.n	8006130 <prvIdleTask+0x8>
			{
				taskYIELD();
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <prvIdleTask+0x2c>)
 800613e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800614c:	e7f0      	b.n	8006130 <prvIdleTask+0x8>
 800614e:	bf00      	nop
 8006150:	200008e4 	.word	0x200008e4
 8006154:	e000ed04 	.word	0xe000ed04

08006158 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800615e:	2300      	movs	r3, #0
 8006160:	607b      	str	r3, [r7, #4]
 8006162:	e00c      	b.n	800617e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <prvInitialiseTaskLists+0x60>)
 8006170:	4413      	add	r3, r2
 8006172:	4618      	mov	r0, r3
 8006174:	f7fd ffba 	bl	80040ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3301      	adds	r3, #1
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b37      	cmp	r3, #55	; 0x37
 8006182:	d9ef      	bls.n	8006164 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006184:	480d      	ldr	r0, [pc, #52]	; (80061bc <prvInitialiseTaskLists+0x64>)
 8006186:	f7fd ffb1 	bl	80040ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800618a:	480d      	ldr	r0, [pc, #52]	; (80061c0 <prvInitialiseTaskLists+0x68>)
 800618c:	f7fd ffae 	bl	80040ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006190:	480c      	ldr	r0, [pc, #48]	; (80061c4 <prvInitialiseTaskLists+0x6c>)
 8006192:	f7fd ffab 	bl	80040ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006196:	480c      	ldr	r0, [pc, #48]	; (80061c8 <prvInitialiseTaskLists+0x70>)
 8006198:	f7fd ffa8 	bl	80040ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800619c:	480b      	ldr	r0, [pc, #44]	; (80061cc <prvInitialiseTaskLists+0x74>)
 800619e:	f7fd ffa5 	bl	80040ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <prvInitialiseTaskLists+0x78>)
 80061a4:	4a05      	ldr	r2, [pc, #20]	; (80061bc <prvInitialiseTaskLists+0x64>)
 80061a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <prvInitialiseTaskLists+0x7c>)
 80061aa:	4a05      	ldr	r2, [pc, #20]	; (80061c0 <prvInitialiseTaskLists+0x68>)
 80061ac:	601a      	str	r2, [r3, #0]
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	200008e4 	.word	0x200008e4
 80061bc:	20000d44 	.word	0x20000d44
 80061c0:	20000d58 	.word	0x20000d58
 80061c4:	20000d74 	.word	0x20000d74
 80061c8:	20000d88 	.word	0x20000d88
 80061cc:	20000da0 	.word	0x20000da0
 80061d0:	20000d6c 	.word	0x20000d6c
 80061d4:	20000d70 	.word	0x20000d70

080061d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061de:	e019      	b.n	8006214 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061e0:	f001 f818 	bl	8007214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e4:	4b10      	ldr	r3, [pc, #64]	; (8006228 <prvCheckTasksWaitingTermination+0x50>)
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe f805 	bl	8004200 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061f6:	4b0d      	ldr	r3, [pc, #52]	; (800622c <prvCheckTasksWaitingTermination+0x54>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	4a0b      	ldr	r2, [pc, #44]	; (800622c <prvCheckTasksWaitingTermination+0x54>)
 80061fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <prvCheckTasksWaitingTermination+0x58>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3b01      	subs	r3, #1
 8006206:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <prvCheckTasksWaitingTermination+0x58>)
 8006208:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800620a:	f001 f833 	bl	8007274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f848 	bl	80062a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006214:	4b06      	ldr	r3, [pc, #24]	; (8006230 <prvCheckTasksWaitingTermination+0x58>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e1      	bne.n	80061e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000d88 	.word	0x20000d88
 800622c:	20000db4 	.word	0x20000db4
 8006230:	20000d9c 	.word	0x20000d9c

08006234 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006240:	e005      	b.n	800624e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3301      	adds	r3, #1
 8006246:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3301      	adds	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2ba5      	cmp	r3, #165	; 0xa5
 8006254:	d0f5      	beq.n	8006242 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	b29b      	uxth	r3, r3
	}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <uxTaskGetStackHighWaterMark+0x14>
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <uxTaskGetStackHighWaterMark+0x34>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	e000      	b.n	8006282 <uxTaskGetStackHighWaterMark+0x16>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800628a:	6938      	ldr	r0, [r7, #16]
 800628c:	f7ff ffd2 	bl	8006234 <prvTaskCheckFreeStackSpace>
 8006290:	4603      	mov	r3, r0
 8006292:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8006294:	68fb      	ldr	r3, [r7, #12]
	}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	200008e0 	.word	0x200008e0

080062a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3354      	adds	r3, #84	; 0x54
 80062b0:	4618      	mov	r0, r3
 80062b2:	f002 ffb5 	bl	8009220 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d108      	bne.n	80062d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 f993 	bl	80075f0 <vPortFree>
				vPortFree( pxTCB );
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 f990 	bl	80075f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062d0:	e018      	b.n	8006304 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d103      	bne.n	80062e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 f987 	bl	80075f0 <vPortFree>
	}
 80062e2:	e00f      	b.n	8006304 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d00a      	beq.n	8006304 <prvDeleteTCB+0x60>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60fb      	str	r3, [r7, #12]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <prvDeleteTCB+0x5e>
	}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <prvResetNextTaskUnblockTime+0x38>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <prvResetNextTaskUnblockTime+0x3c>)
 800631e:	f04f 32ff 	mov.w	r2, #4294967295
 8006322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006324:	e008      	b.n	8006338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006326:	4b07      	ldr	r3, [pc, #28]	; (8006344 <prvResetNextTaskUnblockTime+0x38>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4a04      	ldr	r2, [pc, #16]	; (8006348 <prvResetNextTaskUnblockTime+0x3c>)
 8006336:	6013      	str	r3, [r2, #0]
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	20000d6c 	.word	0x20000d6c
 8006348:	20000dd4 	.word	0x20000dd4

0800634c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <xTaskGetSchedulerState+0x34>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800635a:	2301      	movs	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	e008      	b.n	8006372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006360:	4b08      	ldr	r3, [pc, #32]	; (8006384 <xTaskGetSchedulerState+0x38>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006368:	2302      	movs	r3, #2
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	e001      	b.n	8006372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006372:	687b      	ldr	r3, [r7, #4]
	}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000dc0 	.word	0x20000dc0
 8006384:	20000ddc 	.word	0x20000ddc

08006388 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d05a      	beq.n	8006454 <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	4b2f      	ldr	r3, [pc, #188]	; (8006460 <xTaskPriorityInherit+0xd8>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d24a      	bcs.n	8006442 <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	db06      	blt.n	80063c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b4:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <xTaskPriorityInherit+0xd8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6959      	ldr	r1, [r3, #20]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4a24      	ldr	r2, [pc, #144]	; (8006464 <xTaskPriorityInherit+0xdc>)
 80063d4:	4413      	add	r3, r2
 80063d6:	4299      	cmp	r1, r3
 80063d8:	d126      	bne.n	8006428 <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	3304      	adds	r3, #4
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fd ff0e 	bl	8004200 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063e4:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <xTaskPriorityInherit+0xd8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f002 fb65 	bl	8008ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fa:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <xTaskPriorityInherit+0xe0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d903      	bls.n	800640a <xTaskPriorityInherit+0x82>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	4a18      	ldr	r2, [pc, #96]	; (8006468 <xTaskPriorityInherit+0xe0>)
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4a13      	ldr	r2, [pc, #76]	; (8006464 <xTaskPriorityInherit+0xdc>)
 8006418:	441a      	add	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	3304      	adds	r3, #4
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f7fd fe90 	bl	8004146 <vListInsertEnd>
 8006426:	e004      	b.n	8006432 <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006428:	4b0d      	ldr	r3, [pc, #52]	; (8006460 <xTaskPriorityInherit+0xd8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4619      	mov	r1, r3
 8006436:	2049      	movs	r0, #73	; 0x49
 8006438:	f001 fe3c 	bl	80080b4 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e008      	b.n	8006454 <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <xTaskPriorityInherit+0xd8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	429a      	cmp	r2, r3
 800644e:	d201      	bcs.n	8006454 <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006454:	68fb      	ldr	r3, [r7, #12]
	}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200008e0 	.word	0x200008e0
 8006464:	200008e4 	.word	0x200008e4
 8006468:	20000dbc 	.word	0x20000dbc

0800646c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d05f      	beq.n	8006542 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006482:	4b32      	ldr	r3, [pc, #200]	; (800654c <xTaskPriorityDisinherit+0xe0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	d00a      	beq.n	80064a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60fb      	str	r3, [r7, #12]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10a      	bne.n	80064c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60bb      	str	r3, [r7, #8]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c4:	1e5a      	subs	r2, r3, #1
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d035      	beq.n	8006542 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d131      	bne.n	8006542 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fd fe8c 	bl	8004200 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4619      	mov	r1, r3
 80064ec:	204a      	movs	r0, #74	; 0x4a
 80064ee:	f001 fde1 	bl	80080b4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4618      	mov	r0, r3
 800650a:	f002 fad9 	bl	8008ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <xTaskPriorityDisinherit+0xe4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d903      	bls.n	8006522 <xTaskPriorityDisinherit+0xb6>
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <xTaskPriorityDisinherit+0xe4>)
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4a09      	ldr	r2, [pc, #36]	; (8006554 <xTaskPriorityDisinherit+0xe8>)
 8006530:	441a      	add	r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3304      	adds	r3, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fd fe04 	bl	8004146 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800653e:	2301      	movs	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006542:	697b      	ldr	r3, [r7, #20]
	}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	200008e0 	.word	0x200008e0
 8006550:	20000dbc 	.word	0x20000dbc
 8006554:	200008e4 	.word	0x200008e4

08006558 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006566:	2301      	movs	r3, #1
 8006568:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d073      	beq.n	8006658 <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	60fb      	str	r3, [r7, #12]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d902      	bls.n	800659e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	e002      	b.n	80065a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d054      	beq.n	8006658 <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d14f      	bne.n	8006658 <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80065b8:	4b29      	ldr	r3, [pc, #164]	; (8006660 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d10a      	bne.n	80065d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60bb      	str	r3, [r7, #8]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4619      	mov	r1, r3
 80065dc:	204a      	movs	r0, #74	; 0x4a
 80065de:	f001 fd69 	bl	80080b4 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	db04      	blt.n	8006600 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	6959      	ldr	r1, [r3, #20]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4a15      	ldr	r2, [pc, #84]	; (8006664 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006610:	4413      	add	r3, r2
 8006612:	4299      	cmp	r1, r3
 8006614:	d120      	bne.n	8006658 <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	3304      	adds	r3, #4
 800661a:	4618      	mov	r0, r3
 800661c:	f7fd fdf0 	bl	8004200 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	4618      	mov	r0, r3
 8006624:	f002 fa4c 	bl	8008ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662c:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d903      	bls.n	800663c <vTaskPriorityDisinheritAfterTimeout+0xe4>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	4a0b      	ldr	r2, [pc, #44]	; (8006668 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800664a:	441a      	add	r2, r3
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	3304      	adds	r3, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f7fd fd77 	bl	8004146 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006658:	bf00      	nop
 800665a:	3720      	adds	r7, #32
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	200008e0 	.word	0x200008e0
 8006664:	200008e4 	.word	0x200008e4
 8006668:	20000dbc 	.word	0x20000dbc

0800666c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <uxTaskResetEventItemValue+0x2c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <uxTaskResetEventItemValue+0x2c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <uxTaskResetEventItemValue+0x2c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006688:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800668a:	687b      	ldr	r3, [r7, #4]
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	200008e0 	.word	0x200008e0

0800669c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80066a0:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ae:	3201      	adds	r2, #1
 80066b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80066b2:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80066b4:	681b      	ldr	r3, [r3, #0]
	}
 80066b6:	4618      	mov	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	200008e0 	.word	0x200008e0

080066c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066ce:	4b21      	ldr	r3, [pc, #132]	; (8006754 <prvAddCurrentTaskToDelayedList+0x90>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066d4:	4b20      	ldr	r3, [pc, #128]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3304      	adds	r3, #4
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fd fd90 	bl	8004200 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e6:	d10a      	bne.n	80066fe <prvAddCurrentTaskToDelayedList+0x3a>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ee:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4619      	mov	r1, r3
 80066f6:	4819      	ldr	r0, [pc, #100]	; (800675c <prvAddCurrentTaskToDelayedList+0x98>)
 80066f8:	f7fd fd25 	bl	8004146 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066fc:	e026      	b.n	800674c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	429a      	cmp	r2, r3
 8006714:	d209      	bcs.n	800672a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4b0f      	ldr	r3, [pc, #60]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fd fd33 	bl	800418e <vListInsert>
}
 8006728:	e010      	b.n	800674c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800672a:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <prvAddCurrentTaskToDelayedList+0xa0>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <prvAddCurrentTaskToDelayedList+0x94>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3304      	adds	r3, #4
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7fd fd29 	bl	800418e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <prvAddCurrentTaskToDelayedList+0xa4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	429a      	cmp	r2, r3
 8006744:	d202      	bcs.n	800674c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6013      	str	r3, [r2, #0]
}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000db8 	.word	0x20000db8
 8006758:	200008e0 	.word	0x200008e0
 800675c:	20000da0 	.word	0x20000da0
 8006760:	20000d70 	.word	0x20000d70
 8006764:	20000d6c 	.word	0x20000d6c
 8006768:	20000dd4 	.word	0x20000dd4

0800676c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	; 0x28
 8006770:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006776:	f000 fba1 	bl	8006ebc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800677a:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <xTimerCreateTimerTask+0x80>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d021      	beq.n	80067c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800678a:	1d3a      	adds	r2, r7, #4
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	f107 030c 	add.w	r3, r7, #12
 8006794:	4618      	mov	r0, r3
 8006796:	f7fd faa1 	bl	8003cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	9202      	str	r2, [sp, #8]
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	2302      	movs	r3, #2
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	2300      	movs	r3, #0
 80067aa:	460a      	mov	r2, r1
 80067ac:	4910      	ldr	r1, [pc, #64]	; (80067f0 <xTimerCreateTimerTask+0x84>)
 80067ae:	4811      	ldr	r0, [pc, #68]	; (80067f4 <xTimerCreateTimerTask+0x88>)
 80067b0:	f7fe fe42 	bl	8005438 <xTaskCreateStatic>
 80067b4:	4603      	mov	r3, r0
 80067b6:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <xTimerCreateTimerTask+0x8c>)
 80067b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <xTimerCreateTimerTask+0x8c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80067c2:	2301      	movs	r3, #1
 80067c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	613b      	str	r3, [r7, #16]
}
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80067e2:	697b      	ldr	r3, [r7, #20]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000e10 	.word	0x20000e10
 80067f0:	08009484 	.word	0x08009484
 80067f4:	08006a65 	.word	0x08006a65
 80067f8:	20000e14 	.word	0x20000e14

080067fc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af02      	add	r7, sp, #8
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800680a:	202c      	movs	r0, #44	; 0x2c
 800680c:	f000 fe24 	bl	8007458 <pvPortMalloc>
 8006810:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00d      	beq.n	8006834 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f843 	bl	80068ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006834:	697b      	ldr	r3, [r7, #20]
	}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800683e:	b580      	push	{r7, lr}
 8006840:	b08a      	sub	sp, #40	; 0x28
 8006842:	af02      	add	r7, sp, #8
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
 800684a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800684c:	232c      	movs	r3, #44	; 0x2c
 800684e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b2c      	cmp	r3, #44	; 0x2c
 8006854:	d00a      	beq.n	800686c <xTimerCreateStatic+0x2e>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	61bb      	str	r3, [r7, #24]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800686c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <xTimerCreateStatic+0x4c>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	617b      	str	r3, [r7, #20]
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00d      	beq.n	80068b0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f805 	bl	80068ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80068b0:	69fb      	ldr	r3, [r7, #28]
	}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b086      	sub	sp, #24
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	617b      	str	r3, [r7, #20]
}
 80068e0:	bf00      	nop
 80068e2:	e7fe      	b.n	80068e2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01e      	beq.n	8006928 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80068ea:	f000 fae7 	bl	8006ebc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	6a3a      	ldr	r2, [r7, #32]
 8006904:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	3304      	adds	r3, #4
 800690a:	4618      	mov	r0, r3
 800690c:	f7fd fc0e 	bl	800412c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800691c:	f043 0304 	orr.w	r3, r3, #4
 8006920:	b2da      	uxtb	r2, r3
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006928:	bf00      	nop
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08a      	sub	sp, #40	; 0x28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800693e:	2300      	movs	r3, #0
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	623b      	str	r3, [r7, #32]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800695e:	4b1a      	ldr	r3, [pc, #104]	; (80069c8 <xTimerGenericCommand+0x98>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d02a      	beq.n	80069bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b05      	cmp	r3, #5
 8006976:	dc18      	bgt.n	80069aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006978:	f7ff fce8 	bl	800634c <xTaskGetSchedulerState>
 800697c:	4603      	mov	r3, r0
 800697e:	2b02      	cmp	r3, #2
 8006980:	d109      	bne.n	8006996 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006982:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <xTimerGenericCommand+0x98>)
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	f107 0110 	add.w	r1, r7, #16
 800698a:	2300      	movs	r3, #0
 800698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698e:	f7fd fe0f 	bl	80045b0 <xQueueGenericSend>
 8006992:	6278      	str	r0, [r7, #36]	; 0x24
 8006994:	e012      	b.n	80069bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <xTimerGenericCommand+0x98>)
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	f107 0110 	add.w	r1, r7, #16
 800699e:	2300      	movs	r3, #0
 80069a0:	2200      	movs	r2, #0
 80069a2:	f7fd fe05 	bl	80045b0 <xQueueGenericSend>
 80069a6:	6278      	str	r0, [r7, #36]	; 0x24
 80069a8:	e008      	b.n	80069bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <xTimerGenericCommand+0x98>)
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	f107 0110 	add.w	r1, r7, #16
 80069b2:	2300      	movs	r3, #0
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	f7fd ff21 	bl	80047fc <xQueueGenericSendFromISR>
 80069ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3728      	adds	r7, #40	; 0x28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000e10 	.word	0x20000e10

080069cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d6:	4b22      	ldr	r3, [pc, #136]	; (8006a60 <prvProcessExpiredTimer+0x94>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fd fc0b 	bl	8004200 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d022      	beq.n	8006a3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	18d1      	adds	r1, r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	6978      	ldr	r0, [r7, #20]
 8006a06:	f000 f8d1 	bl	8006bac <prvInsertTimerInActiveList>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01f      	beq.n	8006a50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a10:	2300      	movs	r3, #0
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	2300      	movs	r3, #0
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	2100      	movs	r1, #0
 8006a1a:	6978      	ldr	r0, [r7, #20]
 8006a1c:	f7ff ff88 	bl	8006930 <xTimerGenericCommand>
 8006a20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d113      	bne.n	8006a50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	60fb      	str	r3, [r7, #12]
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	6978      	ldr	r0, [r7, #20]
 8006a56:	4798      	blx	r3
}
 8006a58:	bf00      	nop
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000e08 	.word	0x20000e08

08006a64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a6c:	f107 0308 	add.w	r3, r7, #8
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 f857 	bl	8006b24 <prvGetNextExpireTime>
 8006a76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f803 	bl	8006a88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a82:	f000 f8d5 	bl	8006c30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a86:	e7f1      	b.n	8006a6c <prvTimerTask+0x8>

08006a88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a92:	f7fe ff61 	bl	8005958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a96:	f107 0308 	add.w	r3, r7, #8
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 f866 	bl	8006b6c <prvSampleTimeNow>
 8006aa0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d130      	bne.n	8006b0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <prvProcessTimerOrBlockTask+0x3c>
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d806      	bhi.n	8006ac4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ab6:	f7fe ff5d 	bl	8005974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ff85 	bl	80069cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ac2:	e024      	b.n	8006b0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006aca:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <prvProcessTimerOrBlockTask+0x90>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <prvProcessTimerOrBlockTask+0x50>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <prvProcessTimerOrBlockTask+0x52>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006adc:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <prvProcessTimerOrBlockTask+0x94>)
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f7fe fc71 	bl	80053d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006aee:	f7fe ff41 	bl	8005974 <xTaskResumeAll>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006af8:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <prvProcessTimerOrBlockTask+0x98>)
 8006afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	f3bf 8f6f 	isb	sy
}
 8006b08:	e001      	b.n	8006b0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b0a:	f7fe ff33 	bl	8005974 <xTaskResumeAll>
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20000e0c 	.word	0x20000e0c
 8006b1c:	20000e10 	.word	0x20000e10
 8006b20:	e000ed04 	.word	0xe000ed04

08006b24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <prvGetNextExpireTime+0x44>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <prvGetNextExpireTime+0x16>
 8006b36:	2201      	movs	r2, #1
 8006b38:	e000      	b.n	8006b3c <prvGetNextExpireTime+0x18>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d105      	bne.n	8006b54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b48:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <prvGetNextExpireTime+0x44>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	e001      	b.n	8006b58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b58:	68fb      	ldr	r3, [r7, #12]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000e08 	.word	0x20000e08

08006b6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b74:	f7fe ffa0 	bl	8005ab8 <xTaskGetTickCount>
 8006b78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <prvSampleTimeNow+0x3c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d205      	bcs.n	8006b90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b84:	f000 f936 	bl	8006df4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	e002      	b.n	8006b96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b96:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <prvSampleTimeNow+0x3c>)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000e18 	.word	0x20000e18

08006bac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d812      	bhi.n	8006bf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d302      	bcc.n	8006be6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e01b      	b.n	8006c1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <prvInsertTimerInActiveList+0x7c>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f7fd facc 	bl	800418e <vListInsert>
 8006bf6:	e012      	b.n	8006c1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d206      	bcs.n	8006c0e <prvInsertTimerInActiveList+0x62>
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d302      	bcc.n	8006c0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	e007      	b.n	8006c1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c0e:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <prvInsertTimerInActiveList+0x80>)
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f7fd fab8 	bl	800418e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c1e:	697b      	ldr	r3, [r7, #20]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20000e0c 	.word	0x20000e0c
 8006c2c:	20000e08 	.word	0x20000e08

08006c30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08e      	sub	sp, #56	; 0x38
 8006c34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c36:	e0ca      	b.n	8006dce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	da18      	bge.n	8006c70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c3e:	1d3b      	adds	r3, r7, #4
 8006c40:	3304      	adds	r3, #4
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10a      	bne.n	8006c60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	61fb      	str	r3, [r7, #28]
}
 8006c5c:	bf00      	nop
 8006c5e:	e7fe      	b.n	8006c5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c66:	6850      	ldr	r0, [r2, #4]
 8006c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6a:	6892      	ldr	r2, [r2, #8]
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f2c0 80ab 	blt.w	8006dce <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	3304      	adds	r3, #4
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fd fab9 	bl	8004200 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c8e:	463b      	mov	r3, r7
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff ff6b 	bl	8006b6c <prvSampleTimeNow>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b09      	cmp	r3, #9
 8006c9c:	f200 8096 	bhi.w	8006dcc <prvProcessReceivedCommands+0x19c>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <prvProcessReceivedCommands+0x78>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cd1 	.word	0x08006cd1
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006cd1 	.word	0x08006cd1
 8006cb4:	08006d45 	.word	0x08006d45
 8006cb8:	08006d59 	.word	0x08006d59
 8006cbc:	08006da3 	.word	0x08006da3
 8006cc0:	08006cd1 	.word	0x08006cd1
 8006cc4:	08006cd1 	.word	0x08006cd1
 8006cc8:	08006d45 	.word	0x08006d45
 8006ccc:	08006d59 	.word	0x08006d59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cd6:	f043 0301 	orr.w	r3, r3, #1
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	18d1      	adds	r1, r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf0:	f7ff ff5c 	bl	8006bac <prvInsertTimerInActiveList>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d069      	beq.n	8006dce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d05e      	beq.n	8006dce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	441a      	add	r2, r3
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	2100      	movs	r1, #0
 8006d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d22:	f7ff fe05 	bl	8006930 <xTimerGenericCommand>
 8006d26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d14f      	bne.n	8006dce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	61bb      	str	r3, [r7, #24]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d4a:	f023 0301 	bic.w	r3, r3, #1
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d56:	e03a      	b.n	8006dce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	617b      	str	r3, [r7, #20]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	18d1      	adds	r1, r2, r3
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d9c:	f7ff ff06 	bl	8006bac <prvInsertTimerInActiveList>
					break;
 8006da0:	e015      	b.n	8006dce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db2:	f000 fc1d 	bl	80075f0 <vPortFree>
 8006db6:	e00a      	b.n	8006dce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006dca:	e000      	b.n	8006dce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006dcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dce:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <prvProcessReceivedCommands+0x1c0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	1d39      	adds	r1, r7, #4
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fd fe60 	bl	8004a9c <xQueueReceive>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f47f af2a 	bne.w	8006c38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	3730      	adds	r7, #48	; 0x30
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000e10 	.word	0x20000e10

08006df4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dfa:	e048      	b.n	8006e8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dfc:	4b2d      	ldr	r3, [pc, #180]	; (8006eb4 <prvSwitchTimerLists+0xc0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e06:	4b2b      	ldr	r3, [pc, #172]	; (8006eb4 <prvSwitchTimerLists+0xc0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fd f9f3 	bl	8004200 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d02e      	beq.n	8006e8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4413      	add	r3, r2
 8006e38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d90e      	bls.n	8006e60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e4e:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <prvSwitchTimerLists+0xc0>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3304      	adds	r3, #4
 8006e56:	4619      	mov	r1, r3
 8006e58:	4610      	mov	r0, r2
 8006e5a:	f7fd f998 	bl	800418e <vListInsert>
 8006e5e:	e016      	b.n	8006e8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e60:	2300      	movs	r3, #0
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	2300      	movs	r3, #0
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	2100      	movs	r1, #0
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fd60 	bl	8006930 <xTimerGenericCommand>
 8006e70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	603b      	str	r3, [r7, #0]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <prvSwitchTimerLists+0xc0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1b1      	bne.n	8006dfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e98:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <prvSwitchTimerLists+0xc0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <prvSwitchTimerLists+0xc4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <prvSwitchTimerLists+0xc0>)
 8006ea4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ea6:	4a04      	ldr	r2, [pc, #16]	; (8006eb8 <prvSwitchTimerLists+0xc4>)
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	6013      	str	r3, [r2, #0]
}
 8006eac:	bf00      	nop
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000e08 	.word	0x20000e08
 8006eb8:	20000e0c 	.word	0x20000e0c

08006ebc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ec2:	f000 f9a7 	bl	8007214 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ec6:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <prvCheckForValidListAndQueue+0x60>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d120      	bne.n	8006f10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ece:	4814      	ldr	r0, [pc, #80]	; (8006f20 <prvCheckForValidListAndQueue+0x64>)
 8006ed0:	f7fd f90c 	bl	80040ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ed4:	4813      	ldr	r0, [pc, #76]	; (8006f24 <prvCheckForValidListAndQueue+0x68>)
 8006ed6:	f7fd f909 	bl	80040ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <prvCheckForValidListAndQueue+0x6c>)
 8006edc:	4a10      	ldr	r2, [pc, #64]	; (8006f20 <prvCheckForValidListAndQueue+0x64>)
 8006ede:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ee0:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <prvCheckForValidListAndQueue+0x70>)
 8006ee2:	4a10      	ldr	r2, [pc, #64]	; (8006f24 <prvCheckForValidListAndQueue+0x68>)
 8006ee4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <prvCheckForValidListAndQueue+0x74>)
 8006eec:	4a11      	ldr	r2, [pc, #68]	; (8006f34 <prvCheckForValidListAndQueue+0x78>)
 8006eee:	2110      	movs	r1, #16
 8006ef0:	200a      	movs	r0, #10
 8006ef2:	f7fd fa17 	bl	8004324 <xQueueGenericCreateStatic>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <prvCheckForValidListAndQueue+0x60>)
 8006efa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006efc:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <prvCheckForValidListAndQueue+0x60>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <prvCheckForValidListAndQueue+0x60>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	490b      	ldr	r1, [pc, #44]	; (8006f38 <prvCheckForValidListAndQueue+0x7c>)
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe fa04 	bl	8005318 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f10:	f000 f9b0 	bl	8007274 <vPortExitCritical>
}
 8006f14:	bf00      	nop
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000e10 	.word	0x20000e10
 8006f20:	20000de0 	.word	0x20000de0
 8006f24:	20000df4 	.word	0x20000df4
 8006f28:	20000e08 	.word	0x20000e08
 8006f2c:	20000e0c 	.word	0x20000e0c
 8006f30:	20000ebc 	.word	0x20000ebc
 8006f34:	20000e1c 	.word	0x20000e1c
 8006f38:	0800948c 	.word	0x0800948c

08006f3c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	60fb      	str	r3, [r7, #12]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006f64:	f000 f956 	bl	8007214 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006f6e:	f000 f981 	bl	8007274 <vPortExitCritical>

	return pvReturn;
 8006f72:	693b      	ldr	r3, [r7, #16]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006f8a:	f06f 0301 	mvn.w	r3, #1
 8006f8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <xTimerPendFunctionCallFromISR+0x3c>)
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	f107 0114 	add.w	r1, r7, #20
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	f7fd fc28 	bl	80047fc <xQueueGenericSendFromISR>
 8006fac:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3728      	adds	r7, #40	; 0x28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000e10 	.word	0x20000e10

08006fbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3b04      	subs	r3, #4
 8006fcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3b04      	subs	r3, #4
 8006fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f023 0201 	bic.w	r2, r3, #1
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3b04      	subs	r3, #4
 8006fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fec:	4a0c      	ldr	r2, [pc, #48]	; (8007020 <pxPortInitialiseStack+0x64>)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3b14      	subs	r3, #20
 8006ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3b04      	subs	r3, #4
 8007002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f06f 0202 	mvn.w	r2, #2
 800700a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3b20      	subs	r3, #32
 8007010:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007012:	68fb      	ldr	r3, [r7, #12]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	08007025 	.word	0x08007025

08007024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800702e:	4b12      	ldr	r3, [pc, #72]	; (8007078 <prvTaskExitError+0x54>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d00a      	beq.n	800704e <prvTaskExitError+0x2a>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	60fb      	str	r3, [r7, #12]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <prvTaskExitError+0x28>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	60bb      	str	r3, [r7, #8]
}
 8007060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007062:	bf00      	nop
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0fc      	beq.n	8007064 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800706a:	bf00      	nop
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	2000000c 	.word	0x2000000c
 800707c:	00000000 	.word	0x00000000

08007080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <pxCurrentTCBConst2>)
 8007082:	6819      	ldr	r1, [r3, #0]
 8007084:	6808      	ldr	r0, [r1, #0]
 8007086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708a:	f380 8809 	msr	PSP, r0
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8811 	msr	BASEPRI, r0
 800709a:	4770      	bx	lr
 800709c:	f3af 8000 	nop.w

080070a0 <pxCurrentTCBConst2>:
 80070a0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop

080070a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070a8:	4808      	ldr	r0, [pc, #32]	; (80070cc <prvPortStartFirstTask+0x24>)
 80070aa:	6800      	ldr	r0, [r0, #0]
 80070ac:	6800      	ldr	r0, [r0, #0]
 80070ae:	f380 8808 	msr	MSP, r0
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	f380 8814 	msr	CONTROL, r0
 80070ba:	b662      	cpsie	i
 80070bc:	b661      	cpsie	f
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	df00      	svc	0
 80070c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ca:	bf00      	nop
 80070cc:	e000ed08 	.word	0xe000ed08

080070d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070d6:	4b46      	ldr	r3, [pc, #280]	; (80071f0 <xPortStartScheduler+0x120>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a46      	ldr	r2, [pc, #280]	; (80071f4 <xPortStartScheduler+0x124>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10a      	bne.n	80070f6 <xPortStartScheduler+0x26>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070f6:	4b3e      	ldr	r3, [pc, #248]	; (80071f0 <xPortStartScheduler+0x120>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a3f      	ldr	r2, [pc, #252]	; (80071f8 <xPortStartScheduler+0x128>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d10a      	bne.n	8007116 <xPortStartScheduler+0x46>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60fb      	str	r3, [r7, #12]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007116:	4b39      	ldr	r3, [pc, #228]	; (80071fc <xPortStartScheduler+0x12c>)
 8007118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	22ff      	movs	r2, #255	; 0xff
 8007126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007138:	b2da      	uxtb	r2, r3
 800713a:	4b31      	ldr	r3, [pc, #196]	; (8007200 <xPortStartScheduler+0x130>)
 800713c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800713e:	4b31      	ldr	r3, [pc, #196]	; (8007204 <xPortStartScheduler+0x134>)
 8007140:	2207      	movs	r2, #7
 8007142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007144:	e009      	b.n	800715a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007146:	4b2f      	ldr	r3, [pc, #188]	; (8007204 <xPortStartScheduler+0x134>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3b01      	subs	r3, #1
 800714c:	4a2d      	ldr	r2, [pc, #180]	; (8007204 <xPortStartScheduler+0x134>)
 800714e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	b2db      	uxtb	r3, r3
 8007158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007162:	2b80      	cmp	r3, #128	; 0x80
 8007164:	d0ef      	beq.n	8007146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007166:	4b27      	ldr	r3, [pc, #156]	; (8007204 <xPortStartScheduler+0x134>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f1c3 0307 	rsb	r3, r3, #7
 800716e:	2b04      	cmp	r3, #4
 8007170:	d00a      	beq.n	8007188 <xPortStartScheduler+0xb8>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60bb      	str	r3, [r7, #8]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007188:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <xPortStartScheduler+0x134>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <xPortStartScheduler+0x134>)
 8007190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007192:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <xPortStartScheduler+0x134>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800719a:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <xPortStartScheduler+0x134>)
 800719c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071a6:	4b18      	ldr	r3, [pc, #96]	; (8007208 <xPortStartScheduler+0x138>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a17      	ldr	r2, [pc, #92]	; (8007208 <xPortStartScheduler+0x138>)
 80071ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071b2:	4b15      	ldr	r3, [pc, #84]	; (8007208 <xPortStartScheduler+0x138>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a14      	ldr	r2, [pc, #80]	; (8007208 <xPortStartScheduler+0x138>)
 80071b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071be:	f000 f8dd 	bl	800737c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071c2:	4b12      	ldr	r3, [pc, #72]	; (800720c <xPortStartScheduler+0x13c>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071c8:	f000 f8fc 	bl	80073c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071cc:	4b10      	ldr	r3, [pc, #64]	; (8007210 <xPortStartScheduler+0x140>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a0f      	ldr	r2, [pc, #60]	; (8007210 <xPortStartScheduler+0x140>)
 80071d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071d8:	f7ff ff66 	bl	80070a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071dc:	f7fe fd4c 	bl	8005c78 <vTaskSwitchContext>
	prvTaskExitError();
 80071e0:	f7ff ff20 	bl	8007024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	e000ed00 	.word	0xe000ed00
 80071f4:	410fc271 	.word	0x410fc271
 80071f8:	410fc270 	.word	0x410fc270
 80071fc:	e000e400 	.word	0xe000e400
 8007200:	20000f0c 	.word	0x20000f0c
 8007204:	20000f10 	.word	0x20000f10
 8007208:	e000ed20 	.word	0xe000ed20
 800720c:	2000000c 	.word	0x2000000c
 8007210:	e000ef34 	.word	0xe000ef34

08007214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	607b      	str	r3, [r7, #4]
}
 800722c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800722e:	4b0f      	ldr	r3, [pc, #60]	; (800726c <vPortEnterCritical+0x58>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3301      	adds	r3, #1
 8007234:	4a0d      	ldr	r2, [pc, #52]	; (800726c <vPortEnterCritical+0x58>)
 8007236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007238:	4b0c      	ldr	r3, [pc, #48]	; (800726c <vPortEnterCritical+0x58>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d10f      	bne.n	8007260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <vPortEnterCritical+0x5c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <vPortEnterCritical+0x4c>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	603b      	str	r3, [r7, #0]
}
 800725c:	bf00      	nop
 800725e:	e7fe      	b.n	800725e <vPortEnterCritical+0x4a>
	}
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	2000000c 	.word	0x2000000c
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800727a:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <vPortExitCritical+0x50>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <vPortExitCritical+0x24>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	607b      	str	r3, [r7, #4]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007298:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <vPortExitCritical+0x50>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3b01      	subs	r3, #1
 800729e:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <vPortExitCritical+0x50>)
 80072a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072a2:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <vPortExitCritical+0x50>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d105      	bne.n	80072b6 <vPortExitCritical+0x42>
 80072aa:	2300      	movs	r3, #0
 80072ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	f383 8811 	msr	BASEPRI, r3
}
 80072b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072b6:	bf00      	nop
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	2000000c 	.word	0x2000000c
	...

080072d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072d0:	f3ef 8009 	mrs	r0, PSP
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	4b15      	ldr	r3, [pc, #84]	; (8007330 <pxCurrentTCBConst>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	f01e 0f10 	tst.w	lr, #16
 80072e0:	bf08      	it	eq
 80072e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ea:	6010      	str	r0, [r2, #0]
 80072ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072f4:	f380 8811 	msr	BASEPRI, r0
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f7fe fcba 	bl	8005c78 <vTaskSwitchContext>
 8007304:	f04f 0000 	mov.w	r0, #0
 8007308:	f380 8811 	msr	BASEPRI, r0
 800730c:	bc09      	pop	{r0, r3}
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	6808      	ldr	r0, [r1, #0]
 8007312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007316:	f01e 0f10 	tst.w	lr, #16
 800731a:	bf08      	it	eq
 800731c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007320:	f380 8809 	msr	PSP, r0
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w

08007330 <pxCurrentTCBConst>:
 8007330:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop

08007338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	607b      	str	r3, [r7, #4]
}
 8007350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007352:	f7fe fbd3 	bl	8005afc <xTaskIncrementTick>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800735c:	4b06      	ldr	r3, [pc, #24]	; (8007378 <xPortSysTickHandler+0x40>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	2300      	movs	r3, #0
 8007366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	f383 8811 	msr	BASEPRI, r3
}
 800736e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <vPortSetupTimerInterrupt+0x34>)
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007386:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <vPortSetupTimerInterrupt+0x38>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <vPortSetupTimerInterrupt+0x3c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <vPortSetupTimerInterrupt+0x40>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	099b      	lsrs	r3, r3, #6
 8007398:	4a09      	ldr	r2, [pc, #36]	; (80073c0 <vPortSetupTimerInterrupt+0x44>)
 800739a:	3b01      	subs	r3, #1
 800739c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800739e:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <vPortSetupTimerInterrupt+0x34>)
 80073a0:	2207      	movs	r2, #7
 80073a2:	601a      	str	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	e000e010 	.word	0xe000e010
 80073b4:	e000e018 	.word	0xe000e018
 80073b8:	20000000 	.word	0x20000000
 80073bc:	10624dd3 	.word	0x10624dd3
 80073c0:	e000e014 	.word	0xe000e014

080073c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073d4 <vPortEnableVFP+0x10>
 80073c8:	6801      	ldr	r1, [r0, #0]
 80073ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ce:	6001      	str	r1, [r0, #0]
 80073d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073d2:	bf00      	nop
 80073d4:	e000ed88 	.word	0xe000ed88

080073d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073de:	f3ef 8305 	mrs	r3, IPSR
 80073e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b0f      	cmp	r3, #15
 80073e8:	d914      	bls.n	8007414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073ea:	4a17      	ldr	r2, [pc, #92]	; (8007448 <vPortValidateInterruptPriority+0x70>)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073f4:	4b15      	ldr	r3, [pc, #84]	; (800744c <vPortValidateInterruptPriority+0x74>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	7afa      	ldrb	r2, [r7, #11]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d20a      	bcs.n	8007414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	607b      	str	r3, [r7, #4]
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007414:	4b0e      	ldr	r3, [pc, #56]	; (8007450 <vPortValidateInterruptPriority+0x78>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800741c:	4b0d      	ldr	r3, [pc, #52]	; (8007454 <vPortValidateInterruptPriority+0x7c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d90a      	bls.n	800743a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	603b      	str	r3, [r7, #0]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <vPortValidateInterruptPriority+0x60>
	}
 800743a:	bf00      	nop
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	e000e3f0 	.word	0xe000e3f0
 800744c:	20000f0c 	.word	0x20000f0c
 8007450:	e000ed0c 	.word	0xe000ed0c
 8007454:	20000f10 	.word	0x20000f10

08007458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007464:	f7fe fa78 	bl	8005958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007468:	4b5b      	ldr	r3, [pc, #364]	; (80075d8 <pvPortMalloc+0x180>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007470:	f000 f920 	bl	80076b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007474:	4b59      	ldr	r3, [pc, #356]	; (80075dc <pvPortMalloc+0x184>)
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4013      	ands	r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	f040 8093 	bne.w	80075a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01d      	beq.n	80074c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007488:	2208      	movs	r2, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	2b00      	cmp	r3, #0
 8007498:	d014      	beq.n	80074c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f023 0307 	bic.w	r3, r3, #7
 80074a0:	3308      	adds	r3, #8
 80074a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <pvPortMalloc+0x6c>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	617b      	str	r3, [r7, #20]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d06e      	beq.n	80075a8 <pvPortMalloc+0x150>
 80074ca:	4b45      	ldr	r3, [pc, #276]	; (80075e0 <pvPortMalloc+0x188>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d869      	bhi.n	80075a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074d4:	4b43      	ldr	r3, [pc, #268]	; (80075e4 <pvPortMalloc+0x18c>)
 80074d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074d8:	4b42      	ldr	r3, [pc, #264]	; (80075e4 <pvPortMalloc+0x18c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074de:	e004      	b.n	80074ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d903      	bls.n	80074fc <pvPortMalloc+0xa4>
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f1      	bne.n	80074e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074fc:	4b36      	ldr	r3, [pc, #216]	; (80075d8 <pvPortMalloc+0x180>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007502:	429a      	cmp	r2, r3
 8007504:	d050      	beq.n	80075a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2208      	movs	r2, #8
 800750c:	4413      	add	r3, r2
 800750e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	2308      	movs	r3, #8
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	429a      	cmp	r2, r3
 8007526:	d91f      	bls.n	8007568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <pvPortMalloc+0xf8>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	613b      	str	r3, [r7, #16]
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	1ad2      	subs	r2, r2, r3
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007562:	69b8      	ldr	r0, [r7, #24]
 8007564:	f000 f908 	bl	8007778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007568:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <pvPortMalloc+0x188>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	4a1b      	ldr	r2, [pc, #108]	; (80075e0 <pvPortMalloc+0x188>)
 8007574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007576:	4b1a      	ldr	r3, [pc, #104]	; (80075e0 <pvPortMalloc+0x188>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <pvPortMalloc+0x190>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d203      	bcs.n	800758a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007582:	4b17      	ldr	r3, [pc, #92]	; (80075e0 <pvPortMalloc+0x188>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a18      	ldr	r2, [pc, #96]	; (80075e8 <pvPortMalloc+0x190>)
 8007588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	4b13      	ldr	r3, [pc, #76]	; (80075dc <pvPortMalloc+0x184>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	431a      	orrs	r2, r3
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800759e:	4b13      	ldr	r3, [pc, #76]	; (80075ec <pvPortMalloc+0x194>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a11      	ldr	r2, [pc, #68]	; (80075ec <pvPortMalloc+0x194>)
 80075a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075a8:	f7fe f9e4 	bl	8005974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <pvPortMalloc+0x174>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60fb      	str	r3, [r7, #12]
}
 80075c8:	bf00      	nop
 80075ca:	e7fe      	b.n	80075ca <pvPortMalloc+0x172>
	return pvReturn;
 80075cc:	69fb      	ldr	r3, [r7, #28]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3728      	adds	r7, #40	; 0x28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20004b1c 	.word	0x20004b1c
 80075dc:	20004b30 	.word	0x20004b30
 80075e0:	20004b20 	.word	0x20004b20
 80075e4:	20004b14 	.word	0x20004b14
 80075e8:	20004b24 	.word	0x20004b24
 80075ec:	20004b28 	.word	0x20004b28

080075f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d04d      	beq.n	800769e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007602:	2308      	movs	r3, #8
 8007604:	425b      	negs	r3, r3
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4413      	add	r3, r2
 800760a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	4b24      	ldr	r3, [pc, #144]	; (80076a8 <vPortFree+0xb8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4013      	ands	r3, r2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10a      	bne.n	8007634 <vPortFree+0x44>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	60fb      	str	r3, [r7, #12]
}
 8007630:	bf00      	nop
 8007632:	e7fe      	b.n	8007632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <vPortFree+0x62>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	60bb      	str	r3, [r7, #8]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <vPortFree+0xb8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4013      	ands	r3, r2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01e      	beq.n	800769e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d11a      	bne.n	800769e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	4b0e      	ldr	r3, [pc, #56]	; (80076a8 <vPortFree+0xb8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	43db      	mvns	r3, r3
 8007672:	401a      	ands	r2, r3
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007678:	f7fe f96e 	bl	8005958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <vPortFree+0xbc>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4413      	add	r3, r2
 8007686:	4a09      	ldr	r2, [pc, #36]	; (80076ac <vPortFree+0xbc>)
 8007688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800768a:	6938      	ldr	r0, [r7, #16]
 800768c:	f000 f874 	bl	8007778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007690:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <vPortFree+0xc0>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3301      	adds	r3, #1
 8007696:	4a06      	ldr	r2, [pc, #24]	; (80076b0 <vPortFree+0xc0>)
 8007698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800769a:	f7fe f96b 	bl	8005974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800769e:	bf00      	nop
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20004b30 	.word	0x20004b30
 80076ac:	20004b20 	.word	0x20004b20
 80076b0:	20004b2c 	.word	0x20004b2c

080076b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80076be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076c0:	4b27      	ldr	r3, [pc, #156]	; (8007760 <prvHeapInit+0xac>)
 80076c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00c      	beq.n	80076e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3307      	adds	r3, #7
 80076d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0307 	bic.w	r3, r3, #7
 80076da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	4a1f      	ldr	r2, [pc, #124]	; (8007760 <prvHeapInit+0xac>)
 80076e4:	4413      	add	r3, r2
 80076e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076ec:	4a1d      	ldr	r2, [pc, #116]	; (8007764 <prvHeapInit+0xb0>)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076f2:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <prvHeapInit+0xb0>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	4413      	add	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007700:	2208      	movs	r2, #8
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	1a9b      	subs	r3, r3, r2
 8007706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0307 	bic.w	r3, r3, #7
 800770e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4a15      	ldr	r2, [pc, #84]	; (8007768 <prvHeapInit+0xb4>)
 8007714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <prvHeapInit+0xb4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2200      	movs	r2, #0
 800771c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800771e:	4b12      	ldr	r3, [pc, #72]	; (8007768 <prvHeapInit+0xb4>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	1ad2      	subs	r2, r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007734:	4b0c      	ldr	r3, [pc, #48]	; (8007768 <prvHeapInit+0xb4>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	4a0a      	ldr	r2, [pc, #40]	; (800776c <prvHeapInit+0xb8>)
 8007742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	4a09      	ldr	r2, [pc, #36]	; (8007770 <prvHeapInit+0xbc>)
 800774a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <prvHeapInit+0xc0>)
 800774e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007752:	601a      	str	r2, [r3, #0]
}
 8007754:	bf00      	nop
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	20000f14 	.word	0x20000f14
 8007764:	20004b14 	.word	0x20004b14
 8007768:	20004b1c 	.word	0x20004b1c
 800776c:	20004b24 	.word	0x20004b24
 8007770:	20004b20 	.word	0x20004b20
 8007774:	20004b30 	.word	0x20004b30

08007778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007780:	4b28      	ldr	r3, [pc, #160]	; (8007824 <prvInsertBlockIntoFreeList+0xac>)
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e002      	b.n	800778c <prvInsertBlockIntoFreeList+0x14>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d8f7      	bhi.n	8007786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	4413      	add	r3, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d108      	bne.n	80077ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	441a      	add	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	441a      	add	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d118      	bne.n	8007800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b15      	ldr	r3, [pc, #84]	; (8007828 <prvInsertBlockIntoFreeList+0xb0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d00d      	beq.n	80077f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	441a      	add	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	e008      	b.n	8007808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077f6:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <prvInsertBlockIntoFreeList+0xb0>)
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	e003      	b.n	8007808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d002      	beq.n	8007816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20004b14 	.word	0x20004b14
 8007828:	20004b1c 	.word	0x20004b1c

0800782c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007832:	4b24      	ldr	r3, [pc, #144]	; (80078c4 <_DoInit+0x98>)
 8007834:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2203      	movs	r2, #3
 800783a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2203      	movs	r2, #3
 8007840:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a20      	ldr	r2, [pc, #128]	; (80078c8 <_DoInit+0x9c>)
 8007846:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a20      	ldr	r2, [pc, #128]	; (80078cc <_DoInit+0xa0>)
 800784c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007854:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <_DoInit+0x9c>)
 800786c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a17      	ldr	r2, [pc, #92]	; (80078d0 <_DoInit+0xa4>)
 8007872:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2210      	movs	r2, #16
 8007878:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3307      	adds	r3, #7
 8007890:	4a10      	ldr	r2, [pc, #64]	; (80078d4 <_DoInit+0xa8>)
 8007892:	6810      	ldr	r0, [r2, #0]
 8007894:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007896:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a0e      	ldr	r2, [pc, #56]	; (80078d8 <_DoInit+0xac>)
 800789e:	6810      	ldr	r0, [r2, #0]
 80078a0:	6018      	str	r0, [r3, #0]
 80078a2:	8891      	ldrh	r1, [r2, #4]
 80078a4:	7992      	ldrb	r2, [r2, #6]
 80078a6:	8099      	strh	r1, [r3, #4]
 80078a8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80078aa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80078b4:	f3bf 8f5f 	dmb	sy
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	20004b34 	.word	0x20004b34
 80078c8:	08009494 	.word	0x08009494
 80078cc:	20004bdc 	.word	0x20004bdc
 80078d0:	20004fdc 	.word	0x20004fdc
 80078d4:	080094a0 	.word	0x080094a0
 80078d8:	080094a4 	.word	0x080094a4

080078dc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08c      	sub	sp, #48	; 0x30
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80078e8:	4b3e      	ldr	r3, [pc, #248]	; (80079e4 <SEGGER_RTT_ReadNoLock+0x108>)
 80078ea:	623b      	str	r3, [r7, #32]
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <SEGGER_RTT_ReadNoLock+0x1e>
 80078f6:	f7ff ff99 	bl	800782c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4613      	mov	r3, r2
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	4413      	add	r3, r2
 8007902:	00db      	lsls	r3, r3, #3
 8007904:	3360      	adds	r3, #96	; 0x60
 8007906:	4a37      	ldr	r2, [pc, #220]	; (80079e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8007908:	4413      	add	r3, r2
 800790a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800791c:	2300      	movs	r3, #0
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	429a      	cmp	r2, r3
 8007926:	d92b      	bls.n	8007980 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4293      	cmp	r3, r2
 8007938:	bf28      	it	cs
 800793a:	4613      	movcs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	4413      	add	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	6939      	ldr	r1, [r7, #16]
 800794c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800794e:	f001 fce3 	bl	8009318 <memcpy>
    NumBytesRead += NumBytesRem;
 8007952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4413      	add	r3, r2
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800795a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	4413      	add	r3, r2
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800796a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	4413      	add	r3, r2
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007978:	429a      	cmp	r2, r3
 800797a:	d101      	bne.n	8007980 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800797c:	2300      	movs	r3, #0
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4293      	cmp	r3, r2
 800798e:	bf28      	it	cs
 8007990:	4613      	movcs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d019      	beq.n	80079ce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	4413      	add	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	6939      	ldr	r1, [r7, #16]
 80079a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079aa:	f001 fcb5 	bl	8009318 <memcpy>
    NumBytesRead += NumBytesRem;
 80079ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	4413      	add	r3, r2
 80079b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80079b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4413      	add	r3, r2
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80079c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	4413      	add	r3, r2
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3730      	adds	r7, #48	; 0x30
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20004b34 	.word	0x20004b34

080079e8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80079f6:	4b3d      	ldr	r3, [pc, #244]	; (8007aec <SEGGER_RTT_AllocUpBuffer+0x104>)
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007a04:	f7ff ff12 	bl	800782c <_DoInit>
  SEGGER_RTT_LOCK();
 8007a08:	f3ef 8311 	mrs	r3, BASEPRI
 8007a0c:	f04f 0120 	mov.w	r1, #32
 8007a10:	f381 8811 	msr	BASEPRI, r1
 8007a14:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007a16:	4b35      	ldr	r3, [pc, #212]	; (8007aec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007a18:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8007a1e:	6939      	ldr	r1, [r7, #16]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	4613      	mov	r3, r2
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	4413      	add	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	440b      	add	r3, r1
 8007a2e:	3304      	adds	r3, #4
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d008      	beq.n	8007a48 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	dbeb      	blt.n	8007a1e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007a46:	e000      	b.n	8007a4a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007a48:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	da3f      	bge.n	8007ad4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007a54:	6939      	ldr	r1, [r7, #16]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	4413      	add	r3, r2
 8007a60:	00db      	lsls	r3, r3, #3
 8007a62:	440b      	add	r3, r1
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007a68:	6939      	ldr	r1, [r7, #16]
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	4613      	mov	r3, r2
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	4413      	add	r3, r2
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	440b      	add	r3, r1
 8007a78:	3304      	adds	r3, #4
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8007a7e:	6939      	ldr	r1, [r7, #16]
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	4613      	mov	r3, r2
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	4413      	add	r3, r2
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	440b      	add	r3, r1
 8007a8c:	3320      	adds	r3, #32
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007a92:	6939      	ldr	r1, [r7, #16]
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	4613      	mov	r3, r2
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	4413      	add	r3, r2
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	440b      	add	r3, r1
 8007aa0:	3328      	adds	r3, #40	; 0x28
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007aa6:	6939      	ldr	r1, [r7, #16]
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	4413      	add	r3, r2
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	440b      	add	r3, r1
 8007ab4:	3324      	adds	r3, #36	; 0x24
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8007aba:	6939      	ldr	r1, [r7, #16]
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4413      	add	r3, r2
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	440b      	add	r3, r1
 8007ac8:	332c      	adds	r3, #44	; 0x2c
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007ace:	f3bf 8f5f 	dmb	sy
 8007ad2:	e002      	b.n	8007ada <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3720      	adds	r7, #32
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20004b34 	.word	0x20004b34

08007af0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08a      	sub	sp, #40	; 0x28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8007afe:	4b21      	ldr	r3, [pc, #132]	; (8007b84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007b00:	623b      	str	r3, [r7, #32]
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007b0c:	f7ff fe8e 	bl	800782c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007b10:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007b12:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d82c      	bhi.n	8007b74 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8007b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8007b1e:	f04f 0120 	mov.w	r1, #32
 8007b22:	f381 8811 	msr	BASEPRI, r1
 8007b26:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	4413      	add	r3, r2
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	3360      	adds	r3, #96	; 0x60
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	4413      	add	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00e      	beq.n	8007b5e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2200      	movs	r2, #0
 8007b56:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b62:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007b64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
 8007b72:	e002      	b.n	8007b7a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8007b74:	f04f 33ff 	mov.w	r3, #4294967295
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3728      	adds	r7, #40	; 0x28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20004b34 	.word	0x20004b34

08007b88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8007b9e:	e002      	b.n	8007ba6 <_EncodeStr+0x1e>
      Len++;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	4413      	add	r3, r2
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f6      	bne.n	8007ba0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d901      	bls.n	8007bbe <_EncodeStr+0x36>
      Len = Limit;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2bfe      	cmp	r3, #254	; 0xfe
 8007bc2:	d806      	bhi.n	8007bd2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	60fa      	str	r2, [r7, #12]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	e011      	b.n	8007bf6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	60fa      	str	r2, [r7, #12]
 8007bd8:	22ff      	movs	r2, #255	; 0xff
 8007bda:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	60fa      	str	r2, [r7, #12]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	0a19      	lsrs	r1, r3, #8
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	60fa      	str	r2, [r7, #12]
 8007bf2:	b2ca      	uxtb	r2, r1
 8007bf4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007bfa:	e00a      	b.n	8007c12 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	1c53      	adds	r3, r2, #1
 8007c00:	60bb      	str	r3, [r7, #8]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1c59      	adds	r1, r3, #1
 8007c06:	60f9      	str	r1, [r7, #12]
 8007c08:	7812      	ldrb	r2, [r2, #0]
 8007c0a:	701a      	strb	r2, [r3, #0]
    n++;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d3f0      	bcc.n	8007bfc <_EncodeStr+0x74>
  }
  return pPayload;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007c46:	4b35      	ldr	r3, [pc, #212]	; (8007d1c <_HandleIncomingPacket+0xdc>)
 8007c48:	7e1b      	ldrb	r3, [r3, #24]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	1cfb      	adds	r3, r7, #3
 8007c4e:	2201      	movs	r2, #1
 8007c50:	4619      	mov	r1, r3
 8007c52:	f7ff fe43 	bl	80078dc <SEGGER_RTT_ReadNoLock>
 8007c56:	4603      	mov	r3, r0
 8007c58:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	dd59      	ble.n	8007d14 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	2b80      	cmp	r3, #128	; 0x80
 8007c64:	d032      	beq.n	8007ccc <_HandleIncomingPacket+0x8c>
 8007c66:	2b80      	cmp	r3, #128	; 0x80
 8007c68:	dc42      	bgt.n	8007cf0 <_HandleIncomingPacket+0xb0>
 8007c6a:	2b07      	cmp	r3, #7
 8007c6c:	dc16      	bgt.n	8007c9c <_HandleIncomingPacket+0x5c>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dd3e      	ble.n	8007cf0 <_HandleIncomingPacket+0xb0>
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2b06      	cmp	r3, #6
 8007c76:	d83b      	bhi.n	8007cf0 <_HandleIncomingPacket+0xb0>
 8007c78:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <_HandleIncomingPacket+0x40>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007ca3 	.word	0x08007ca3
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08007caf 	.word	0x08007caf
 8007c8c:	08007cb5 	.word	0x08007cb5
 8007c90:	08007cbb 	.word	0x08007cbb
 8007c94:	08007cc1 	.word	0x08007cc1
 8007c98:	08007cc7 	.word	0x08007cc7
 8007c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8007c9e:	d034      	beq.n	8007d0a <_HandleIncomingPacket+0xca>
 8007ca0:	e026      	b.n	8007cf0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007ca2:	f000 fba5 	bl	80083f0 <SEGGER_SYSVIEW_Start>
      break;
 8007ca6:	e035      	b.n	8007d14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007ca8:	f000 fc5c 	bl	8008564 <SEGGER_SYSVIEW_Stop>
      break;
 8007cac:	e032      	b.n	8007d14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007cae:	f000 fe35 	bl	800891c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007cb2:	e02f      	b.n	8007d14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007cb4:	f000 fdfa 	bl	80088ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007cb8:	e02c      	b.n	8007d14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007cba:	f000 fc79 	bl	80085b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007cbe:	e029      	b.n	8007d14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007cc0:	f000 ffee 	bl	8008ca0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007cc4:	e026      	b.n	8007d14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007cc6:	f000 ffcd 	bl	8008c64 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007cca:	e023      	b.n	8007d14 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007ccc:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <_HandleIncomingPacket+0xdc>)
 8007cce:	7e1b      	ldrb	r3, [r3, #24]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	1cfb      	adds	r3, r7, #3
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	f7ff fe00 	bl	80078dc <SEGGER_RTT_ReadNoLock>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dd13      	ble.n	8007d0e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 ff3b 	bl	8008b64 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007cee:	e00e      	b.n	8007d0e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	b25b      	sxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	da0c      	bge.n	8007d12 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007cf8:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <_HandleIncomingPacket+0xdc>)
 8007cfa:	7e1b      	ldrb	r3, [r3, #24]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	1cfb      	adds	r3, r7, #3
 8007d00:	2201      	movs	r2, #1
 8007d02:	4619      	mov	r1, r3
 8007d04:	f7ff fdea 	bl	80078dc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007d08:	e003      	b.n	8007d12 <_HandleIncomingPacket+0xd2>
      break;
 8007d0a:	bf00      	nop
 8007d0c:	e002      	b.n	8007d14 <_HandleIncomingPacket+0xd4>
      break;
 8007d0e:	bf00      	nop
 8007d10:	e000      	b.n	8007d14 <_HandleIncomingPacket+0xd4>
      break;
 8007d12:	bf00      	nop
    }
  }
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200053f8 	.word	0x200053f8

08007d20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	; 0x30
 8007d24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007d26:	2301      	movs	r3, #1
 8007d28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007d2a:	1d3b      	adds	r3, r7, #4
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d34:	4b31      	ldr	r3, [pc, #196]	; (8007dfc <_TrySendOverflowPacket+0xdc>)
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d3a:	e00b      	b.n	8007d54 <_TrySendOverflowPacket+0x34>
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	1c59      	adds	r1, r3, #1
 8007d44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	09db      	lsrs	r3, r3, #7
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	2b7f      	cmp	r3, #127	; 0x7f
 8007d58:	d8f0      	bhi.n	8007d3c <_TrySendOverflowPacket+0x1c>
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d62:	b2d2      	uxtb	r2, r2
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007d6a:	4b25      	ldr	r3, [pc, #148]	; (8007e00 <_TrySendOverflowPacket+0xe0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007d70:	4b22      	ldr	r3, [pc, #136]	; (8007dfc <_TrySendOverflowPacket+0xdc>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	623b      	str	r3, [r7, #32]
 8007d82:	e00b      	b.n	8007d9c <_TrySendOverflowPacket+0x7c>
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	1c59      	adds	r1, r3, #1
 8007d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8007d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	09db      	lsrs	r3, r3, #7
 8007d9a:	623b      	str	r3, [r7, #32]
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007da0:	d8f0      	bhi.n	8007d84 <_TrySendOverflowPacket+0x64>
 8007da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	627a      	str	r2, [r7, #36]	; 0x24
 8007da8:	6a3a      	ldr	r2, [r7, #32]
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007db2:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <_TrySendOverflowPacket+0xdc>)
 8007db4:	785b      	ldrb	r3, [r3, #1]
 8007db6:	4618      	mov	r0, r3
 8007db8:	1d3b      	adds	r3, r7, #4
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	1d3b      	adds	r3, r7, #4
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	f7f8 fa14 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d009      	beq.n	8007de6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007dd2:	4a0a      	ldr	r2, [pc, #40]	; (8007dfc <_TrySendOverflowPacket+0xdc>)
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007dd8:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <_TrySendOverflowPacket+0xdc>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <_TrySendOverflowPacket+0xdc>)
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	e004      	b.n	8007df0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <_TrySendOverflowPacket+0xdc>)
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	3301      	adds	r3, #1
 8007dec:	4a03      	ldr	r2, [pc, #12]	; (8007dfc <_TrySendOverflowPacket+0xdc>)
 8007dee:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007df0:	693b      	ldr	r3, [r7, #16]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3730      	adds	r7, #48	; 0x30
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200053f8 	.word	0x200053f8
 8007e00:	e0001004 	.word	0xe0001004

08007e04 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007e10:	4b6c      	ldr	r3, [pc, #432]	; (8007fc4 <_SendPacket+0x1c0>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d010      	beq.n	8007e3a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007e18:	4b6a      	ldr	r3, [pc, #424]	; (8007fc4 <_SendPacket+0x1c0>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 80a3 	beq.w	8007f68 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007e22:	4b68      	ldr	r3, [pc, #416]	; (8007fc4 <_SendPacket+0x1c0>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d109      	bne.n	8007e3e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007e2a:	f7ff ff79 	bl	8007d20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007e2e:	4b65      	ldr	r3, [pc, #404]	; (8007fc4 <_SendPacket+0x1c0>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	f040 809a 	bne.w	8007f6c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8007e38:	e001      	b.n	8007e3e <_SendPacket+0x3a>
    goto Send;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <_SendPacket+0x3c>
Send:
 8007e3e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b1f      	cmp	r3, #31
 8007e44:	d809      	bhi.n	8007e5a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007e46:	4b5f      	ldr	r3, [pc, #380]	; (8007fc4 <_SendPacket+0x1c0>)
 8007e48:	69da      	ldr	r2, [r3, #28]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 808b 	bne.w	8007f70 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b17      	cmp	r3, #23
 8007e5e:	d807      	bhi.n	8007e70 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	701a      	strb	r2, [r3, #0]
 8007e6e:	e03d      	b.n	8007eec <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e7c:	d912      	bls.n	8007ea4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	09da      	lsrs	r2, r3, #7
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	3a01      	subs	r2, #1
 8007e96:	60fa      	str	r2, [r7, #12]
 8007e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	e006      	b.n	8007eb2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8007eb6:	d912      	bls.n	8007ede <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	09da      	lsrs	r2, r3, #7
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	3a01      	subs	r2, #1
 8007ed0:	60fa      	str	r2, [r7, #12]
 8007ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	701a      	strb	r2, [r3, #0]
 8007edc:	e006      	b.n	8007eec <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007eec:	4b36      	ldr	r3, [pc, #216]	; (8007fc8 <_SendPacket+0x1c4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007ef2:	4b34      	ldr	r3, [pc, #208]	; (8007fc4 <_SendPacket+0x1c0>)
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	623b      	str	r3, [r7, #32]
 8007f04:	e00b      	b.n	8007f1e <_SendPacket+0x11a>
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	1c59      	adds	r1, r3, #1
 8007f0e:	6279      	str	r1, [r7, #36]	; 0x24
 8007f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	09db      	lsrs	r3, r3, #7
 8007f1c:	623b      	str	r3, [r7, #32]
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	2b7f      	cmp	r3, #127	; 0x7f
 8007f22:	d8f0      	bhi.n	8007f06 <_SendPacket+0x102>
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	627a      	str	r2, [r7, #36]	; 0x24
 8007f2a:	6a3a      	ldr	r2, [r7, #32]
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007f34:	4b23      	ldr	r3, [pc, #140]	; (8007fc4 <_SendPacket+0x1c0>)
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	f7f8 f954 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007f52:	4a1c      	ldr	r2, [pc, #112]	; (8007fc4 <_SendPacket+0x1c0>)
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	60d3      	str	r3, [r2, #12]
 8007f58:	e00b      	b.n	8007f72 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007f5a:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <_SendPacket+0x1c0>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	4b18      	ldr	r3, [pc, #96]	; (8007fc4 <_SendPacket+0x1c0>)
 8007f64:	701a      	strb	r2, [r3, #0]
 8007f66:	e004      	b.n	8007f72 <_SendPacket+0x16e>
    goto SendDone;
 8007f68:	bf00      	nop
 8007f6a:	e002      	b.n	8007f72 <_SendPacket+0x16e>
      goto SendDone;
 8007f6c:	bf00      	nop
 8007f6e:	e000      	b.n	8007f72 <_SendPacket+0x16e>
      goto SendDone;
 8007f70:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007f72:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <_SendPacket+0x1c0>)
 8007f74:	7e1b      	ldrb	r3, [r3, #24]
 8007f76:	4619      	mov	r1, r3
 8007f78:	4a14      	ldr	r2, [pc, #80]	; (8007fcc <_SendPacket+0x1c8>)
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	440b      	add	r3, r1
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	4413      	add	r3, r2
 8007f84:	336c      	adds	r3, #108	; 0x6c
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	4b0e      	ldr	r3, [pc, #56]	; (8007fc4 <_SendPacket+0x1c0>)
 8007f8a:	7e1b      	ldrb	r3, [r3, #24]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	490f      	ldr	r1, [pc, #60]	; (8007fcc <_SendPacket+0x1c8>)
 8007f90:	4603      	mov	r3, r0
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	4403      	add	r3, r0
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	440b      	add	r3, r1
 8007f9a:	3370      	adds	r3, #112	; 0x70
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d00b      	beq.n	8007fba <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007fa2:	4b08      	ldr	r3, [pc, #32]	; (8007fc4 <_SendPacket+0x1c0>)
 8007fa4:	789b      	ldrb	r3, [r3, #2]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d107      	bne.n	8007fba <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007faa:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <_SendPacket+0x1c0>)
 8007fac:	2201      	movs	r2, #1
 8007fae:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007fb0:	f7ff fe46 	bl	8007c40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007fb4:	4b03      	ldr	r3, [pc, #12]	; (8007fc4 <_SendPacket+0x1c0>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007fba:	bf00      	nop
 8007fbc:	3728      	adds	r7, #40	; 0x28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	200053f8 	.word	0x200053f8
 8007fc8:	e0001004 	.word	0xe0001004
 8007fcc:	20004b34 	.word	0x20004b34

08007fd0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fe4:	4917      	ldr	r1, [pc, #92]	; (8008044 <SEGGER_SYSVIEW_Init+0x74>)
 8007fe6:	4818      	ldr	r0, [pc, #96]	; (8008048 <SEGGER_SYSVIEW_Init+0x78>)
 8007fe8:	f7ff fcfe 	bl	80079e8 <SEGGER_RTT_AllocUpBuffer>
 8007fec:	4603      	mov	r3, r0
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	4b16      	ldr	r3, [pc, #88]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 8007ff2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007ff4:	4b15      	ldr	r3, [pc, #84]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 8007ff6:	785a      	ldrb	r2, [r3, #1]
 8007ff8:	4b14      	ldr	r3, [pc, #80]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 8007ffa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007ffc:	4b13      	ldr	r3, [pc, #76]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 8007ffe:	7e1b      	ldrb	r3, [r3, #24]
 8008000:	4618      	mov	r0, r3
 8008002:	2300      	movs	r3, #0
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	2308      	movs	r3, #8
 8008008:	4a11      	ldr	r2, [pc, #68]	; (8008050 <SEGGER_SYSVIEW_Init+0x80>)
 800800a:	490f      	ldr	r1, [pc, #60]	; (8008048 <SEGGER_SYSVIEW_Init+0x78>)
 800800c:	f7ff fd70 	bl	8007af0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008010:	4b0e      	ldr	r3, [pc, #56]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 8008012:	2200      	movs	r2, #0
 8008014:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <SEGGER_SYSVIEW_Init+0x84>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a0c      	ldr	r2, [pc, #48]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 800801c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800801e:	4a0b      	ldr	r2, [pc, #44]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8008024:	4a09      	ldr	r2, [pc, #36]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800802a:	4a08      	ldr	r2, [pc, #32]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8008030:	4a06      	ldr	r2, [pc, #24]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8008036:	4b05      	ldr	r3, [pc, #20]	; (800804c <SEGGER_SYSVIEW_Init+0x7c>)
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	20004ff0 	.word	0x20004ff0
 8008048:	080094ac 	.word	0x080094ac
 800804c:	200053f8 	.word	0x200053f8
 8008050:	200053f0 	.word	0x200053f0
 8008054:	e0001004 	.word	0xe0001004

08008058 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008060:	4a04      	ldr	r2, [pc, #16]	; (8008074 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6113      	str	r3, [r2, #16]
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	200053f8 	.word	0x200053f8

08008078 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008080:	f3ef 8311 	mrs	r3, BASEPRI
 8008084:	f04f 0120 	mov.w	r1, #32
 8008088:	f381 8811 	msr	BASEPRI, r1
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	4808      	ldr	r0, [pc, #32]	; (80080b0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008090:	f7ff fdca 	bl	8007c28 <_PreparePacket>
 8008094:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	68b8      	ldr	r0, [r7, #8]
 800809c:	f7ff feb2 	bl	8007e04 <_SendPacket>
  RECORD_END();
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f383 8811 	msr	BASEPRI, r3
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20005428 	.word	0x20005428

080080b4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80080be:	f3ef 8311 	mrs	r3, BASEPRI
 80080c2:	f04f 0120 	mov.w	r1, #32
 80080c6:	f381 8811 	msr	BASEPRI, r1
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	4816      	ldr	r0, [pc, #88]	; (8008128 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80080ce:	f7ff fdab 	bl	8007c28 <_PreparePacket>
 80080d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	61fb      	str	r3, [r7, #28]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	e00b      	b.n	80080fa <SEGGER_SYSVIEW_RecordU32+0x46>
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	1c59      	adds	r1, r3, #1
 80080ea:	61f9      	str	r1, [r7, #28]
 80080ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080f0:	b2d2      	uxtb	r2, r2
 80080f2:	701a      	strb	r2, [r3, #0]
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	09db      	lsrs	r3, r3, #7
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	2b7f      	cmp	r3, #127	; 0x7f
 80080fe:	d8f0      	bhi.n	80080e2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	61fa      	str	r2, [r7, #28]
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	6938      	ldr	r0, [r7, #16]
 8008116:	f7ff fe75 	bl	8007e04 <_SendPacket>
  RECORD_END();
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f383 8811 	msr	BASEPRI, r3
}
 8008120:	bf00      	nop
 8008122:	3720      	adds	r7, #32
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20005428 	.word	0x20005428

0800812c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800812c:	b580      	push	{r7, lr}
 800812e:	b08c      	sub	sp, #48	; 0x30
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008138:	f3ef 8311 	mrs	r3, BASEPRI
 800813c:	f04f 0120 	mov.w	r1, #32
 8008140:	f381 8811 	msr	BASEPRI, r1
 8008144:	61fb      	str	r3, [r7, #28]
 8008146:	4825      	ldr	r0, [pc, #148]	; (80081dc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008148:	f7ff fd6e 	bl	8007c28 <_PreparePacket>
 800814c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
 800815a:	e00b      	b.n	8008174 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	b2da      	uxtb	r2, r3
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	1c59      	adds	r1, r3, #1
 8008164:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	09db      	lsrs	r3, r3, #7
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	2b7f      	cmp	r3, #127	; 0x7f
 8008178:	d8f0      	bhi.n	800815c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008188:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	623b      	str	r3, [r7, #32]
 8008192:	e00b      	b.n	80081ac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	b2da      	uxtb	r2, r3
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	1c59      	adds	r1, r3, #1
 800819c:	6279      	str	r1, [r7, #36]	; 0x24
 800819e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	09db      	lsrs	r3, r3, #7
 80081aa:	623b      	str	r3, [r7, #32]
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	2b7f      	cmp	r3, #127	; 0x7f
 80081b0:	d8f0      	bhi.n	8008194 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	627a      	str	r2, [r7, #36]	; 0x24
 80081b8:	6a3a      	ldr	r2, [r7, #32]
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	6979      	ldr	r1, [r7, #20]
 80081c6:	69b8      	ldr	r0, [r7, #24]
 80081c8:	f7ff fe1c 	bl	8007e04 <_SendPacket>
  RECORD_END();
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	f383 8811 	msr	BASEPRI, r3
}
 80081d2:	bf00      	nop
 80081d4:	3730      	adds	r7, #48	; 0x30
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	20005428 	.word	0x20005428

080081e0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08e      	sub	sp, #56	; 0x38
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80081ee:	f3ef 8311 	mrs	r3, BASEPRI
 80081f2:	f04f 0120 	mov.w	r1, #32
 80081f6:	f381 8811 	msr	BASEPRI, r1
 80081fa:	61fb      	str	r3, [r7, #28]
 80081fc:	4832      	ldr	r0, [pc, #200]	; (80082c8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80081fe:	f7ff fd13 	bl	8007c28 <_PreparePacket>
 8008202:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	633b      	str	r3, [r7, #48]	; 0x30
 8008210:	e00b      	b.n	800822a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	b2da      	uxtb	r2, r3
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	1c59      	adds	r1, r3, #1
 800821a:	6379      	str	r1, [r7, #52]	; 0x34
 800821c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008220:	b2d2      	uxtb	r2, r2
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008226:	09db      	lsrs	r3, r3, #7
 8008228:	633b      	str	r3, [r7, #48]	; 0x30
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	2b7f      	cmp	r3, #127	; 0x7f
 800822e:	d8f0      	bhi.n	8008212 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	637a      	str	r2, [r7, #52]	; 0x34
 8008236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
 8008248:	e00b      	b.n	8008262 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	b2da      	uxtb	r2, r3
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	1c59      	adds	r1, r3, #1
 8008252:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008254:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008258:	b2d2      	uxtb	r2, r2
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	09db      	lsrs	r3, r3, #7
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	2b7f      	cmp	r3, #127	; 0x7f
 8008266:	d8f0      	bhi.n	800824a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8008268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800826e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	623b      	str	r3, [r7, #32]
 8008280:	e00b      	b.n	800829a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	b2da      	uxtb	r2, r3
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	1c59      	adds	r1, r3, #1
 800828a:	6279      	str	r1, [r7, #36]	; 0x24
 800828c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008290:	b2d2      	uxtb	r2, r2
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	09db      	lsrs	r3, r3, #7
 8008298:	623b      	str	r3, [r7, #32]
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	2b7f      	cmp	r3, #127	; 0x7f
 800829e:	d8f0      	bhi.n	8008282 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	627a      	str	r2, [r7, #36]	; 0x24
 80082a6:	6a3a      	ldr	r2, [r7, #32]
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	6979      	ldr	r1, [r7, #20]
 80082b4:	69b8      	ldr	r0, [r7, #24]
 80082b6:	f7ff fda5 	bl	8007e04 <_SendPacket>
  RECORD_END();
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	f383 8811 	msr	BASEPRI, r3
}
 80082c0:	bf00      	nop
 80082c2:	3738      	adds	r7, #56	; 0x38
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20005428 	.word	0x20005428

080082cc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b090      	sub	sp, #64	; 0x40
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80082da:	f3ef 8311 	mrs	r3, BASEPRI
 80082de:	f04f 0120 	mov.w	r1, #32
 80082e2:	f381 8811 	msr	BASEPRI, r1
 80082e6:	61fb      	str	r3, [r7, #28]
 80082e8:	4840      	ldr	r0, [pc, #256]	; (80083ec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80082ea:	f7ff fc9d 	bl	8007c28 <_PreparePacket>
 80082ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80082fc:	e00b      	b.n	8008316 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	b2da      	uxtb	r2, r3
 8008302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	09db      	lsrs	r3, r3, #7
 8008314:	63bb      	str	r3, [r7, #56]	; 0x38
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	2b7f      	cmp	r3, #127	; 0x7f
 800831a:	d8f0      	bhi.n	80082fe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800831c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008324:	b2d2      	uxtb	r2, r2
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	637b      	str	r3, [r7, #52]	; 0x34
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	633b      	str	r3, [r7, #48]	; 0x30
 8008334:	e00b      	b.n	800834e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	b2da      	uxtb	r2, r3
 800833a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833c:	1c59      	adds	r1, r3, #1
 800833e:	6379      	str	r1, [r7, #52]	; 0x34
 8008340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	09db      	lsrs	r3, r3, #7
 800834c:	633b      	str	r3, [r7, #48]	; 0x30
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	2b7f      	cmp	r3, #127	; 0x7f
 8008352:	d8f0      	bhi.n	8008336 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8008354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	637a      	str	r2, [r7, #52]	; 0x34
 800835a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835c:	b2d2      	uxtb	r2, r2
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008362:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	62bb      	str	r3, [r7, #40]	; 0x28
 800836c:	e00b      	b.n	8008386 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	b2da      	uxtb	r2, r3
 8008372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008374:	1c59      	adds	r1, r3, #1
 8008376:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800837c:	b2d2      	uxtb	r2, r2
 800837e:	701a      	strb	r2, [r3, #0]
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	09db      	lsrs	r3, r3, #7
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	2b7f      	cmp	r3, #127	; 0x7f
 800838a:	d8f0      	bhi.n	800836e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008394:	b2d2      	uxtb	r2, r2
 8008396:	701a      	strb	r2, [r3, #0]
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
 80083a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083a2:	623b      	str	r3, [r7, #32]
 80083a4:	e00b      	b.n	80083be <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	1c59      	adds	r1, r3, #1
 80083ae:	6279      	str	r1, [r7, #36]	; 0x24
 80083b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083b4:	b2d2      	uxtb	r2, r2
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	09db      	lsrs	r3, r3, #7
 80083bc:	623b      	str	r3, [r7, #32]
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	2b7f      	cmp	r3, #127	; 0x7f
 80083c2:	d8f0      	bhi.n	80083a6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	627a      	str	r2, [r7, #36]	; 0x24
 80083ca:	6a3a      	ldr	r2, [r7, #32]
 80083cc:	b2d2      	uxtb	r2, r2
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	6979      	ldr	r1, [r7, #20]
 80083d8:	69b8      	ldr	r0, [r7, #24]
 80083da:	f7ff fd13 	bl	8007e04 <_SendPacket>
  RECORD_END();
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	f383 8811 	msr	BASEPRI, r3
}
 80083e4:	bf00      	nop
 80083e6:	3740      	adds	r7, #64	; 0x40
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20005428 	.word	0x20005428

080083f0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08c      	sub	sp, #48	; 0x30
 80083f4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80083f6:	4b58      	ldr	r3, [pc, #352]	; (8008558 <SEGGER_SYSVIEW_Start+0x168>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80083fc:	f3ef 8311 	mrs	r3, BASEPRI
 8008400:	f04f 0120 	mov.w	r1, #32
 8008404:	f381 8811 	msr	BASEPRI, r1
 8008408:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800840a:	4b53      	ldr	r3, [pc, #332]	; (8008558 <SEGGER_SYSVIEW_Start+0x168>)
 800840c:	785b      	ldrb	r3, [r3, #1]
 800840e:	220a      	movs	r2, #10
 8008410:	4952      	ldr	r1, [pc, #328]	; (800855c <SEGGER_SYSVIEW_Start+0x16c>)
 8008412:	4618      	mov	r0, r3
 8008414:	f7f7 feec 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800841e:	200a      	movs	r0, #10
 8008420:	f7ff fe2a 	bl	8008078 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008424:	f3ef 8311 	mrs	r3, BASEPRI
 8008428:	f04f 0120 	mov.w	r1, #32
 800842c:	f381 8811 	msr	BASEPRI, r1
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	484b      	ldr	r0, [pc, #300]	; (8008560 <SEGGER_SYSVIEW_Start+0x170>)
 8008434:	f7ff fbf8 	bl	8007c28 <_PreparePacket>
 8008438:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008442:	4b45      	ldr	r3, [pc, #276]	; (8008558 <SEGGER_SYSVIEW_Start+0x168>)
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28
 8008448:	e00b      	b.n	8008462 <SEGGER_SYSVIEW_Start+0x72>
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	b2da      	uxtb	r2, r3
 800844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008450:	1c59      	adds	r1, r3, #1
 8008452:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008454:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008458:	b2d2      	uxtb	r2, r2
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845e:	09db      	lsrs	r3, r3, #7
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	2b7f      	cmp	r3, #127	; 0x7f
 8008466:	d8f0      	bhi.n	800844a <SEGGER_SYSVIEW_Start+0x5a>
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800846e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008470:	b2d2      	uxtb	r2, r2
 8008472:	701a      	strb	r2, [r3, #0]
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
 800847c:	4b36      	ldr	r3, [pc, #216]	; (8008558 <SEGGER_SYSVIEW_Start+0x168>)
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	623b      	str	r3, [r7, #32]
 8008482:	e00b      	b.n	800849c <SEGGER_SYSVIEW_Start+0xac>
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	b2da      	uxtb	r2, r3
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	1c59      	adds	r1, r3, #1
 800848c:	6279      	str	r1, [r7, #36]	; 0x24
 800848e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	09db      	lsrs	r3, r3, #7
 800849a:	623b      	str	r3, [r7, #32]
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	2b7f      	cmp	r3, #127	; 0x7f
 80084a0:	d8f0      	bhi.n	8008484 <SEGGER_SYSVIEW_Start+0x94>
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	627a      	str	r2, [r7, #36]	; 0x24
 80084a8:	6a3a      	ldr	r2, [r7, #32]
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	61fb      	str	r3, [r7, #28]
 80084b6:	4b28      	ldr	r3, [pc, #160]	; (8008558 <SEGGER_SYSVIEW_Start+0x168>)
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	61bb      	str	r3, [r7, #24]
 80084bc:	e00b      	b.n	80084d6 <SEGGER_SYSVIEW_Start+0xe6>
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	1c59      	adds	r1, r3, #1
 80084c6:	61f9      	str	r1, [r7, #28]
 80084c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084cc:	b2d2      	uxtb	r2, r2
 80084ce:	701a      	strb	r2, [r3, #0]
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	09db      	lsrs	r3, r3, #7
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	2b7f      	cmp	r3, #127	; 0x7f
 80084da:	d8f0      	bhi.n	80084be <SEGGER_SYSVIEW_Start+0xce>
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	61fa      	str	r2, [r7, #28]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	b2d2      	uxtb	r2, r2
 80084e6:	701a      	strb	r2, [r3, #0]
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	2300      	movs	r3, #0
 80084f2:	613b      	str	r3, [r7, #16]
 80084f4:	e00b      	b.n	800850e <SEGGER_SYSVIEW_Start+0x11e>
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	1c59      	adds	r1, r3, #1
 80084fe:	6179      	str	r1, [r7, #20]
 8008500:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008504:	b2d2      	uxtb	r2, r2
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	09db      	lsrs	r3, r3, #7
 800850c:	613b      	str	r3, [r7, #16]
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b7f      	cmp	r3, #127	; 0x7f
 8008512:	d8f0      	bhi.n	80084f6 <SEGGER_SYSVIEW_Start+0x106>
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	617a      	str	r2, [r7, #20]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008524:	2218      	movs	r2, #24
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff fc6b 	bl	8007e04 <_SendPacket>
      RECORD_END();
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008534:	4b08      	ldr	r3, [pc, #32]	; (8008558 <SEGGER_SYSVIEW_Start+0x168>)
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <SEGGER_SYSVIEW_Start+0x168>)
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8008542:	f000 f9eb 	bl	800891c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008546:	f000 f9b1 	bl	80088ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800854a:	f000 fba9 	bl	8008ca0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800854e:	bf00      	nop
 8008550:	3730      	adds	r7, #48	; 0x30
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	200053f8 	.word	0x200053f8
 800855c:	08009628 	.word	0x08009628
 8008560:	20005428 	.word	0x20005428

08008564 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800856a:	f3ef 8311 	mrs	r3, BASEPRI
 800856e:	f04f 0120 	mov.w	r1, #32
 8008572:	f381 8811 	msr	BASEPRI, r1
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	480b      	ldr	r0, [pc, #44]	; (80085a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800857a:	f7ff fb55 	bl	8007c28 <_PreparePacket>
 800857e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <SEGGER_SYSVIEW_Stop+0x48>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d007      	beq.n	8008598 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008588:	220b      	movs	r2, #11
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6838      	ldr	r0, [r7, #0]
 800858e:	f7ff fc39 	bl	8007e04 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008592:	4b06      	ldr	r3, [pc, #24]	; (80085ac <SEGGER_SYSVIEW_Stop+0x48>)
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f383 8811 	msr	BASEPRI, r3
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20005428 	.word	0x20005428
 80085ac:	200053f8 	.word	0x200053f8

080085b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08c      	sub	sp, #48	; 0x30
 80085b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80085b6:	f3ef 8311 	mrs	r3, BASEPRI
 80085ba:	f04f 0120 	mov.w	r1, #32
 80085be:	f381 8811 	msr	BASEPRI, r1
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	4845      	ldr	r0, [pc, #276]	; (80086dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80085c6:	f7ff fb2f 	bl	8007c28 <_PreparePacket>
 80085ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085d4:	4b42      	ldr	r3, [pc, #264]	; (80086e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80085da:	e00b      	b.n	80085f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	1c59      	adds	r1, r3, #1
 80085e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80085e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085ea:	b2d2      	uxtb	r2, r2
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	09db      	lsrs	r3, r3, #7
 80085f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	2b7f      	cmp	r3, #127	; 0x7f
 80085f8:	d8f0      	bhi.n	80085dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008608:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
 800860e:	4b34      	ldr	r3, [pc, #208]	; (80086e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	623b      	str	r3, [r7, #32]
 8008614:	e00b      	b.n	800862e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	b2da      	uxtb	r2, r3
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	1c59      	adds	r1, r3, #1
 800861e:	6279      	str	r1, [r7, #36]	; 0x24
 8008620:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008624:	b2d2      	uxtb	r2, r2
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	09db      	lsrs	r3, r3, #7
 800862c:	623b      	str	r3, [r7, #32]
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	2b7f      	cmp	r3, #127	; 0x7f
 8008632:	d8f0      	bhi.n	8008616 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	627a      	str	r2, [r7, #36]	; 0x24
 800863a:	6a3a      	ldr	r2, [r7, #32]
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	701a      	strb	r2, [r3, #0]
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	4b25      	ldr	r3, [pc, #148]	; (80086e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	e00b      	b.n	8008668 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	b2da      	uxtb	r2, r3
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	1c59      	adds	r1, r3, #1
 8008658:	61f9      	str	r1, [r7, #28]
 800865a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	09db      	lsrs	r3, r3, #7
 8008666:	61bb      	str	r3, [r7, #24]
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b7f      	cmp	r3, #127	; 0x7f
 800866c:	d8f0      	bhi.n	8008650 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	61fa      	str	r2, [r7, #28]
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	2300      	movs	r3, #0
 8008684:	613b      	str	r3, [r7, #16]
 8008686:	e00b      	b.n	80086a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	b2da      	uxtb	r2, r3
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	1c59      	adds	r1, r3, #1
 8008690:	6179      	str	r1, [r7, #20]
 8008692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	09db      	lsrs	r3, r3, #7
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2b7f      	cmp	r3, #127	; 0x7f
 80086a4:	d8f0      	bhi.n	8008688 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	617a      	str	r2, [r7, #20]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80086b6:	2218      	movs	r2, #24
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	68b8      	ldr	r0, [r7, #8]
 80086bc:	f7ff fba2 	bl	8007e04 <_SendPacket>
  RECORD_END();
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80086c6:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80086c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d002      	beq.n	80086d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80086ce:	4b04      	ldr	r3, [pc, #16]	; (80086e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d2:	4798      	blx	r3
  }
}
 80086d4:	bf00      	nop
 80086d6:	3730      	adds	r7, #48	; 0x30
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20005428 	.word	0x20005428
 80086e0:	200053f8 	.word	0x200053f8

080086e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b092      	sub	sp, #72	; 0x48
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80086ec:	f3ef 8311 	mrs	r3, BASEPRI
 80086f0:	f04f 0120 	mov.w	r1, #32
 80086f4:	f381 8811 	msr	BASEPRI, r1
 80086f8:	617b      	str	r3, [r7, #20]
 80086fa:	486a      	ldr	r0, [pc, #424]	; (80088a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80086fc:	f7ff fa94 	bl	8007c28 <_PreparePacket>
 8008700:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	647b      	str	r3, [r7, #68]	; 0x44
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b66      	ldr	r3, [pc, #408]	; (80088a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	643b      	str	r3, [r7, #64]	; 0x40
 8008716:	e00b      	b.n	8008730 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871a:	b2da      	uxtb	r2, r3
 800871c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871e:	1c59      	adds	r1, r3, #1
 8008720:	6479      	str	r1, [r7, #68]	; 0x44
 8008722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	701a      	strb	r2, [r3, #0]
 800872a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800872c:	09db      	lsrs	r3, r3, #7
 800872e:	643b      	str	r3, [r7, #64]	; 0x40
 8008730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008732:	2b7f      	cmp	r3, #127	; 0x7f
 8008734:	d8f0      	bhi.n	8008718 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	647a      	str	r2, [r7, #68]	; 0x44
 800873c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008744:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008750:	e00b      	b.n	800876a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	b2da      	uxtb	r2, r3
 8008756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008758:	1c59      	adds	r1, r3, #1
 800875a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800875c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008760:	b2d2      	uxtb	r2, r2
 8008762:	701a      	strb	r2, [r3, #0]
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	09db      	lsrs	r3, r3, #7
 8008768:	63bb      	str	r3, [r7, #56]	; 0x38
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	2b7f      	cmp	r3, #127	; 0x7f
 800876e:	d8f0      	bhi.n	8008752 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	701a      	strb	r2, [r3, #0]
 800877c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	2220      	movs	r2, #32
 8008786:	4619      	mov	r1, r3
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff f9fd 	bl	8007b88 <_EncodeStr>
 800878e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008790:	2209      	movs	r2, #9
 8008792:	68f9      	ldr	r1, [r7, #12]
 8008794:	6938      	ldr	r0, [r7, #16]
 8008796:	f7ff fb35 	bl	8007e04 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b40      	ldr	r3, [pc, #256]	; (80088a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	633b      	str	r3, [r7, #48]	; 0x30
 80087ae:	e00b      	b.n	80087c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80087b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	1c59      	adds	r1, r3, #1
 80087b8:	6379      	str	r1, [r7, #52]	; 0x34
 80087ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	09db      	lsrs	r3, r3, #7
 80087c6:	633b      	str	r3, [r7, #48]	; 0x30
 80087c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ca:	2b7f      	cmp	r3, #127	; 0x7f
 80087cc:	d8f0      	bhi.n	80087b0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80087ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	637a      	str	r2, [r7, #52]	; 0x34
 80087d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80087e8:	e00b      	b.n	8008802 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	1c59      	adds	r1, r3, #1
 80087f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80087f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	09db      	lsrs	r3, r3, #7
 8008800:	62bb      	str	r3, [r7, #40]	; 0x28
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	2b7f      	cmp	r3, #127	; 0x7f
 8008806:	d8f0      	bhi.n	80087ea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800880e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	623b      	str	r3, [r7, #32]
 8008822:	e00b      	b.n	800883c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	1c59      	adds	r1, r3, #1
 800882c:	6279      	str	r1, [r7, #36]	; 0x24
 800882e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	09db      	lsrs	r3, r3, #7
 800883a:	623b      	str	r3, [r7, #32]
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	2b7f      	cmp	r3, #127	; 0x7f
 8008840:	d8f0      	bhi.n	8008824 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	627a      	str	r2, [r7, #36]	; 0x24
 8008848:	6a3a      	ldr	r2, [r7, #32]
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	701a      	strb	r2, [r3, #0]
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	61fb      	str	r3, [r7, #28]
 8008856:	2300      	movs	r3, #0
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	e00b      	b.n	8008874 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	b2da      	uxtb	r2, r3
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	1c59      	adds	r1, r3, #1
 8008864:	61f9      	str	r1, [r7, #28]
 8008866:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	09db      	lsrs	r3, r3, #7
 8008872:	61bb      	str	r3, [r7, #24]
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2b7f      	cmp	r3, #127	; 0x7f
 8008878:	d8f0      	bhi.n	800885c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	61fa      	str	r2, [r7, #28]
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800888a:	2215      	movs	r2, #21
 800888c:	68f9      	ldr	r1, [r7, #12]
 800888e:	6938      	ldr	r0, [r7, #16]
 8008890:	f7ff fab8 	bl	8007e04 <_SendPacket>
  RECORD_END();
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f383 8811 	msr	BASEPRI, r3
}
 800889a:	bf00      	nop
 800889c:	3748      	adds	r7, #72	; 0x48
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20005428 	.word	0x20005428
 80088a8:	200053f8 	.word	0x200053f8

080088ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80088b0:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d008      	beq.n	80088ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80088b8:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80088ba:	6a1b      	ldr	r3, [r3, #32]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80088c2:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	4798      	blx	r3
  }
}
 80088ca:	bf00      	nop
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	200053f8 	.word	0x200053f8

080088d4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80088dc:	f3ef 8311 	mrs	r3, BASEPRI
 80088e0:	f04f 0120 	mov.w	r1, #32
 80088e4:	f381 8811 	msr	BASEPRI, r1
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	480b      	ldr	r0, [pc, #44]	; (8008918 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80088ec:	f7ff f99c 	bl	8007c28 <_PreparePacket>
 80088f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80088f2:	2280      	movs	r2, #128	; 0x80
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	6938      	ldr	r0, [r7, #16]
 80088f8:	f7ff f946 	bl	8007b88 <_EncodeStr>
 80088fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80088fe:	220e      	movs	r2, #14
 8008900:	68f9      	ldr	r1, [r7, #12]
 8008902:	6938      	ldr	r0, [r7, #16]
 8008904:	f7ff fa7e 	bl	8007e04 <_SendPacket>
  RECORD_END();
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f383 8811 	msr	BASEPRI, r3
}
 800890e:	bf00      	nop
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20005428 	.word	0x20005428

0800891c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800891c:	b590      	push	{r4, r7, lr}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008922:	4b15      	ldr	r3, [pc, #84]	; (8008978 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d01a      	beq.n	8008960 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d015      	beq.n	8008960 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008934:	4b10      	ldr	r3, [pc, #64]	; (8008978 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4798      	blx	r3
 800893c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008940:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008942:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	000a      	movs	r2, r1
 8008950:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008952:	4613      	mov	r3, r2
 8008954:	461a      	mov	r2, r3
 8008956:	4621      	mov	r1, r4
 8008958:	200d      	movs	r0, #13
 800895a:	f7ff fbe7 	bl	800812c <SEGGER_SYSVIEW_RecordU32x2>
 800895e:	e006      	b.n	800896e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008960:	4b06      	ldr	r3, [pc, #24]	; (800897c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4619      	mov	r1, r3
 8008966:	200c      	movs	r0, #12
 8008968:	f7ff fba4 	bl	80080b4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	bd90      	pop	{r4, r7, pc}
 8008976:	bf00      	nop
 8008978:	200053f8 	.word	0x200053f8
 800897c:	e0001004 	.word	0xe0001004

08008980 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008986:	f3ef 8311 	mrs	r3, BASEPRI
 800898a:	f04f 0120 	mov.w	r1, #32
 800898e:	f381 8811 	msr	BASEPRI, r1
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	4807      	ldr	r0, [pc, #28]	; (80089b4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008996:	f7ff f947 	bl	8007c28 <_PreparePacket>
 800899a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800899c:	2211      	movs	r2, #17
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6838      	ldr	r0, [r7, #0]
 80089a2:	f7ff fa2f 	bl	8007e04 <_SendPacket>
  RECORD_END();
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f383 8811 	msr	BASEPRI, r3
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20005428 	.word	0x20005428

080089b8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80089c0:	f3ef 8311 	mrs	r3, BASEPRI
 80089c4:	f04f 0120 	mov.w	r1, #32
 80089c8:	f381 8811 	msr	BASEPRI, r1
 80089cc:	617b      	str	r3, [r7, #20]
 80089ce:	4819      	ldr	r0, [pc, #100]	; (8008a34 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80089d0:	f7ff f92a 	bl	8007c28 <_PreparePacket>
 80089d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80089da:	4b17      	ldr	r3, [pc, #92]	; (8008a38 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	61fb      	str	r3, [r7, #28]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	61bb      	str	r3, [r7, #24]
 80089ec:	e00b      	b.n	8008a06 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	1c59      	adds	r1, r3, #1
 80089f6:	61f9      	str	r1, [r7, #28]
 80089f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089fc:	b2d2      	uxtb	r2, r2
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	09db      	lsrs	r3, r3, #7
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b7f      	cmp	r3, #127	; 0x7f
 8008a0a:	d8f0      	bhi.n	80089ee <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	61fa      	str	r2, [r7, #28]
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	68f9      	ldr	r1, [r7, #12]
 8008a20:	6938      	ldr	r0, [r7, #16]
 8008a22:	f7ff f9ef 	bl	8007e04 <_SendPacket>
  RECORD_END();
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f383 8811 	msr	BASEPRI, r3
}
 8008a2c:	bf00      	nop
 8008a2e:	3720      	adds	r7, #32
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20005428 	.word	0x20005428
 8008a38:	200053f8 	.word	0x200053f8

08008a3c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008a44:	f3ef 8311 	mrs	r3, BASEPRI
 8008a48:	f04f 0120 	mov.w	r1, #32
 8008a4c:	f381 8811 	msr	BASEPRI, r1
 8008a50:	617b      	str	r3, [r7, #20]
 8008a52:	4819      	ldr	r0, [pc, #100]	; (8008ab8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008a54:	f7ff f8e8 	bl	8007c28 <_PreparePacket>
 8008a58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008a5e:	4b17      	ldr	r3, [pc, #92]	; (8008abc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	e00b      	b.n	8008a8a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	1c59      	adds	r1, r3, #1
 8008a7a:	61f9      	str	r1, [r7, #28]
 8008a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	09db      	lsrs	r3, r3, #7
 8008a88:	61bb      	str	r3, [r7, #24]
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8008a8e:	d8f0      	bhi.n	8008a72 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	61fa      	str	r2, [r7, #28]
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	b2d2      	uxtb	r2, r2
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008aa0:	2204      	movs	r2, #4
 8008aa2:	68f9      	ldr	r1, [r7, #12]
 8008aa4:	6938      	ldr	r0, [r7, #16]
 8008aa6:	f7ff f9ad 	bl	8007e04 <_SendPacket>
  RECORD_END();
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f383 8811 	msr	BASEPRI, r3
}
 8008ab0:	bf00      	nop
 8008ab2:	3720      	adds	r7, #32
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20005428 	.word	0x20005428
 8008abc:	200053f8 	.word	0x200053f8

08008ac0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8008acc:	f04f 0120 	mov.w	r1, #32
 8008ad0:	f381 8811 	msr	BASEPRI, r1
 8008ad4:	617b      	str	r3, [r7, #20]
 8008ad6:	4819      	ldr	r0, [pc, #100]	; (8008b3c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008ad8:	f7ff f8a6 	bl	8007c28 <_PreparePacket>
 8008adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008ae2:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	e00b      	b.n	8008b0e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	1c59      	adds	r1, r3, #1
 8008afe:	61f9      	str	r1, [r7, #28]
 8008b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b04:	b2d2      	uxtb	r2, r2
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	09db      	lsrs	r3, r3, #7
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2b7f      	cmp	r3, #127	; 0x7f
 8008b12:	d8f0      	bhi.n	8008af6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	61fa      	str	r2, [r7, #28]
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	b2d2      	uxtb	r2, r2
 8008b1e:	701a      	strb	r2, [r3, #0]
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008b24:	2206      	movs	r2, #6
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	6938      	ldr	r0, [r7, #16]
 8008b2a:	f7ff f96b 	bl	8007e04 <_SendPacket>
  RECORD_END();
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f383 8811 	msr	BASEPRI, r3
}
 8008b34:	bf00      	nop
 8008b36:	3720      	adds	r7, #32
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20005428 	.word	0x20005428
 8008b40:	200053f8 	.word	0x200053f8

08008b44 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	1ad3      	subs	r3, r2, r3
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	200053f8 	.word	0x200053f8

08008b64 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08c      	sub	sp, #48	; 0x30
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008b6e:	4b3b      	ldr	r3, [pc, #236]	; (8008c5c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d06d      	beq.n	8008c52 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008b76:	4b39      	ldr	r3, [pc, #228]	; (8008c5c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b80:	e008      	b.n	8008b94 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d007      	beq.n	8008b9e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	3301      	adds	r3, #1
 8008b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d3f2      	bcc.n	8008b82 <SEGGER_SYSVIEW_SendModule+0x1e>
 8008b9c:	e000      	b.n	8008ba0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008b9e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d055      	beq.n	8008c52 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8008baa:	f04f 0120 	mov.w	r1, #32
 8008bae:	f381 8811 	msr	BASEPRI, r1
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	482a      	ldr	r0, [pc, #168]	; (8008c60 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008bb6:	f7ff f837 	bl	8007c28 <_PreparePacket>
 8008bba:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	623b      	str	r3, [r7, #32]
 8008bc8:	e00b      	b.n	8008be2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	1c59      	adds	r1, r3, #1
 8008bd2:	6279      	str	r1, [r7, #36]	; 0x24
 8008bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bd8:	b2d2      	uxtb	r2, r2
 8008bda:	701a      	strb	r2, [r3, #0]
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	09db      	lsrs	r3, r3, #7
 8008be0:	623b      	str	r3, [r7, #32]
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	2b7f      	cmp	r3, #127	; 0x7f
 8008be6:	d8f0      	bhi.n	8008bca <SEGGER_SYSVIEW_SendModule+0x66>
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	627a      	str	r2, [r7, #36]	; 0x24
 8008bee:	6a3a      	ldr	r2, [r7, #32]
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	701a      	strb	r2, [r3, #0]
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	61fb      	str	r3, [r7, #28]
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e00b      	b.n	8008c1c <SEGGER_SYSVIEW_SendModule+0xb8>
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	1c59      	adds	r1, r3, #1
 8008c0c:	61f9      	str	r1, [r7, #28]
 8008c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c12:	b2d2      	uxtb	r2, r2
 8008c14:	701a      	strb	r2, [r3, #0]
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	09db      	lsrs	r3, r3, #7
 8008c1a:	61bb      	str	r3, [r7, #24]
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c20:	d8f0      	bhi.n	8008c04 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	1c5a      	adds	r2, r3, #1
 8008c26:	61fa      	str	r2, [r7, #28]
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2280      	movs	r2, #128	; 0x80
 8008c38:	4619      	mov	r1, r3
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f7fe ffa4 	bl	8007b88 <_EncodeStr>
 8008c40:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008c42:	2216      	movs	r2, #22
 8008c44:	68f9      	ldr	r1, [r7, #12]
 8008c46:	6938      	ldr	r0, [r7, #16]
 8008c48:	f7ff f8dc 	bl	8007e04 <_SendPacket>
      RECORD_END();
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008c52:	bf00      	nop
 8008c54:	3730      	adds	r7, #48	; 0x30
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20005420 	.word	0x20005420
 8008c60:	20005428 	.word	0x20005428

08008c64 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00f      	beq.n	8008c92 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008c72:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1f2      	bne.n	8008c78 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20005420 	.word	0x20005420

08008ca0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8008caa:	f04f 0120 	mov.w	r1, #32
 8008cae:	f381 8811 	msr	BASEPRI, r1
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	4817      	ldr	r0, [pc, #92]	; (8008d14 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008cb6:	f7fe ffb7 	bl	8007c28 <_PreparePacket>
 8008cba:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	613b      	str	r3, [r7, #16]
 8008cca:	e00b      	b.n	8008ce4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	1c59      	adds	r1, r3, #1
 8008cd4:	6179      	str	r1, [r7, #20]
 8008cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cda:	b2d2      	uxtb	r2, r2
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	09db      	lsrs	r3, r3, #7
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ce8:	d8f0      	bhi.n	8008ccc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	617a      	str	r2, [r7, #20]
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	b2d2      	uxtb	r2, r2
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008cfa:	221b      	movs	r2, #27
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	68b8      	ldr	r0, [r7, #8]
 8008d00:	f7ff f880 	bl	8007e04 <_SendPacket>
  RECORD_END();
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f383 8811 	msr	BASEPRI, r3
}
 8008d0a:	bf00      	nop
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20005428 	.word	0x20005428
 8008d18:	20005424 	.word	0x20005424

08008d1c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	; 0x28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008d24:	f3ef 8311 	mrs	r3, BASEPRI
 8008d28:	f04f 0120 	mov.w	r1, #32
 8008d2c:	f381 8811 	msr	BASEPRI, r1
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	4827      	ldr	r0, [pc, #156]	; (8008dd0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008d34:	f7fe ff78 	bl	8007c28 <_PreparePacket>
 8008d38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008d3a:	2280      	movs	r2, #128	; 0x80
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	6938      	ldr	r0, [r7, #16]
 8008d40:	f7fe ff22 	bl	8007b88 <_EncodeStr>
 8008d44:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	627b      	str	r3, [r7, #36]	; 0x24
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	623b      	str	r3, [r7, #32]
 8008d4e:	e00b      	b.n	8008d68 <SEGGER_SYSVIEW_Warn+0x4c>
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	1c59      	adds	r1, r3, #1
 8008d58:	6279      	str	r1, [r7, #36]	; 0x24
 8008d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	701a      	strb	r2, [r3, #0]
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	09db      	lsrs	r3, r3, #7
 8008d66:	623b      	str	r3, [r7, #32]
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8008d6c:	d8f0      	bhi.n	8008d50 <SEGGER_SYSVIEW_Warn+0x34>
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	627a      	str	r2, [r7, #36]	; 0x24
 8008d74:	6a3a      	ldr	r2, [r7, #32]
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	2300      	movs	r3, #0
 8008d84:	61bb      	str	r3, [r7, #24]
 8008d86:	e00b      	b.n	8008da0 <SEGGER_SYSVIEW_Warn+0x84>
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	1c59      	adds	r1, r3, #1
 8008d90:	61f9      	str	r1, [r7, #28]
 8008d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	09db      	lsrs	r3, r3, #7
 8008d9e:	61bb      	str	r3, [r7, #24]
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	2b7f      	cmp	r3, #127	; 0x7f
 8008da4:	d8f0      	bhi.n	8008d88 <SEGGER_SYSVIEW_Warn+0x6c>
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	61fa      	str	r2, [r7, #28]
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	b2d2      	uxtb	r2, r2
 8008db0:	701a      	strb	r2, [r3, #0]
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008db6:	221a      	movs	r2, #26
 8008db8:	68f9      	ldr	r1, [r7, #12]
 8008dba:	6938      	ldr	r0, [r7, #16]
 8008dbc:	f7ff f822 	bl	8007e04 <_SendPacket>
  RECORD_END();
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f383 8811 	msr	BASEPRI, r3
}
 8008dc6:	bf00      	nop
 8008dc8:	3728      	adds	r7, #40	; 0x28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20005428 	.word	0x20005428

08008dd4 <__NVIC_EnableIRQ>:
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	db0b      	blt.n	8008dfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	f003 021f 	and.w	r2, r3, #31
 8008dec:	4907      	ldr	r1, [pc, #28]	; (8008e0c <__NVIC_EnableIRQ+0x38>)
 8008dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	2001      	movs	r0, #1
 8008df6:	fa00 f202 	lsl.w	r2, r0, r2
 8008dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	e000e100 	.word	0xe000e100

08008e10 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8008e18:	4b08      	ldr	r3, [pc, #32]	; (8008e3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8008e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e1c:	4907      	ldr	r1, [pc, #28]	; (8008e3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008e24:	4b05      	ldr	r3, [pc, #20]	; (8008e3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8008e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	40023800 	.word	0x40023800

08008e40 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f043 0201 	orr.w	r2, r3, #1
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	601a      	str	r2, [r3, #0]
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f06f 0201 	mvn.w	r2, #1
 8008e8a:	611a      	str	r2, [r3, #16]
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8008eac:	2301      	movs	r3, #1
 8008eae:	e000      	b.n	8008eb2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f043 0201 	orr.w	r2, r3, #1
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60da      	str	r2, [r3, #12]
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
	...

08008ee0 <_cbSendSystemDesc>:
 *       _cbSendSystemDesc()
 *
 *  Function description
 *    Sends SystemView description strings.
 */
static void _cbSendSystemDesc(void) {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008ee4:	4802      	ldr	r0, [pc, #8]	; (8008ef0 <_cbSendSystemDesc+0x10>)
 8008ee6:	f7ff fcf5 	bl	80088d4 <SEGGER_SYSVIEW_SendSysDesc>
//	SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
//	SEGGER_SYSVIEW_SendSysDesc("I#23=EXTI[0]");
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	080094b4 	.word	0x080094b4

08008ef4 <TIM7_IRQHandler>:

/// [SYSVIEW_TIMESTAMP]
void TIM7_IRQHandler(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
	// Interrupt flag set?
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8008ef8:	4807      	ldr	r0, [pc, #28]	; (8008f18 <TIM7_IRQHandler+0x24>)
 8008efa:	f7ff ffcd 	bl	8008e98 <LL_TIM_IsActiveFlag_UPDATE>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d007      	beq.n	8008f14 <TIM7_IRQHandler+0x20>
	{
		// Clear flag
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8008f04:	4804      	ldr	r0, [pc, #16]	; (8008f18 <TIM7_IRQHandler+0x24>)
 8008f06:	f7ff ffb9 	bl	8008e7c <LL_TIM_ClearFlag_UPDATE>
		// Increment counter
		SEGGER_SYSVIEW_TickCnt++;
 8008f0a:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <TIM7_IRQHandler+0x28>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	4a02      	ldr	r2, [pc, #8]	; (8008f1c <TIM7_IRQHandler+0x28>)
 8008f12:	6013      	str	r3, [r2, #0]
	}
}
 8008f14:	bf00      	nop
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	40001400 	.word	0x40001400
 8008f1c:	20004fec 	.word	0x20004fec

08008f20 <SEGGER_SYSVIEW_TimeStampInit>:
static void SEGGER_SYSVIEW_TimeStampInit(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
//#warning "DO NOT TAKE POINTS OFF, SEGGER PROVIDED WARNING: TIM7 peripheral is used for Segger SysView timestamping"
	// Enable TIM7 peripheral clock
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8008f24:	2020      	movs	r0, #32
 8008f26:	f7ff ff73 	bl	8008e10 <LL_APB1_GRP1_EnableClock>
	// Set prescaler to match timestamp frequency
	LL_TIM_SetPrescaler(TIM7, __LL_TIM_CALC_PSC(SYSVIEW_CPU_FREQ, SYSVIEW_TIMESTAMP_FREQ));
 8008f2a:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	085a      	lsrs	r2, r3, #1
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	441a      	add	r2, r3
 8008f36:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	4619      	mov	r1, r3
 8008f42:	4808      	ldr	r0, [pc, #32]	; (8008f64 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 8008f44:	f7ff ff8c 	bl	8008e60 <LL_TIM_SetPrescaler>
	// Enable timer interrupt
	NVIC_EnableIRQ(TIM7_IRQn);
 8008f48:	2037      	movs	r0, #55	; 0x37
 8008f4a:	f7ff ff43 	bl	8008dd4 <__NVIC_EnableIRQ>
	LL_TIM_EnableIT_UPDATE(TIM7);
 8008f4e:	4805      	ldr	r0, [pc, #20]	; (8008f64 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 8008f50:	f7ff ffb5 	bl	8008ebe <LL_TIM_EnableIT_UPDATE>
	// Enable counter
	LL_TIM_EnableCounter(TIM7);
 8008f54:	4803      	ldr	r0, [pc, #12]	; (8008f64 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 8008f56:	f7ff ff73 	bl	8008e40 <LL_TIM_EnableCounter>
}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000000 	.word	0x20000000
 8008f64:	40001400 	.word	0x40001400

08008f68 <SEGGER_SYSVIEW_Conf>:
 *
 *       Global functions
 *
 **********************************************************************
 */
void SEGGER_SYSVIEW_Conf(void) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_TimeStampInit();
 8008f6c:	f7ff ffd8 	bl	8008f20 <SEGGER_SYSVIEW_TimeStampInit>
	SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <SEGGER_SYSVIEW_Conf+0x24>)
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <SEGGER_SYSVIEW_Conf+0x24>)
 8008f76:	6819      	ldr	r1, [r3, #0]
 8008f78:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <SEGGER_SYSVIEW_Conf+0x28>)
 8008f7a:	4a06      	ldr	r2, [pc, #24]	; (8008f94 <SEGGER_SYSVIEW_Conf+0x2c>)
 8008f7c:	f7ff f828 	bl	8007fd0 <SEGGER_SYSVIEW_Init>
			&SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
	SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008f80:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008f84:	f7ff f868 	bl	8008058 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008f88:	bf00      	nop
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000000 	.word	0x20000000
 8008f90:	08008ee1 	.word	0x08008ee1
 8008f94:	08009634 	.word	0x08009634

08008f98 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	607b      	str	r3, [r7, #4]
 8008fa2:	e048      	b.n	8009036 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8008fa4:	4929      	ldr	r1, [pc, #164]	; (800904c <_cbSendTaskList+0xb4>)
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fd f959 	bl	800626c <uxTaskGetStackHighWaterMark>
 8008fba:	4601      	mov	r1, r0
 8008fbc:	4823      	ldr	r0, [pc, #140]	; (800904c <_cbSendTaskList+0xb4>)
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4403      	add	r3, r0
 8008fca:	3310      	adds	r3, #16
 8008fcc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008fce:	491f      	ldr	r1, [pc, #124]	; (800904c <_cbSendTaskList+0xb4>)
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	6818      	ldr	r0, [r3, #0]
 8008fde:	491b      	ldr	r1, [pc, #108]	; (800904c <_cbSendTaskList+0xb4>)
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	440b      	add	r3, r1
 8008fec:	3304      	adds	r3, #4
 8008fee:	6819      	ldr	r1, [r3, #0]
 8008ff0:	4c16      	ldr	r4, [pc, #88]	; (800904c <_cbSendTaskList+0xb4>)
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4423      	add	r3, r4
 8008ffe:	3308      	adds	r3, #8
 8009000:	681c      	ldr	r4, [r3, #0]
 8009002:	4d12      	ldr	r5, [pc, #72]	; (800904c <_cbSendTaskList+0xb4>)
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	442b      	add	r3, r5
 8009010:	330c      	adds	r3, #12
 8009012:	681d      	ldr	r5, [r3, #0]
 8009014:	4e0d      	ldr	r6, [pc, #52]	; (800904c <_cbSendTaskList+0xb4>)
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	4613      	mov	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4433      	add	r3, r6
 8009022:	3310      	adds	r3, #16
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	462b      	mov	r3, r5
 800902a:	4622      	mov	r2, r4
 800902c:	f000 f8be 	bl	80091ac <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3301      	adds	r3, #1
 8009034:	607b      	str	r3, [r7, #4]
 8009036:	4b06      	ldr	r3, [pc, #24]	; (8009050 <_cbSendTaskList+0xb8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	429a      	cmp	r2, r3
 800903e:	d3b1      	bcc.n	8008fa4 <_cbSendTaskList+0xc>
  }
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800904a:	bf00      	nop
 800904c:	2000550c 	.word	0x2000550c
 8009050:	200055ac 	.word	0x200055ac

08009054 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800905c:	f7fc fd3c 	bl	8005ad8 <xTaskGetTickCountFromISR>
 8009060:	4603      	mov	r3, r0
 8009062:	2200      	movs	r2, #0
 8009064:	469a      	mov	sl, r3
 8009066:	4693      	mov	fp, r2
 8009068:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800906c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	f04f 0a00 	mov.w	sl, #0
 8009078:	f04f 0b00 	mov.w	fp, #0
 800907c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009080:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009084:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8009088:	4652      	mov	r2, sl
 800908a:	465b      	mov	r3, fp
 800908c:	1a14      	subs	r4, r2, r0
 800908e:	eb63 0501 	sbc.w	r5, r3, r1
 8009092:	f04f 0200 	mov.w	r2, #0
 8009096:	f04f 0300 	mov.w	r3, #0
 800909a:	00ab      	lsls	r3, r5, #2
 800909c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80090a0:	00a2      	lsls	r2, r4, #2
 80090a2:	4614      	mov	r4, r2
 80090a4:	461d      	mov	r5, r3
 80090a6:	eb14 0800 	adds.w	r8, r4, r0
 80090aa:	eb45 0901 	adc.w	r9, r5, r1
 80090ae:	f04f 0200 	mov.w	r2, #0
 80090b2:	f04f 0300 	mov.w	r3, #0
 80090b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090c2:	4690      	mov	r8, r2
 80090c4:	4699      	mov	r9, r3
 80090c6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80090ca:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80090ce:	4610      	mov	r0, r2
 80090d0:	4619      	mov	r1, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080090dc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af02      	add	r7, sp, #8
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80090ea:	2205      	movs	r2, #5
 80090ec:	492b      	ldr	r1, [pc, #172]	; (800919c <SYSVIEW_AddTask+0xc0>)
 80090ee:	68b8      	ldr	r0, [r7, #8]
 80090f0:	f000 f87d 	bl	80091ee <memcmp>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d04b      	beq.n	8009192 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80090fa:	4b29      	ldr	r3, [pc, #164]	; (80091a0 <SYSVIEW_AddTask+0xc4>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b07      	cmp	r3, #7
 8009100:	d903      	bls.n	800910a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8009102:	4828      	ldr	r0, [pc, #160]	; (80091a4 <SYSVIEW_AddTask+0xc8>)
 8009104:	f7ff fe0a 	bl	8008d1c <SEGGER_SYSVIEW_Warn>
    return;
 8009108:	e044      	b.n	8009194 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800910a:	4b25      	ldr	r3, [pc, #148]	; (80091a0 <SYSVIEW_AddTask+0xc4>)
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	4926      	ldr	r1, [pc, #152]	; (80091a8 <SYSVIEW_AddTask+0xcc>)
 8009110:	4613      	mov	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800911e:	4b20      	ldr	r3, [pc, #128]	; (80091a0 <SYSVIEW_AddTask+0xc4>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4921      	ldr	r1, [pc, #132]	; (80091a8 <SYSVIEW_AddTask+0xcc>)
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	3304      	adds	r3, #4
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009134:	4b1a      	ldr	r3, [pc, #104]	; (80091a0 <SYSVIEW_AddTask+0xc4>)
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	491b      	ldr	r1, [pc, #108]	; (80091a8 <SYSVIEW_AddTask+0xcc>)
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	3308      	adds	r3, #8
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800914a:	4b15      	ldr	r3, [pc, #84]	; (80091a0 <SYSVIEW_AddTask+0xc4>)
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4916      	ldr	r1, [pc, #88]	; (80091a8 <SYSVIEW_AddTask+0xcc>)
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	330c      	adds	r3, #12
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8009160:	4b0f      	ldr	r3, [pc, #60]	; (80091a0 <SYSVIEW_AddTask+0xc4>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	4910      	ldr	r1, [pc, #64]	; (80091a8 <SYSVIEW_AddTask+0xcc>)
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	3310      	adds	r3, #16
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8009176:	4b0a      	ldr	r3, [pc, #40]	; (80091a0 <SYSVIEW_AddTask+0xc4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3301      	adds	r3, #1
 800917c:	4a08      	ldr	r2, [pc, #32]	; (80091a0 <SYSVIEW_AddTask+0xc4>)
 800917e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	68b9      	ldr	r1, [r7, #8]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 f80e 	bl	80091ac <SYSVIEW_SendTaskInfo>
 8009190:	e000      	b.n	8009194 <SYSVIEW_AddTask+0xb8>
    return;
 8009192:	bf00      	nop

}
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	080094e8 	.word	0x080094e8
 80091a0:	200055ac 	.word	0x200055ac
 80091a4:	080094f0 	.word	0x080094f0
 80091a8:	2000550c 	.word	0x2000550c

080091ac <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08a      	sub	sp, #40	; 0x28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
 80091b8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80091ba:	f107 0314 	add.w	r3, r7, #20
 80091be:	2214      	movs	r2, #20
 80091c0:	2100      	movs	r1, #0
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f823 	bl	800920e <memset>
  TaskInfo.TaskID     = TaskID;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80091dc:	f107 0314 	add.w	r3, r7, #20
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff fa7f 	bl	80086e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80091e6:	bf00      	nop
 80091e8:	3728      	adds	r7, #40	; 0x28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <memcmp>:
 80091ee:	b510      	push	{r4, lr}
 80091f0:	3901      	subs	r1, #1
 80091f2:	4402      	add	r2, r0
 80091f4:	4290      	cmp	r0, r2
 80091f6:	d101      	bne.n	80091fc <memcmp+0xe>
 80091f8:	2000      	movs	r0, #0
 80091fa:	e005      	b.n	8009208 <memcmp+0x1a>
 80091fc:	7803      	ldrb	r3, [r0, #0]
 80091fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009202:	42a3      	cmp	r3, r4
 8009204:	d001      	beq.n	800920a <memcmp+0x1c>
 8009206:	1b18      	subs	r0, r3, r4
 8009208:	bd10      	pop	{r4, pc}
 800920a:	3001      	adds	r0, #1
 800920c:	e7f2      	b.n	80091f4 <memcmp+0x6>

0800920e <memset>:
 800920e:	4402      	add	r2, r0
 8009210:	4603      	mov	r3, r0
 8009212:	4293      	cmp	r3, r2
 8009214:	d100      	bne.n	8009218 <memset+0xa>
 8009216:	4770      	bx	lr
 8009218:	f803 1b01 	strb.w	r1, [r3], #1
 800921c:	e7f9      	b.n	8009212 <memset+0x4>
	...

08009220 <_reclaim_reent>:
 8009220:	4b29      	ldr	r3, [pc, #164]	; (80092c8 <_reclaim_reent+0xa8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4283      	cmp	r3, r0
 8009226:	b570      	push	{r4, r5, r6, lr}
 8009228:	4604      	mov	r4, r0
 800922a:	d04b      	beq.n	80092c4 <_reclaim_reent+0xa4>
 800922c:	69c3      	ldr	r3, [r0, #28]
 800922e:	b143      	cbz	r3, 8009242 <_reclaim_reent+0x22>
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d144      	bne.n	80092c0 <_reclaim_reent+0xa0>
 8009236:	69e3      	ldr	r3, [r4, #28]
 8009238:	6819      	ldr	r1, [r3, #0]
 800923a:	b111      	cbz	r1, 8009242 <_reclaim_reent+0x22>
 800923c:	4620      	mov	r0, r4
 800923e:	f000 f879 	bl	8009334 <_free_r>
 8009242:	6961      	ldr	r1, [r4, #20]
 8009244:	b111      	cbz	r1, 800924c <_reclaim_reent+0x2c>
 8009246:	4620      	mov	r0, r4
 8009248:	f000 f874 	bl	8009334 <_free_r>
 800924c:	69e1      	ldr	r1, [r4, #28]
 800924e:	b111      	cbz	r1, 8009256 <_reclaim_reent+0x36>
 8009250:	4620      	mov	r0, r4
 8009252:	f000 f86f 	bl	8009334 <_free_r>
 8009256:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009258:	b111      	cbz	r1, 8009260 <_reclaim_reent+0x40>
 800925a:	4620      	mov	r0, r4
 800925c:	f000 f86a 	bl	8009334 <_free_r>
 8009260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009262:	b111      	cbz	r1, 800926a <_reclaim_reent+0x4a>
 8009264:	4620      	mov	r0, r4
 8009266:	f000 f865 	bl	8009334 <_free_r>
 800926a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800926c:	b111      	cbz	r1, 8009274 <_reclaim_reent+0x54>
 800926e:	4620      	mov	r0, r4
 8009270:	f000 f860 	bl	8009334 <_free_r>
 8009274:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009276:	b111      	cbz	r1, 800927e <_reclaim_reent+0x5e>
 8009278:	4620      	mov	r0, r4
 800927a:	f000 f85b 	bl	8009334 <_free_r>
 800927e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009280:	b111      	cbz	r1, 8009288 <_reclaim_reent+0x68>
 8009282:	4620      	mov	r0, r4
 8009284:	f000 f856 	bl	8009334 <_free_r>
 8009288:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800928a:	b111      	cbz	r1, 8009292 <_reclaim_reent+0x72>
 800928c:	4620      	mov	r0, r4
 800928e:	f000 f851 	bl	8009334 <_free_r>
 8009292:	6a23      	ldr	r3, [r4, #32]
 8009294:	b1b3      	cbz	r3, 80092c4 <_reclaim_reent+0xa4>
 8009296:	4620      	mov	r0, r4
 8009298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800929c:	4718      	bx	r3
 800929e:	5949      	ldr	r1, [r1, r5]
 80092a0:	b941      	cbnz	r1, 80092b4 <_reclaim_reent+0x94>
 80092a2:	3504      	adds	r5, #4
 80092a4:	69e3      	ldr	r3, [r4, #28]
 80092a6:	2d80      	cmp	r5, #128	; 0x80
 80092a8:	68d9      	ldr	r1, [r3, #12]
 80092aa:	d1f8      	bne.n	800929e <_reclaim_reent+0x7e>
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 f841 	bl	8009334 <_free_r>
 80092b2:	e7c0      	b.n	8009236 <_reclaim_reent+0x16>
 80092b4:	680e      	ldr	r6, [r1, #0]
 80092b6:	4620      	mov	r0, r4
 80092b8:	f000 f83c 	bl	8009334 <_free_r>
 80092bc:	4631      	mov	r1, r6
 80092be:	e7ef      	b.n	80092a0 <_reclaim_reent+0x80>
 80092c0:	2500      	movs	r5, #0
 80092c2:	e7ef      	b.n	80092a4 <_reclaim_reent+0x84>
 80092c4:	bd70      	pop	{r4, r5, r6, pc}
 80092c6:	bf00      	nop
 80092c8:	2000005c 	.word	0x2000005c

080092cc <__libc_init_array>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	4d0d      	ldr	r5, [pc, #52]	; (8009304 <__libc_init_array+0x38>)
 80092d0:	4c0d      	ldr	r4, [pc, #52]	; (8009308 <__libc_init_array+0x3c>)
 80092d2:	1b64      	subs	r4, r4, r5
 80092d4:	10a4      	asrs	r4, r4, #2
 80092d6:	2600      	movs	r6, #0
 80092d8:	42a6      	cmp	r6, r4
 80092da:	d109      	bne.n	80092f0 <__libc_init_array+0x24>
 80092dc:	4d0b      	ldr	r5, [pc, #44]	; (800930c <__libc_init_array+0x40>)
 80092de:	4c0c      	ldr	r4, [pc, #48]	; (8009310 <__libc_init_array+0x44>)
 80092e0:	f000 f880 	bl	80093e4 <_init>
 80092e4:	1b64      	subs	r4, r4, r5
 80092e6:	10a4      	asrs	r4, r4, #2
 80092e8:	2600      	movs	r6, #0
 80092ea:	42a6      	cmp	r6, r4
 80092ec:	d105      	bne.n	80092fa <__libc_init_array+0x2e>
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f4:	4798      	blx	r3
 80092f6:	3601      	adds	r6, #1
 80092f8:	e7ee      	b.n	80092d8 <__libc_init_array+0xc>
 80092fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fe:	4798      	blx	r3
 8009300:	3601      	adds	r6, #1
 8009302:	e7f2      	b.n	80092ea <__libc_init_array+0x1e>
 8009304:	08009644 	.word	0x08009644
 8009308:	08009644 	.word	0x08009644
 800930c:	08009644 	.word	0x08009644
 8009310:	08009648 	.word	0x08009648

08009314 <__retarget_lock_acquire_recursive>:
 8009314:	4770      	bx	lr

08009316 <__retarget_lock_release_recursive>:
 8009316:	4770      	bx	lr

08009318 <memcpy>:
 8009318:	440a      	add	r2, r1
 800931a:	4291      	cmp	r1, r2
 800931c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009320:	d100      	bne.n	8009324 <memcpy+0xc>
 8009322:	4770      	bx	lr
 8009324:	b510      	push	{r4, lr}
 8009326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800932a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800932e:	4291      	cmp	r1, r2
 8009330:	d1f9      	bne.n	8009326 <memcpy+0xe>
 8009332:	bd10      	pop	{r4, pc}

08009334 <_free_r>:
 8009334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009336:	2900      	cmp	r1, #0
 8009338:	d044      	beq.n	80093c4 <_free_r+0x90>
 800933a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800933e:	9001      	str	r0, [sp, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f1a1 0404 	sub.w	r4, r1, #4
 8009346:	bfb8      	it	lt
 8009348:	18e4      	addlt	r4, r4, r3
 800934a:	f000 f83f 	bl	80093cc <__malloc_lock>
 800934e:	4a1e      	ldr	r2, [pc, #120]	; (80093c8 <_free_r+0x94>)
 8009350:	9801      	ldr	r0, [sp, #4]
 8009352:	6813      	ldr	r3, [r2, #0]
 8009354:	b933      	cbnz	r3, 8009364 <_free_r+0x30>
 8009356:	6063      	str	r3, [r4, #4]
 8009358:	6014      	str	r4, [r2, #0]
 800935a:	b003      	add	sp, #12
 800935c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009360:	f000 b83a 	b.w	80093d8 <__malloc_unlock>
 8009364:	42a3      	cmp	r3, r4
 8009366:	d908      	bls.n	800937a <_free_r+0x46>
 8009368:	6825      	ldr	r5, [r4, #0]
 800936a:	1961      	adds	r1, r4, r5
 800936c:	428b      	cmp	r3, r1
 800936e:	bf01      	itttt	eq
 8009370:	6819      	ldreq	r1, [r3, #0]
 8009372:	685b      	ldreq	r3, [r3, #4]
 8009374:	1949      	addeq	r1, r1, r5
 8009376:	6021      	streq	r1, [r4, #0]
 8009378:	e7ed      	b.n	8009356 <_free_r+0x22>
 800937a:	461a      	mov	r2, r3
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	b10b      	cbz	r3, 8009384 <_free_r+0x50>
 8009380:	42a3      	cmp	r3, r4
 8009382:	d9fa      	bls.n	800937a <_free_r+0x46>
 8009384:	6811      	ldr	r1, [r2, #0]
 8009386:	1855      	adds	r5, r2, r1
 8009388:	42a5      	cmp	r5, r4
 800938a:	d10b      	bne.n	80093a4 <_free_r+0x70>
 800938c:	6824      	ldr	r4, [r4, #0]
 800938e:	4421      	add	r1, r4
 8009390:	1854      	adds	r4, r2, r1
 8009392:	42a3      	cmp	r3, r4
 8009394:	6011      	str	r1, [r2, #0]
 8009396:	d1e0      	bne.n	800935a <_free_r+0x26>
 8009398:	681c      	ldr	r4, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	6053      	str	r3, [r2, #4]
 800939e:	440c      	add	r4, r1
 80093a0:	6014      	str	r4, [r2, #0]
 80093a2:	e7da      	b.n	800935a <_free_r+0x26>
 80093a4:	d902      	bls.n	80093ac <_free_r+0x78>
 80093a6:	230c      	movs	r3, #12
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	e7d6      	b.n	800935a <_free_r+0x26>
 80093ac:	6825      	ldr	r5, [r4, #0]
 80093ae:	1961      	adds	r1, r4, r5
 80093b0:	428b      	cmp	r3, r1
 80093b2:	bf04      	itt	eq
 80093b4:	6819      	ldreq	r1, [r3, #0]
 80093b6:	685b      	ldreq	r3, [r3, #4]
 80093b8:	6063      	str	r3, [r4, #4]
 80093ba:	bf04      	itt	eq
 80093bc:	1949      	addeq	r1, r1, r5
 80093be:	6021      	streq	r1, [r4, #0]
 80093c0:	6054      	str	r4, [r2, #4]
 80093c2:	e7ca      	b.n	800935a <_free_r+0x26>
 80093c4:	b003      	add	sp, #12
 80093c6:	bd30      	pop	{r4, r5, pc}
 80093c8:	200056ec 	.word	0x200056ec

080093cc <__malloc_lock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__malloc_lock+0x8>)
 80093ce:	f7ff bfa1 	b.w	8009314 <__retarget_lock_acquire_recursive>
 80093d2:	bf00      	nop
 80093d4:	200056e8 	.word	0x200056e8

080093d8 <__malloc_unlock>:
 80093d8:	4801      	ldr	r0, [pc, #4]	; (80093e0 <__malloc_unlock+0x8>)
 80093da:	f7ff bf9c 	b.w	8009316 <__retarget_lock_release_recursive>
 80093de:	bf00      	nop
 80093e0:	200056e8 	.word	0x200056e8

080093e4 <_init>:
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e6:	bf00      	nop
 80093e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ea:	bc08      	pop	{r3}
 80093ec:	469e      	mov	lr, r3
 80093ee:	4770      	bx	lr

080093f0 <_fini>:
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f2:	bf00      	nop
 80093f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f6:	bc08      	pop	{r3}
 80093f8:	469e      	mov	lr, r3
 80093fa:	4770      	bx	lr
